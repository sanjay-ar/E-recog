{"ast":null,"code":"import { __asyncGenerator, __await, __generator } from \"tslib\";\nexport function getChunkedStream(source) {\n  var _a;\n\n  var currentMessageTotalLength = 0;\n  var currentMessagePendingLength = 0;\n  var currentMessage = null;\n  var messageLengthBuffer = null;\n\n  var allocateMessage = function (size) {\n    if (typeof size !== \"number\") {\n      throw new Error(\"Attempted to allocate an event message where size was not a number: \" + size);\n    }\n\n    currentMessageTotalLength = size;\n    currentMessagePendingLength = 4;\n    currentMessage = new Uint8Array(size);\n    var currentMessageView = new DataView(currentMessage.buffer);\n    currentMessageView.setUint32(0, size, false);\n  };\n\n  var iterator = function () {\n    return __asyncGenerator(this, arguments, function () {\n      var sourceIterator, _a, value, done, chunkLength, currentOffset, bytesRemaining, numBytesForTotal, numBytesToWrite;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            sourceIterator = source[Symbol.asyncIterator]();\n            _b.label = 1;\n\n          case 1:\n            if (!true) return [3, 16];\n            return [4, __await(sourceIterator.next())];\n\n          case 2:\n            _a = _b.sent(), value = _a.value, done = _a.done;\n            if (!done) return [3, 10];\n            if (!!currentMessageTotalLength) return [3, 4];\n            return [4, __await(void 0)];\n\n          case 3:\n            return [2, _b.sent()];\n\n          case 4:\n            if (!(currentMessageTotalLength === currentMessagePendingLength)) return [3, 7];\n            return [4, __await(currentMessage)];\n\n          case 5:\n            return [4, _b.sent()];\n\n          case 6:\n            _b.sent();\n\n            return [3, 8];\n\n          case 7:\n            throw new Error(\"Truncated event message received.\");\n\n          case 8:\n            return [4, __await(void 0)];\n\n          case 9:\n            return [2, _b.sent()];\n\n          case 10:\n            chunkLength = value.length;\n            currentOffset = 0;\n            _b.label = 11;\n\n          case 11:\n            if (!(currentOffset < chunkLength)) return [3, 15];\n\n            if (!currentMessage) {\n              bytesRemaining = chunkLength - currentOffset;\n\n              if (!messageLengthBuffer) {\n                messageLengthBuffer = new Uint8Array(4);\n              }\n\n              numBytesForTotal = Math.min(4 - currentMessagePendingLength, bytesRemaining);\n              messageLengthBuffer.set(value.slice(currentOffset, currentOffset + numBytesForTotal), currentMessagePendingLength);\n              currentMessagePendingLength += numBytesForTotal;\n              currentOffset += numBytesForTotal;\n\n              if (currentMessagePendingLength < 4) {\n                return [3, 15];\n              }\n\n              allocateMessage(new DataView(messageLengthBuffer.buffer).getUint32(0, false));\n              messageLengthBuffer = null;\n            }\n\n            numBytesToWrite = Math.min(currentMessageTotalLength - currentMessagePendingLength, chunkLength - currentOffset);\n            currentMessage.set(value.slice(currentOffset, currentOffset + numBytesToWrite), currentMessagePendingLength);\n            currentMessagePendingLength += numBytesToWrite;\n            currentOffset += numBytesToWrite;\n            if (!(currentMessageTotalLength && currentMessageTotalLength === currentMessagePendingLength)) return [3, 14];\n            return [4, __await(currentMessage)];\n\n          case 12:\n            return [4, _b.sent()];\n\n          case 13:\n            _b.sent();\n\n            currentMessage = null;\n            currentMessageTotalLength = 0;\n            currentMessagePendingLength = 0;\n            _b.label = 14;\n\n          case 14:\n            return [3, 11];\n\n          case 15:\n            return [3, 1];\n\n          case 16:\n            return [2];\n        }\n      });\n    });\n  };\n\n  return _a = {}, _a[Symbol.asyncIterator] = iterator, _a;\n}","map":{"version":3,"sources":["/Users/sanjayar/Desktop/moody-main copy/node_modules/@aws-sdk/client-lex-runtime-v2/node_modules/@aws-sdk/eventstream-serde-universal/dist-es/getChunkedStream.js"],"names":["__asyncGenerator","__await","__generator","getChunkedStream","source","_a","currentMessageTotalLength","currentMessagePendingLength","currentMessage","messageLengthBuffer","allocateMessage","size","Error","Uint8Array","currentMessageView","DataView","buffer","setUint32","iterator","arguments","sourceIterator","value","done","chunkLength","currentOffset","bytesRemaining","numBytesForTotal","numBytesToWrite","_b","label","Symbol","asyncIterator","next","sent","length","Math","min","set","slice","getUint32"],"mappings":"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","sourcesContent":["import { __asyncGenerator, __await, __generator } from \"tslib\";\nexport function getChunkedStream(source) {\n    var _a;\n    var currentMessageTotalLength = 0;\n    var currentMessagePendingLength = 0;\n    var currentMessage = null;\n    var messageLengthBuffer = null;\n    var allocateMessage = function (size) {\n        if (typeof size !== \"number\") {\n            throw new Error(\"Attempted to allocate an event message where size was not a number: \" + size);\n        }\n        currentMessageTotalLength = size;\n        currentMessagePendingLength = 4;\n        currentMessage = new Uint8Array(size);\n        var currentMessageView = new DataView(currentMessage.buffer);\n        currentMessageView.setUint32(0, size, false);\n    };\n    var iterator = function () {\n        return __asyncGenerator(this, arguments, function () {\n            var sourceIterator, _a, value, done, chunkLength, currentOffset, bytesRemaining, numBytesForTotal, numBytesToWrite;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        sourceIterator = source[Symbol.asyncIterator]();\n                        _b.label = 1;\n                    case 1:\n                        if (!true) return [3, 16];\n                        return [4, __await(sourceIterator.next())];\n                    case 2:\n                        _a = _b.sent(), value = _a.value, done = _a.done;\n                        if (!done) return [3, 10];\n                        if (!!currentMessageTotalLength) return [3, 4];\n                        return [4, __await(void 0)];\n                    case 3: return [2, _b.sent()];\n                    case 4:\n                        if (!(currentMessageTotalLength === currentMessagePendingLength)) return [3, 7];\n                        return [4, __await(currentMessage)];\n                    case 5: return [4, _b.sent()];\n                    case 6:\n                        _b.sent();\n                        return [3, 8];\n                    case 7: throw new Error(\"Truncated event message received.\");\n                    case 8: return [4, __await(void 0)];\n                    case 9: return [2, _b.sent()];\n                    case 10:\n                        chunkLength = value.length;\n                        currentOffset = 0;\n                        _b.label = 11;\n                    case 11:\n                        if (!(currentOffset < chunkLength)) return [3, 15];\n                        if (!currentMessage) {\n                            bytesRemaining = chunkLength - currentOffset;\n                            if (!messageLengthBuffer) {\n                                messageLengthBuffer = new Uint8Array(4);\n                            }\n                            numBytesForTotal = Math.min(4 - currentMessagePendingLength, bytesRemaining);\n                            messageLengthBuffer.set(value.slice(currentOffset, currentOffset + numBytesForTotal), currentMessagePendingLength);\n                            currentMessagePendingLength += numBytesForTotal;\n                            currentOffset += numBytesForTotal;\n                            if (currentMessagePendingLength < 4) {\n                                return [3, 15];\n                            }\n                            allocateMessage(new DataView(messageLengthBuffer.buffer).getUint32(0, false));\n                            messageLengthBuffer = null;\n                        }\n                        numBytesToWrite = Math.min(currentMessageTotalLength - currentMessagePendingLength, chunkLength - currentOffset);\n                        currentMessage.set(value.slice(currentOffset, currentOffset + numBytesToWrite), currentMessagePendingLength);\n                        currentMessagePendingLength += numBytesToWrite;\n                        currentOffset += numBytesToWrite;\n                        if (!(currentMessageTotalLength && currentMessageTotalLength === currentMessagePendingLength)) return [3, 14];\n                        return [4, __await(currentMessage)];\n                    case 12: return [4, _b.sent()];\n                    case 13:\n                        _b.sent();\n                        currentMessage = null;\n                        currentMessageTotalLength = 0;\n                        currentMessagePendingLength = 0;\n                        _b.label = 14;\n                    case 14: return [3, 11];\n                    case 15: return [3, 1];\n                    case 16: return [2];\n                }\n            });\n        });\n    };\n    return _a = {},\n        _a[Symbol.asyncIterator] = iterator,\n        _a;\n}\n"]},"metadata":{},"sourceType":"module"}