{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\n// The number of minutes until expiration of the survey\nimport { useAppDispatch } from \"../../reduxHooks\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { API } from \"aws-amplify\";\nimport { getPublicMeetingInfo } from \"../../graphql/queries\";\nimport { GRAPHQL_AUTH_MODE } from \"@aws-amplify/api-graphql\";\nimport { differenceInMinutes } from \"date-fns\";\nimport { addError } from \"../../error/errorSlice\";\nimport { createRating } from \"../../graphql/mutations\";\nimport { EXPIRATION_MINUTES } from \"./constants\";\nexport const useFetchPublicMeeting = id => {\n  _s();\n\n  const dispatch = useAppDispatch();\n  const [publicMeeting, setPublicMeeting] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [expired, setExpired] = useState(false);\n  useEffect(() => {\n    const fetchPublicMeeting = async () => {\n      setLoading(true);\n\n      try {\n        var _result$data, _result$data2, _result$data2$getPubl;\n\n        const result = await API.graphql({\n          query: getPublicMeetingInfo,\n          variables: {\n            id\n          },\n          authMode: GRAPHQL_AUTH_MODE.AWS_IAM\n        });\n        setPublicMeeting(result === null || result === void 0 ? void 0 : (_result$data = result.data) === null || _result$data === void 0 ? void 0 : _result$data.getPublicMeetingInfo);\n\n        if (Math.abs(differenceInMinutes(new Date(result === null || result === void 0 ? void 0 : (_result$data2 = result.data) === null || _result$data2 === void 0 ? void 0 : (_result$data2$getPubl = _result$data2.getPublicMeetingInfo) === null || _result$data2$getPubl === void 0 ? void 0 : _result$data2$getPubl.stoppedAt), new Date())) > EXPIRATION_MINUTES) {\n          setExpired(true);\n        }\n      } catch (e) {\n        dispatch(addError(e.message));\n        setExpired(false);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchPublicMeeting();\n  }, [dispatch, id]);\n  return [loading, expired, publicMeeting];\n};\n\n_s(useFetchPublicMeeting, \"OW2GGbn79btZq2XsR1EOXUyWy6g=\", false, function () {\n  return [useAppDispatch];\n});\n\nexport const useSubmitAnswer = (publicmeetinginfoID, owner) => {\n  _s2();\n\n  const dispatch = useAppDispatch();\n  const [loading, setLoading] = useState(false);\n  const [submitted, setSubmitted] = useState(false);\n  const callback = useCallback(async (overallStars, paceStars, contentStars) => {\n    try {\n      if (!publicmeetinginfoID || !owner) {\n        dispatch(addError(\"Something went wrong! This is most likely a bug. Please contact an administrator.\"));\n        return;\n      }\n\n      setLoading(true);\n      await API.graphql({\n        query: createRating,\n        variables: {\n          input: {\n            overallStars,\n            paceStars,\n            contentStars,\n            publicmeetinginfoID,\n            owner\n          }\n        },\n        authMode: GRAPHQL_AUTH_MODE.AWS_IAM\n      });\n      setSubmitted(true);\n    } catch (e) {\n      dispatch(addError(e.message));\n    } finally {\n      setLoading(false);\n    }\n  }, [dispatch, owner, publicmeetinginfoID]);\n  return [loading, submitted, callback];\n};\n\n_s2(useSubmitAnswer, \"RoPplYQfc3kqp8H+RvjFpHRtyLA=\", false, function () {\n  return [useAppDispatch];\n});","map":{"version":3,"sources":["/Users/sanjayar/Desktop/moody-main copy/src/pages/feedback/hooks.tsx"],"names":["useAppDispatch","useCallback","useEffect","useState","API","getPublicMeetingInfo","GRAPHQL_AUTH_MODE","differenceInMinutes","addError","createRating","EXPIRATION_MINUTES","useFetchPublicMeeting","id","dispatch","publicMeeting","setPublicMeeting","loading","setLoading","expired","setExpired","fetchPublicMeeting","result","graphql","query","variables","authMode","AWS_IAM","data","Math","abs","Date","stoppedAt","e","message","useSubmitAnswer","publicmeetinginfoID","owner","submitted","setSubmitted","callback","overallStars","paceStars","contentStars","input"],"mappings":"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","sourcesContent":["// The number of minutes until expiration of the survey\nimport { PublicMeetingInfo } from \"../../models\";\nimport { useAppDispatch } from \"../../reduxHooks\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { API } from \"aws-amplify\";\nimport { getPublicMeetingInfo } from \"../../graphql/queries\";\nimport { GRAPHQL_AUTH_MODE } from \"@aws-amplify/api-graphql\";\nimport { differenceInMinutes } from \"date-fns\";\nimport { addError } from \"../../error/errorSlice\";\nimport { createRating } from \"../../graphql/mutations\";\nimport { EXPIRATION_MINUTES } from \"./constants\";\n\nexport const useFetchPublicMeeting = (\n  id: string\n): [boolean, boolean, PublicMeetingInfo | null] => {\n  const dispatch = useAppDispatch();\n  const [publicMeeting, setPublicMeeting] = useState<PublicMeetingInfo | null>(\n    null\n  );\n  const [loading, setLoading] = useState<boolean>(true);\n  const [expired, setExpired] = useState<boolean>(false);\n\n  useEffect(() => {\n    const fetchPublicMeeting = async () => {\n      setLoading(true);\n      try {\n        const result = (await API.graphql({\n          query: getPublicMeetingInfo,\n          variables: { id },\n          authMode: GRAPHQL_AUTH_MODE.AWS_IAM,\n        })) as any;\n        setPublicMeeting(result?.data?.getPublicMeetingInfo);\n        if (\n          Math.abs(\n            differenceInMinutes(\n              new Date(result?.data?.getPublicMeetingInfo?.stoppedAt),\n              new Date()\n            )\n          ) > EXPIRATION_MINUTES\n        ) {\n          setExpired(true);\n        }\n      } catch (e) {\n        dispatch(addError(e.message));\n        setExpired(false);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchPublicMeeting();\n  }, [dispatch, id]);\n\n  return [loading, expired, publicMeeting];\n};\n\nexport const useSubmitAnswer = (\n  publicmeetinginfoID?: string | null,\n  owner?: string | null\n): [\n  boolean,\n  boolean,\n  (\n    overallStars: number,\n    paceStars: number | null,\n    contentStars: number | null\n  ) => void\n] => {\n  const dispatch = useAppDispatch();\n  const [loading, setLoading] = useState<boolean>(false);\n  const [submitted, setSubmitted] = useState<boolean>(false);\n\n  const callback = useCallback(\n    async (\n      overallStars: number,\n      paceStars: number | null,\n      contentStars: number | null\n    ): Promise<void> => {\n      try {\n        if (!publicmeetinginfoID || !owner) {\n          dispatch(\n            addError(\n              \"Something went wrong! This is most likely a bug. Please contact an administrator.\"\n            )\n          );\n          return;\n        }\n\n        setLoading(true);\n        await API.graphql({\n          query: createRating,\n          variables: {\n            input: {\n              overallStars,\n              paceStars,\n              contentStars,\n              publicmeetinginfoID,\n              owner,\n            },\n          },\n          authMode: GRAPHQL_AUTH_MODE.AWS_IAM,\n        });\n        setSubmitted(true);\n      } catch (e) {\n        dispatch(addError(e.message));\n      } finally {\n        setLoading(false);\n      }\n    },\n    [dispatch, owner, publicmeetinginfoID]\n  );\n\n  return [loading, submitted, callback];\n};\n"]},"metadata":{},"sourceType":"module"}