{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n/*\n * Copyright 2017-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\n\nimport { AbstractInteractionsProvider } from './InteractionsProvider';\nimport { LexRuntimeV2Client, RecognizeTextCommand, RecognizeUtteranceCommand } from '@aws-sdk/client-lex-runtime-v2';\nimport { ConsoleLogger as Logger, Credentials, getAmplifyUserAgent } from '@aws-amplify/core';\nimport { convert } from './AWSLexProviderHelper/utils';\nimport { unGzipBase64AsJson } from './AWSLexProviderHelper/commonUtils';\nvar logger = new Logger('AWSLexV2Provider');\n\nvar AWSLexV2Provider =\n/** @class */\nfunction (_super) {\n  __extends(AWSLexV2Provider, _super);\n  /**\n   * Initialize Interactions with AWS configurations\n   * @param {InteractionsOptions} options - Configuration object for Interactions\n   */\n\n\n  function AWSLexV2Provider(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _this = _super.call(this, options) || this;\n\n    _this._botsCompleteCallback = {};\n    return _this;\n  }\n  /**\n   * get provider name of the plugin\n   * @returns {string} name of the provider\n   */\n\n\n  AWSLexV2Provider.prototype.getProviderName = function () {\n    return 'AWSLexV2Provider';\n  };\n  /**\n   * Configure Interactions part with aws configuration\n   * @param {AWSLexV2ProviderOptions} config - Configuration of the Interactions\n   * @return {AWSLexV2ProviderOptions} - Current configuration\n   */\n\n\n  AWSLexV2Provider.prototype.configure = function (config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    var propertiesToTest = ['name', 'botId', 'aliasId', 'localeId', 'providerName', 'region'];\n    Object.keys(config).forEach(function (botKey) {\n      var botConfig = config[botKey]; // is bot config correct\n\n      if (!propertiesToTest.every(function (x) {\n        return x in botConfig;\n      })) {\n        throw new Error('invalid bot configuration');\n      }\n    });\n    return _super.prototype.configure.call(this, config);\n  };\n  /**\n   * Send a message to a bot\n   * @async\n   * @param {string} botname - Bot name to send the message\n   * @param {string | InteractionsMessage} message - message to send to the bot\n   * @return {Promise<InteractionsResponse>} A promise resolves to the response from the bot\n   */\n\n\n  AWSLexV2Provider.prototype.sendMessage = function (botname, message) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, error_1, response, reqBaseParams;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // check if bot exists\n            if (!this._config[botname]) {\n              return [2\n              /*return*/\n              , Promise.reject('Bot ' + botname + ' does not exist')];\n            }\n\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , Credentials.get()];\n\n          case 2:\n            credentials = _a.sent();\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            error_1 = _a.sent();\n            return [2\n            /*return*/\n            , Promise.reject('No credentials')];\n\n          case 4:\n            this._lexRuntimeServiceV2Client = new LexRuntimeV2Client({\n              region: this._config[botname].region,\n              credentials: credentials,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            reqBaseParams = {\n              botAliasId: this._config[botname].aliasId,\n              botId: this._config[botname].botId,\n              localeId: this._config[botname].localeId,\n              sessionId: credentials.identityId\n            };\n            if (!(typeof message === 'string')) return [3\n            /*break*/\n            , 6];\n            return [4\n            /*yield*/\n            , this._handleRecognizeTextCommand(botname, message, reqBaseParams)];\n\n          case 5:\n            response = _a.sent();\n            return [3\n            /*break*/\n            , 8];\n\n          case 6:\n            return [4\n            /*yield*/\n            , this._handleRecognizeUtteranceCommand(botname, message, reqBaseParams)];\n\n          case 7:\n            response = _a.sent();\n            _a.label = 8;\n\n          case 8:\n            return [2\n            /*return*/\n            , response];\n        }\n      });\n    });\n  };\n  /**\n   * Attach a onComplete callback function to a bot.\n   * The callback is called once the bot's intent is fulfilled\n   * @param {string} botname - Bot name to attach the onComplete callback\n   * @param {(err: Error | null, confirmation: InteractionsResponse) => void} callback - called when Intent Fulfilled\n   */\n\n\n  AWSLexV2Provider.prototype.onComplete = function (botname, callback) {\n    // does bot exist\n    if (!this._config[botname]) {\n      throw new Error('Bot ' + botname + ' does not exist');\n    }\n\n    this._botsCompleteCallback[botname] = callback;\n  };\n  /**\n   * @private\n   * call onComplete callback for a bot if configured\n   */\n\n\n  AWSLexV2Provider.prototype._reportBotStatus = function (data, botname) {\n    var _this = this;\n\n    var _a, _b, _c, _d, _e, _f;\n\n    var sessionState = data === null || data === void 0 ? void 0 : data.sessionState; // Check if state is fulfilled to resolve onFullfilment promise\n\n    logger.debug('postContent state', (_a = sessionState === null || sessionState === void 0 ? void 0 : sessionState.intent) === null || _a === void 0 ? void 0 : _a.state);\n    var isConfigOnCompleteAttached = typeof ((_b = this._config) === null || _b === void 0 ? void 0 : _b[botname].onComplete) === 'function';\n    var isApiOnCompleteAttached = typeof ((_c = this._botsCompleteCallback) === null || _c === void 0 ? void 0 : _c[botname]) === 'function'; // no onComplete callbacks added\n\n    if (!isConfigOnCompleteAttached && !isApiOnCompleteAttached) return;\n\n    if (((_d = sessionState === null || sessionState === void 0 ? void 0 : sessionState.intent) === null || _d === void 0 ? void 0 : _d.state) === 'ReadyForFulfillment' || ((_e = sessionState === null || sessionState === void 0 ? void 0 : sessionState.intent) === null || _e === void 0 ? void 0 : _e.state) === 'Fulfilled') {\n      if (isApiOnCompleteAttached) {\n        setTimeout(function () {\n          var _a;\n\n          return (_a = _this._botsCompleteCallback) === null || _a === void 0 ? void 0 : _a[botname](null, data);\n        }, 0);\n      }\n\n      if (isConfigOnCompleteAttached) {\n        setTimeout(function () {\n          return _this._config[botname].onComplete(null, data);\n        }, 0);\n      }\n    }\n\n    if (((_f = sessionState === null || sessionState === void 0 ? void 0 : sessionState.intent) === null || _f === void 0 ? void 0 : _f.state) === 'Failed') {\n      var error_2 = new Error('Bot conversation failed');\n\n      if (isApiOnCompleteAttached) {\n        setTimeout(function () {\n          return _this._botsCompleteCallback[botname](error_2);\n        }, 0);\n      }\n\n      if (isConfigOnCompleteAttached) {\n        setTimeout(function () {\n          return _this._config[botname].onComplete(error_2);\n        }, 0);\n      }\n    }\n  };\n  /**\n   * Format UtteranceCommandOutput's response\n   * decompress attributes\n   * update audioStream format\n   */\n\n\n  AWSLexV2Provider.prototype._formatUtteranceCommandOutput = function (data) {\n    return __awaiter(this, void 0, void 0, function () {\n      var response, _a, _b, _c;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _a = [__assign({}, data)];\n            _b = {};\n            return [4\n            /*yield*/\n            , unGzipBase64AsJson(data.messages)];\n\n          case 1:\n            _b.messages = _d.sent();\n            return [4\n            /*yield*/\n            , unGzipBase64AsJson(data.sessionState)];\n\n          case 2:\n            _b.sessionState = _d.sent();\n            return [4\n            /*yield*/\n            , unGzipBase64AsJson(data.interpretations)];\n\n          case 3:\n            _b.interpretations = _d.sent();\n            return [4\n            /*yield*/\n            , unGzipBase64AsJson(data.requestAttributes)];\n\n          case 4:\n            _b.requestAttributes = _d.sent();\n            return [4\n            /*yield*/\n            , unGzipBase64AsJson(data.inputTranscript)];\n\n          case 5:\n            _b.inputTranscript = _d.sent();\n            if (!data.audioStream) return [3\n            /*break*/\n            , 7];\n            return [4\n            /*yield*/\n            , convert(data.audioStream)];\n\n          case 6:\n            _c = _d.sent();\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            _c = undefined;\n            _d.label = 8;\n\n          case 8:\n            response = __assign.apply(void 0, _a.concat([(_b.audioStream = _c, _b)]));\n            return [2\n            /*return*/\n            , response];\n        }\n      });\n    });\n  };\n  /**\n   * handle client's `RecognizeTextCommand`\n   * used for sending simple text message\n   */\n\n\n  AWSLexV2Provider.prototype._handleRecognizeTextCommand = function (botname, data, baseParams) {\n    return __awaiter(this, void 0, void 0, function () {\n      var params, recognizeTextCommand, data_1, err_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('postText to lex2', data);\n            params = __assign(__assign({}, baseParams), {\n              text: data\n            });\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            recognizeTextCommand = new RecognizeTextCommand(params);\n            return [4\n            /*yield*/\n            , this._lexRuntimeServiceV2Client.send(recognizeTextCommand)];\n\n          case 2:\n            data_1 = _a.sent();\n\n            this._reportBotStatus(data_1, botname);\n\n            return [2\n            /*return*/\n            , data_1];\n\n          case 3:\n            err_1 = _a.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_1)];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * handle client's `RecognizeUtteranceCommand`\n   * used for obj text or obj voice message\n   */\n\n\n  AWSLexV2Provider.prototype._handleRecognizeUtteranceCommand = function (botname, data, baseParams) {\n    return __awaiter(this, void 0, void 0, function () {\n      var content, messageType, params, inputStream, _a, recognizeUtteranceCommand, data_2, response, err_2;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            content = data.content, messageType = data.options.messageType;\n            logger.debug('postContent to lex2', data);\n            if (!(messageType === 'voice')) return [3\n            /*break*/\n            , 4];\n\n            if (typeof content !== 'object') {\n              return [2\n              /*return*/\n              , Promise.reject('invalid content type')];\n            }\n\n            if (!(content instanceof Uint8Array)) return [3\n            /*break*/\n            , 1];\n            _a = content;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , convert(content)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            inputStream = _a;\n            params = __assign(__assign({}, baseParams), {\n              requestContentType: 'audio/x-l16; sample-rate=16000; channel-count=1',\n              inputStream: inputStream\n            });\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            // text input\n            if (typeof content !== 'string') return [2\n            /*return*/\n            , Promise.reject('invalid content type')];\n            params = __assign(__assign({}, baseParams), {\n              requestContentType: 'text/plain; charset=utf-8',\n              inputStream: content\n            });\n            _b.label = 5;\n\n          case 5:\n            _b.trys.push([5, 8,, 9]);\n\n            recognizeUtteranceCommand = new RecognizeUtteranceCommand(params);\n            return [4\n            /*yield*/\n            , this._lexRuntimeServiceV2Client.send(recognizeUtteranceCommand)];\n\n          case 6:\n            data_2 = _b.sent();\n            return [4\n            /*yield*/\n            , this._formatUtteranceCommandOutput(data_2)];\n\n          case 7:\n            response = _b.sent();\n\n            this._reportBotStatus(response, botname);\n\n            return [2\n            /*return*/\n            , response];\n\n          case 8:\n            err_2 = _b.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_2)];\n\n          case 9:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return AWSLexV2Provider;\n}(AbstractInteractionsProvider);\n\nexport { AWSLexV2Provider };","map":{"version":3,"sources":["../../src/Providers/AWSLexV2Provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n/*\n * Copyright 2017-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport { AbstractInteractionsProvider } from './InteractionsProvider';\nimport { LexRuntimeV2Client, RecognizeTextCommand, RecognizeUtteranceCommand, } from '@aws-sdk/client-lex-runtime-v2';\nimport { ConsoleLogger as Logger, Credentials, getAmplifyUserAgent, } from '@aws-amplify/core';\nimport { convert } from './AWSLexProviderHelper/utils';\nimport { unGzipBase64AsJson } from './AWSLexProviderHelper/commonUtils';\nvar logger = new Logger('AWSLexV2Provider');\nvar AWSLexV2Provider = /** @class */ (function (_super) {\n    __extends(AWSLexV2Provider, _super);\n    /**\n     * Initialize Interactions with AWS configurations\n     * @param {InteractionsOptions} options - Configuration object for Interactions\n     */\n    function AWSLexV2Provider(options) {\n        if (options === void 0) { options = {}; }\n        var _this = _super.call(this, options) || this;\n        _this._botsCompleteCallback = {};\n        return _this;\n    }\n    /**\n     * get provider name of the plugin\n     * @returns {string} name of the provider\n     */\n    AWSLexV2Provider.prototype.getProviderName = function () {\n        return 'AWSLexV2Provider';\n    };\n    /**\n     * Configure Interactions part with aws configuration\n     * @param {AWSLexV2ProviderOptions} config - Configuration of the Interactions\n     * @return {AWSLexV2ProviderOptions} - Current configuration\n     */\n    AWSLexV2Provider.prototype.configure = function (config) {\n        if (config === void 0) { config = {}; }\n        var propertiesToTest = [\n            'name',\n            'botId',\n            'aliasId',\n            'localeId',\n            'providerName',\n            'region',\n        ];\n        Object.keys(config).forEach(function (botKey) {\n            var botConfig = config[botKey];\n            // is bot config correct\n            if (!propertiesToTest.every(function (x) { return x in botConfig; })) {\n                throw new Error('invalid bot configuration');\n            }\n        });\n        return _super.prototype.configure.call(this, config);\n    };\n    /**\n     * Send a message to a bot\n     * @async\n     * @param {string} botname - Bot name to send the message\n     * @param {string | InteractionsMessage} message - message to send to the bot\n     * @return {Promise<InteractionsResponse>} A promise resolves to the response from the bot\n     */\n    AWSLexV2Provider.prototype.sendMessage = function (botname, message) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentials, error_1, response, reqBaseParams;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        // check if bot exists\n                        if (!this._config[botname]) {\n                            return [2 /*return*/, Promise.reject('Bot ' + botname + ' does not exist')];\n                        }\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, Credentials.get()];\n                    case 2:\n                        credentials = _a.sent();\n                        return [3 /*break*/, 4];\n                    case 3:\n                        error_1 = _a.sent();\n                        return [2 /*return*/, Promise.reject('No credentials')];\n                    case 4:\n                        this._lexRuntimeServiceV2Client = new LexRuntimeV2Client({\n                            region: this._config[botname].region,\n                            credentials: credentials,\n                            customUserAgent: getAmplifyUserAgent(),\n                        });\n                        reqBaseParams = {\n                            botAliasId: this._config[botname].aliasId,\n                            botId: this._config[botname].botId,\n                            localeId: this._config[botname].localeId,\n                            sessionId: credentials.identityId,\n                        };\n                        if (!(typeof message === 'string')) return [3 /*break*/, 6];\n                        return [4 /*yield*/, this._handleRecognizeTextCommand(botname, message, reqBaseParams)];\n                    case 5:\n                        response = _a.sent();\n                        return [3 /*break*/, 8];\n                    case 6: return [4 /*yield*/, this._handleRecognizeUtteranceCommand(botname, message, reqBaseParams)];\n                    case 7:\n                        response = _a.sent();\n                        _a.label = 8;\n                    case 8: return [2 /*return*/, response];\n                }\n            });\n        });\n    };\n    /**\n     * Attach a onComplete callback function to a bot.\n     * The callback is called once the bot's intent is fulfilled\n     * @param {string} botname - Bot name to attach the onComplete callback\n     * @param {(err: Error | null, confirmation: InteractionsResponse) => void} callback - called when Intent Fulfilled\n     */\n    AWSLexV2Provider.prototype.onComplete = function (botname, callback) {\n        // does bot exist\n        if (!this._config[botname]) {\n            throw new Error('Bot ' + botname + ' does not exist');\n        }\n        this._botsCompleteCallback[botname] = callback;\n    };\n    /**\n     * @private\n     * call onComplete callback for a bot if configured\n     */\n    AWSLexV2Provider.prototype._reportBotStatus = function (data, botname) {\n        var _this = this;\n        var _a, _b, _c, _d, _e, _f;\n        var sessionState = data === null || data === void 0 ? void 0 : data.sessionState;\n        // Check if state is fulfilled to resolve onFullfilment promise\n        logger.debug('postContent state', (_a = sessionState === null || sessionState === void 0 ? void 0 : sessionState.intent) === null || _a === void 0 ? void 0 : _a.state);\n        var isConfigOnCompleteAttached = typeof ((_b = this._config) === null || _b === void 0 ? void 0 : _b[botname].onComplete) === 'function';\n        var isApiOnCompleteAttached = typeof ((_c = this._botsCompleteCallback) === null || _c === void 0 ? void 0 : _c[botname]) === 'function';\n        // no onComplete callbacks added\n        if (!isConfigOnCompleteAttached && !isApiOnCompleteAttached)\n            return;\n        if (((_d = sessionState === null || sessionState === void 0 ? void 0 : sessionState.intent) === null || _d === void 0 ? void 0 : _d.state) === 'ReadyForFulfillment' ||\n            ((_e = sessionState === null || sessionState === void 0 ? void 0 : sessionState.intent) === null || _e === void 0 ? void 0 : _e.state) === 'Fulfilled') {\n            if (isApiOnCompleteAttached) {\n                setTimeout(function () { var _a; return (_a = _this._botsCompleteCallback) === null || _a === void 0 ? void 0 : _a[botname](null, data); }, 0);\n            }\n            if (isConfigOnCompleteAttached) {\n                setTimeout(function () { return _this._config[botname].onComplete(null, data); }, 0);\n            }\n        }\n        if (((_f = sessionState === null || sessionState === void 0 ? void 0 : sessionState.intent) === null || _f === void 0 ? void 0 : _f.state) === 'Failed') {\n            var error_2 = new Error('Bot conversation failed');\n            if (isApiOnCompleteAttached) {\n                setTimeout(function () { return _this._botsCompleteCallback[botname](error_2); }, 0);\n            }\n            if (isConfigOnCompleteAttached) {\n                setTimeout(function () { return _this._config[botname].onComplete(error_2); }, 0);\n            }\n        }\n    };\n    /**\n     * Format UtteranceCommandOutput's response\n     * decompress attributes\n     * update audioStream format\n     */\n    AWSLexV2Provider.prototype._formatUtteranceCommandOutput = function (data) {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, _a, _b, _c;\n            return __generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0:\n                        _a = [__assign({}, data)];\n                        _b = {};\n                        return [4 /*yield*/, unGzipBase64AsJson(data.messages)];\n                    case 1:\n                        _b.messages = _d.sent();\n                        return [4 /*yield*/, unGzipBase64AsJson(data.sessionState)];\n                    case 2:\n                        _b.sessionState = _d.sent();\n                        return [4 /*yield*/, unGzipBase64AsJson(data.interpretations)];\n                    case 3:\n                        _b.interpretations = _d.sent();\n                        return [4 /*yield*/, unGzipBase64AsJson(data.requestAttributes)];\n                    case 4:\n                        _b.requestAttributes = _d.sent();\n                        return [4 /*yield*/, unGzipBase64AsJson(data.inputTranscript)];\n                    case 5:\n                        _b.inputTranscript = _d.sent();\n                        if (!data.audioStream) return [3 /*break*/, 7];\n                        return [4 /*yield*/, convert(data.audioStream)];\n                    case 6:\n                        _c = _d.sent();\n                        return [3 /*break*/, 8];\n                    case 7:\n                        _c = undefined;\n                        _d.label = 8;\n                    case 8:\n                        response = __assign.apply(void 0, _a.concat([(_b.audioStream = _c, _b)]));\n                        return [2 /*return*/, response];\n                }\n            });\n        });\n    };\n    /**\n     * handle client's `RecognizeTextCommand`\n     * used for sending simple text message\n     */\n    AWSLexV2Provider.prototype._handleRecognizeTextCommand = function (botname, data, baseParams) {\n        return __awaiter(this, void 0, void 0, function () {\n            var params, recognizeTextCommand, data_1, err_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        logger.debug('postText to lex2', data);\n                        params = __assign(__assign({}, baseParams), { text: data });\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        recognizeTextCommand = new RecognizeTextCommand(params);\n                        return [4 /*yield*/, this._lexRuntimeServiceV2Client.send(recognizeTextCommand)];\n                    case 2:\n                        data_1 = _a.sent();\n                        this._reportBotStatus(data_1, botname);\n                        return [2 /*return*/, data_1];\n                    case 3:\n                        err_1 = _a.sent();\n                        return [2 /*return*/, Promise.reject(err_1)];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * handle client's `RecognizeUtteranceCommand`\n     * used for obj text or obj voice message\n     */\n    AWSLexV2Provider.prototype._handleRecognizeUtteranceCommand = function (botname, data, baseParams) {\n        return __awaiter(this, void 0, void 0, function () {\n            var content, messageType, params, inputStream, _a, recognizeUtteranceCommand, data_2, response, err_2;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        content = data.content, messageType = data.options.messageType;\n                        logger.debug('postContent to lex2', data);\n                        if (!(messageType === 'voice')) return [3 /*break*/, 4];\n                        if (typeof content !== 'object') {\n                            return [2 /*return*/, Promise.reject('invalid content type')];\n                        }\n                        if (!(content instanceof Uint8Array)) return [3 /*break*/, 1];\n                        _a = content;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, convert(content)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        inputStream = _a;\n                        params = __assign(__assign({}, baseParams), { requestContentType: 'audio/x-l16; sample-rate=16000; channel-count=1', inputStream: inputStream });\n                        return [3 /*break*/, 5];\n                    case 4:\n                        // text input\n                        if (typeof content !== 'string')\n                            return [2 /*return*/, Promise.reject('invalid content type')];\n                        params = __assign(__assign({}, baseParams), { requestContentType: 'text/plain; charset=utf-8', inputStream: content });\n                        _b.label = 5;\n                    case 5:\n                        _b.trys.push([5, 8, , 9]);\n                        recognizeUtteranceCommand = new RecognizeUtteranceCommand(params);\n                        return [4 /*yield*/, this._lexRuntimeServiceV2Client.send(recognizeUtteranceCommand)];\n                    case 6:\n                        data_2 = _b.sent();\n                        return [4 /*yield*/, this._formatUtteranceCommandOutput(data_2)];\n                    case 7:\n                        response = _b.sent();\n                        this._reportBotStatus(response, botname);\n                        return [2 /*return*/, response];\n                    case 8:\n                        err_2 = _b.sent();\n                        return [2 /*return*/, Promise.reject(err_2)];\n                    case 9: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return AWSLexV2Provider;\n}(AbstractInteractionsProvider));\nexport { AWSLexV2Provider };\n//# sourceMappingURL=AWSLexV2Provider.js.map"]},"metadata":{},"sourceType":"module"}