{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n/*\n * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\n\nimport { AbstractInteractionsProvider } from './InteractionsProvider';\nimport { LexRuntimeServiceClient, PostTextCommand, PostContentCommand } from '@aws-sdk/client-lex-runtime-service';\nimport { ConsoleLogger as Logger, Credentials, getAmplifyUserAgent } from '@aws-amplify/core';\nimport { convert } from './AWSLexProviderHelper/utils';\nvar logger = new Logger('AWSLexProvider');\n\nvar AWSLexProvider =\n/** @class */\nfunction (_super) {\n  __extends(AWSLexProvider, _super);\n\n  function AWSLexProvider(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _this = _super.call(this, options) || this;\n\n    _this._botsCompleteCallback = {};\n    return _this;\n  }\n\n  AWSLexProvider.prototype.getProviderName = function () {\n    return 'AWSLexProvider';\n  };\n\n  AWSLexProvider.prototype.configure = function (config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    var propertiesToTest = ['name', 'alias', 'region'];\n    Object.keys(config).forEach(function (botKey) {\n      var botConfig = config[botKey]; // is bot config correct\n\n      if (!propertiesToTest.every(function (x) {\n        return x in botConfig;\n      })) {\n        throw new Error('invalid bot configuration');\n      }\n    });\n    return _super.prototype.configure.call(this, config);\n  };\n  /**\n   * @private\n   * @deprecated\n   * This is used internally by 'sendMessage' to call onComplete callback\n   * for a bot if configured\n   */\n\n\n  AWSLexProvider.prototype.reportBotStatus = function (data, botname) {\n    var _this = this; // Check if state is fulfilled to resolve onFullfilment promise\n\n\n    logger.debug('postContent state', data.dialogState);\n\n    if (data.dialogState === 'ReadyForFulfillment' || data.dialogState === 'Fulfilled') {\n      if (typeof this._botsCompleteCallback[botname] === 'function') {\n        setTimeout(function () {\n          return _this._botsCompleteCallback[botname](null, data);\n        }, 0);\n      }\n\n      if (this._config && typeof this._config[botname].onComplete === 'function') {\n        setTimeout(function () {\n          return _this._config[botname].onComplete(null, data);\n        }, 0);\n      }\n    }\n\n    if (data.dialogState === 'Failed') {\n      if (typeof this._botsCompleteCallback[botname] === 'function') {\n        setTimeout(function () {\n          return _this._botsCompleteCallback[botname]('Bot conversation failed');\n        }, 0);\n      }\n\n      if (this._config && typeof this._config[botname].onComplete === 'function') {\n        setTimeout(function () {\n          return _this._config[botname].onComplete('Bot conversation failed');\n        }, 0);\n      }\n    }\n  };\n\n  AWSLexProvider.prototype.sendMessage = function (botname, message) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, error_1, params, postTextCommand, data, err_1, content, messageType, inputStream, _a, postContentCommand, data, audioArray, _b, response, err_2;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            // check if bot exists\n            if (!this._config[botname]) {\n              return [2\n              /*return*/\n              , Promise.reject('Bot ' + botname + ' does not exist')];\n            }\n\n            _c.label = 1;\n\n          case 1:\n            _c.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , Credentials.get()];\n\n          case 2:\n            credentials = _c.sent();\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            error_1 = _c.sent();\n            return [2\n            /*return*/\n            , Promise.reject('No credentials')];\n\n          case 4:\n            this.lexRuntimeServiceClient = new LexRuntimeServiceClient({\n              region: this._config[botname].region,\n              credentials: credentials,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            if (!(typeof message === 'string')) return [3\n            /*break*/\n            , 9];\n            params = {\n              botAlias: this._config[botname].alias,\n              botName: botname,\n              inputText: message,\n              userId: credentials.identityId\n            };\n            logger.debug('postText to lex', message);\n            _c.label = 5;\n\n          case 5:\n            _c.trys.push([5, 7,, 8]);\n\n            postTextCommand = new PostTextCommand(params);\n            return [4\n            /*yield*/\n            , this.lexRuntimeServiceClient.send(postTextCommand)];\n\n          case 6:\n            data = _c.sent();\n            this.reportBotStatus(data, botname);\n            return [2\n            /*return*/\n            , data];\n\n          case 7:\n            err_1 = _c.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_1)];\n\n          case 8:\n            return [3\n            /*break*/\n            , 21];\n\n          case 9:\n            content = message.content, messageType = message.options.messageType;\n            if (!(messageType === 'voice')) return [3\n            /*break*/\n            , 13];\n\n            if (typeof content !== 'object') {\n              return [2\n              /*return*/\n              , Promise.reject('invalid content type')];\n            }\n\n            if (!(content instanceof Uint8Array)) return [3\n            /*break*/\n            , 10];\n            _a = content;\n            return [3\n            /*break*/\n            , 12];\n\n          case 10:\n            return [4\n            /*yield*/\n            , convert(content)];\n\n          case 11:\n            _a = _c.sent();\n            _c.label = 12;\n\n          case 12:\n            inputStream = _a;\n            params = {\n              botAlias: this._config[botname].alias,\n              botName: botname,\n              contentType: 'audio/x-l16; sample-rate=16000; channel-count=1',\n              userId: credentials.identityId,\n              accept: 'audio/mpeg',\n              inputStream: inputStream\n            };\n            return [3\n            /*break*/\n            , 14];\n\n          case 13:\n            if (typeof content !== 'string') return [2\n            /*return*/\n            , Promise.reject('invalid content type')];\n            params = {\n              botAlias: this._config[botname].alias,\n              botName: botname,\n              contentType: 'text/plain; charset=utf-8',\n              inputStream: content,\n              userId: credentials.identityId,\n              accept: 'audio/mpeg'\n            };\n            _c.label = 14;\n\n          case 14:\n            logger.debug('postContent to lex', message);\n            _c.label = 15;\n\n          case 15:\n            _c.trys.push([15, 20,, 21]);\n\n            postContentCommand = new PostContentCommand(params);\n            return [4\n            /*yield*/\n            , this.lexRuntimeServiceClient.send(postContentCommand)];\n\n          case 16:\n            data = _c.sent();\n            if (!data.audioStream) return [3\n            /*break*/\n            , 18];\n            return [4\n            /*yield*/\n            , convert(data.audioStream)];\n\n          case 17:\n            _b = _c.sent();\n            return [3\n            /*break*/\n            , 19];\n\n          case 18:\n            _b = undefined;\n            _c.label = 19;\n\n          case 19:\n            audioArray = _b;\n            response = __assign(__assign({}, data), {\n              audioStream: audioArray\n            });\n            this.reportBotStatus(response, botname);\n            return [2\n            /*return*/\n            , response];\n\n          case 20:\n            err_2 = _c.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_2)];\n\n          case 21:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSLexProvider.prototype.onComplete = function (botname, callback) {\n    // does bot exist\n    if (!this._config[botname]) {\n      throw new Error('Bot ' + botname + ' does not exist');\n    }\n\n    this._botsCompleteCallback[botname] = callback;\n  };\n\n  return AWSLexProvider;\n}(AbstractInteractionsProvider);\n\nexport { AWSLexProvider };","map":{"version":3,"sources":["../../src/Providers/AWSLexProvider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n/*\n * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport { AbstractInteractionsProvider } from './InteractionsProvider';\nimport { LexRuntimeServiceClient, PostTextCommand, PostContentCommand, } from '@aws-sdk/client-lex-runtime-service';\nimport { ConsoleLogger as Logger, Credentials, getAmplifyUserAgent, } from '@aws-amplify/core';\nimport { convert } from './AWSLexProviderHelper/utils';\nvar logger = new Logger('AWSLexProvider');\nvar AWSLexProvider = /** @class */ (function (_super) {\n    __extends(AWSLexProvider, _super);\n    function AWSLexProvider(options) {\n        if (options === void 0) { options = {}; }\n        var _this = _super.call(this, options) || this;\n        _this._botsCompleteCallback = {};\n        return _this;\n    }\n    AWSLexProvider.prototype.getProviderName = function () {\n        return 'AWSLexProvider';\n    };\n    AWSLexProvider.prototype.configure = function (config) {\n        if (config === void 0) { config = {}; }\n        var propertiesToTest = ['name', 'alias', 'region'];\n        Object.keys(config).forEach(function (botKey) {\n            var botConfig = config[botKey];\n            // is bot config correct\n            if (!propertiesToTest.every(function (x) { return x in botConfig; })) {\n                throw new Error('invalid bot configuration');\n            }\n        });\n        return _super.prototype.configure.call(this, config);\n    };\n    /**\n     * @private\n     * @deprecated\n     * This is used internally by 'sendMessage' to call onComplete callback\n     * for a bot if configured\n     */\n    AWSLexProvider.prototype.reportBotStatus = function (data, botname) {\n        var _this = this;\n        // Check if state is fulfilled to resolve onFullfilment promise\n        logger.debug('postContent state', data.dialogState);\n        if (data.dialogState === 'ReadyForFulfillment' ||\n            data.dialogState === 'Fulfilled') {\n            if (typeof this._botsCompleteCallback[botname] === 'function') {\n                setTimeout(function () { return _this._botsCompleteCallback[botname](null, data); }, 0);\n            }\n            if (this._config &&\n                typeof this._config[botname].onComplete === 'function') {\n                setTimeout(function () { return _this._config[botname].onComplete(null, data); }, 0);\n            }\n        }\n        if (data.dialogState === 'Failed') {\n            if (typeof this._botsCompleteCallback[botname] === 'function') {\n                setTimeout(function () { return _this._botsCompleteCallback[botname]('Bot conversation failed'); }, 0);\n            }\n            if (this._config &&\n                typeof this._config[botname].onComplete === 'function') {\n                setTimeout(function () { return _this._config[botname].onComplete('Bot conversation failed'); }, 0);\n            }\n        }\n    };\n    AWSLexProvider.prototype.sendMessage = function (botname, message) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentials, error_1, params, postTextCommand, data, err_1, content, messageType, inputStream, _a, postContentCommand, data, audioArray, _b, response, err_2;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        // check if bot exists\n                        if (!this._config[botname]) {\n                            return [2 /*return*/, Promise.reject('Bot ' + botname + ' does not exist')];\n                        }\n                        _c.label = 1;\n                    case 1:\n                        _c.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, Credentials.get()];\n                    case 2:\n                        credentials = _c.sent();\n                        return [3 /*break*/, 4];\n                    case 3:\n                        error_1 = _c.sent();\n                        return [2 /*return*/, Promise.reject('No credentials')];\n                    case 4:\n                        this.lexRuntimeServiceClient = new LexRuntimeServiceClient({\n                            region: this._config[botname].region,\n                            credentials: credentials,\n                            customUserAgent: getAmplifyUserAgent(),\n                        });\n                        if (!(typeof message === 'string')) return [3 /*break*/, 9];\n                        params = {\n                            botAlias: this._config[botname].alias,\n                            botName: botname,\n                            inputText: message,\n                            userId: credentials.identityId,\n                        };\n                        logger.debug('postText to lex', message);\n                        _c.label = 5;\n                    case 5:\n                        _c.trys.push([5, 7, , 8]);\n                        postTextCommand = new PostTextCommand(params);\n                        return [4 /*yield*/, this.lexRuntimeServiceClient.send(postTextCommand)];\n                    case 6:\n                        data = _c.sent();\n                        this.reportBotStatus(data, botname);\n                        return [2 /*return*/, data];\n                    case 7:\n                        err_1 = _c.sent();\n                        return [2 /*return*/, Promise.reject(err_1)];\n                    case 8: return [3 /*break*/, 21];\n                    case 9:\n                        content = message.content, messageType = message.options.messageType;\n                        if (!(messageType === 'voice')) return [3 /*break*/, 13];\n                        if (typeof content !== 'object') {\n                            return [2 /*return*/, Promise.reject('invalid content type')];\n                        }\n                        if (!(content instanceof Uint8Array)) return [3 /*break*/, 10];\n                        _a = content;\n                        return [3 /*break*/, 12];\n                    case 10: return [4 /*yield*/, convert(content)];\n                    case 11:\n                        _a = _c.sent();\n                        _c.label = 12;\n                    case 12:\n                        inputStream = _a;\n                        params = {\n                            botAlias: this._config[botname].alias,\n                            botName: botname,\n                            contentType: 'audio/x-l16; sample-rate=16000; channel-count=1',\n                            userId: credentials.identityId,\n                            accept: 'audio/mpeg',\n                            inputStream: inputStream,\n                        };\n                        return [3 /*break*/, 14];\n                    case 13:\n                        if (typeof content !== 'string')\n                            return [2 /*return*/, Promise.reject('invalid content type')];\n                        params = {\n                            botAlias: this._config[botname].alias,\n                            botName: botname,\n                            contentType: 'text/plain; charset=utf-8',\n                            inputStream: content,\n                            userId: credentials.identityId,\n                            accept: 'audio/mpeg',\n                        };\n                        _c.label = 14;\n                    case 14:\n                        logger.debug('postContent to lex', message);\n                        _c.label = 15;\n                    case 15:\n                        _c.trys.push([15, 20, , 21]);\n                        postContentCommand = new PostContentCommand(params);\n                        return [4 /*yield*/, this.lexRuntimeServiceClient.send(postContentCommand)];\n                    case 16:\n                        data = _c.sent();\n                        if (!data.audioStream) return [3 /*break*/, 18];\n                        return [4 /*yield*/, convert(data.audioStream)];\n                    case 17:\n                        _b = _c.sent();\n                        return [3 /*break*/, 19];\n                    case 18:\n                        _b = undefined;\n                        _c.label = 19;\n                    case 19:\n                        audioArray = _b;\n                        response = __assign(__assign({}, data), { audioStream: audioArray });\n                        this.reportBotStatus(response, botname);\n                        return [2 /*return*/, response];\n                    case 20:\n                        err_2 = _c.sent();\n                        return [2 /*return*/, Promise.reject(err_2)];\n                    case 21: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSLexProvider.prototype.onComplete = function (botname, callback) {\n        // does bot exist\n        if (!this._config[botname]) {\n            throw new Error('Bot ' + botname + ' does not exist');\n        }\n        this._botsCompleteCallback[botname] = callback;\n    };\n    return AWSLexProvider;\n}(AbstractInteractionsProvider));\nexport { AWSLexProvider };\n//# sourceMappingURL=AWSLexProvider.js.map"]},"metadata":{},"sourceType":"module"}