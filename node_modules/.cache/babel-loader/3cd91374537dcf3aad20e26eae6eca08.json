{"ast":null,"code":"import { createAsyncThunk, createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\nimport { DataStore } from \"aws-amplify\";\nimport { AudienceFaceExpression, Meeting, PublicMeetingInfo, Rating, SpeakerVoiceEmotion } from \"../models\";\nimport { deleteAudienceFaceExpressions, fetchAudienceFaceExpressions } from \"./audienceFaceExpressionSlice\";\nimport { deleteRatings } from \"./ratingsSlice\";\nimport { deleteSpeakerVoiceEmotions, fetchSpeakerVoiceEmotions } from \"./speakerVoiceEmotionSlice\";\nexport const fetchAllMeetings = createAsyncThunk(\"meetings/fetchAll\", async () => {\n  return await DataStore.query(Meeting);\n});\nexport const fetchMeeting = createAsyncThunk(\"meetings/fetchOne\", async (id, {\n  dispatch\n}) => {\n  const meeting = await DataStore.query(Meeting, id);\n\n  if (meeting) {\n    // Fetch corresponding AudienceFaceExpressions\n    const audienceFaceExpressions = await DataStore.query(AudienceFaceExpression, predicate => predicate.meetingID(\"eq\", meeting.id));\n    dispatch(fetchAudienceFaceExpressions(audienceFaceExpressions)); // Fetch corresponding SpeakerVoiceEmotions\n\n    const speakerVoiceEmotions = await DataStore.query(SpeakerVoiceEmotion, predicate => predicate.meetingID(\"eq\", meeting.id));\n    dispatch(fetchSpeakerVoiceEmotions(speakerVoiceEmotions));\n    return meeting;\n  }\n});\nexport const addMeeting = createAsyncThunk(\"meetings/create\", async name => {\n  return await DataStore.save(new Meeting({\n    name\n  }));\n});\nexport const removeMeeting = createAsyncThunk(\"meetings/delete\", async (id, {\n  dispatch\n}) => {\n  const meetingToDelete = await DataStore.query(Meeting, id);\n\n  if (meetingToDelete) {\n    var _meetingToDelete$Publ;\n\n    // Delete AudienceFaceExpressions\n    dispatch(deleteAudienceFaceExpressions((await DataStore.delete(AudienceFaceExpression, predicate => predicate.meetingID(\"eq\", meetingToDelete.id))).map(predicate => predicate.id))); // Delete SpeakerVoiceEmotions\n\n    dispatch(deleteSpeakerVoiceEmotions((await DataStore.delete(SpeakerVoiceEmotion, predicate => predicate.meetingID(\"eq\", meetingToDelete.id))).map(predicate => predicate.id))); // Delete Ratings if there are any\n\n    if ((_meetingToDelete$Publ = meetingToDelete.PublicMeetingInfo) === null || _meetingToDelete$Publ === void 0 ? void 0 : _meetingToDelete$Publ.id) {\n      dispatch(deleteRatings((await DataStore.delete(Rating, r => r.publicmeetinginfoID(\"eq\", meetingToDelete.PublicMeetingInfo.id))).map(a => a.id)));\n    }\n\n    if (!!meetingToDelete.PublicMeetingInfo) {\n      await DataStore.delete(meetingToDelete.PublicMeetingInfo);\n    }\n\n    return await DataStore.delete(meetingToDelete);\n  }\n});\nexport const startMeeting = createAsyncThunk(\"meetings/start\", async (_, {\n  getState\n}) => {\n  const state = getState();\n  const activeMeetingId = state.meetings.activeMeeting;\n\n  if (activeMeetingId) {\n    const activeMeeting = await DataStore.query(Meeting, activeMeetingId);\n\n    if (!activeMeeting.startedAt) {\n      return await DataStore.save(Meeting.copyOf(activeMeeting, meeting => {\n        meeting.startedAt = new Date().toISOString();\n      }));\n    }\n  }\n});\nexport const stopMeeting = createAsyncThunk(\"meetings/stop\", async (_, {\n  getState\n}) => {\n  const state = getState();\n  const activeMeetingId = state.meetings.activeMeeting;\n\n  if (activeMeetingId) {\n    const activeMeeting = await DataStore.query(Meeting, activeMeetingId);\n\n    if (!activeMeeting.stoppedAt) {\n      return await DataStore.save(Meeting.copyOf(activeMeeting, meeting => {\n        meeting.stoppedAt = new Date().toISOString();\n      }));\n    }\n  }\n});\nexport const createFeedbackLink = createAsyncThunk(\"meetings/createFeedbackLink\", async (_, {\n  getState\n}) => {\n  const state = getState();\n  const activeMeetingId = state.meetings.activeMeeting;\n\n  if (activeMeetingId) {\n    const activeMeeting = await DataStore.query(Meeting, activeMeetingId);\n\n    if (!activeMeeting.startedAt || !activeMeeting.stoppedAt) {\n      throw new Error(\"You can only create feedback links once the meeting has finished.\");\n    } // Create a PublicMeetingInfo model which will serve as read-only model for guest users in order to give feedback\n\n\n    return await DataStore.save(Meeting.copyOf(activeMeeting, meeting => {\n      meeting.PublicMeetingInfo = new PublicMeetingInfo({\n        name: activeMeeting.name,\n        startedAt: activeMeeting.startedAt,\n        stoppedAt: activeMeeting.stoppedAt\n      });\n    }));\n  }\n});\nexport const meetingsAdapter = createEntityAdapter({\n  sortComparer: (a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n});\nconst initialState = meetingsAdapter.getInitialState({\n  loading: false,\n  activeMeeting: null\n});\nexport const meetingsSlice = createSlice({\n  name: \"meetings\",\n  initialState,\n  reducers: {\n    setActiveMeeting(state, action) {\n      state.activeMeeting = action.payload;\n    }\n\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchAllMeetings.pending, state => {\n      state.loading = true;\n    }).addCase(fetchAllMeetings.fulfilled, (state, {\n      payload\n    }) => {\n      meetingsAdapter.upsertMany(state, payload);\n      state.loading = false;\n    }).addCase(fetchAllMeetings.rejected, state => {\n      state.loading = false;\n    }).addCase(addMeeting.pending, state => {\n      state.loading = true;\n    }).addCase(addMeeting.fulfilled, (state, {\n      payload\n    }) => {\n      meetingsAdapter.addOne(state, payload);\n      state.loading = false;\n    }).addCase(addMeeting.rejected, state => {\n      state.loading = false;\n    }).addCase(removeMeeting.pending, state => {\n      state.loading = true;\n    }).addCase(removeMeeting.fulfilled, (state, {\n      payload\n    }) => {\n      if (payload === null || payload === void 0 ? void 0 : payload.id) {\n        meetingsAdapter.removeOne(state, payload.id);\n      }\n\n      state.loading = false;\n    }).addCase(removeMeeting.rejected, state => {\n      state.loading = false;\n    }).addCase(fetchMeeting.pending, state => {\n      state.loading = true;\n    }).addCase(fetchMeeting.rejected, state => {\n      state.loading = false;\n    }).addCase(fetchMeeting.fulfilled, (state, {\n      payload\n    }) => {\n      if (payload) {\n        meetingsAdapter.upsertOne(state, payload);\n      }\n\n      state.loading = false;\n    }).addCase(startMeeting.fulfilled, (state, {\n      payload\n    }) => {\n      if (payload) {\n        meetingsAdapter.updateOne(state, {\n          id: payload.id,\n          changes: {\n            startedAt: payload.startedAt\n          }\n        });\n      }\n    }).addCase(stopMeeting.fulfilled, (state, {\n      payload\n    }) => {\n      if (payload) {\n        meetingsAdapter.updateOne(state, {\n          id: payload.id,\n          changes: {\n            stoppedAt: payload.stoppedAt\n          }\n        });\n      }\n    }).addCase(createFeedbackLink.fulfilled, (state, {\n      payload\n    }) => {\n      if (payload) {\n        meetingsAdapter.updateOne(state, {\n          id: payload.id,\n          changes: {\n            PublicMeetingInfo: payload.PublicMeetingInfo\n          }\n        });\n      }\n    });\n  }\n});\nexport const {\n  setActiveMeeting\n} = meetingsSlice.actions;\nexport default meetingsSlice.reducer;","map":{"version":3,"sources":["/Users/sanjayar/Desktop/moody-main copy 2/src/meetings/meetingsSlice.ts"],"names":["createAsyncThunk","createEntityAdapter","createSlice","DataStore","AudienceFaceExpression","Meeting","PublicMeetingInfo","Rating","SpeakerVoiceEmotion","deleteAudienceFaceExpressions","fetchAudienceFaceExpressions","deleteRatings","deleteSpeakerVoiceEmotions","fetchSpeakerVoiceEmotions","fetchAllMeetings","query","fetchMeeting","id","dispatch","meeting","audienceFaceExpressions","predicate","meetingID","speakerVoiceEmotions","addMeeting","name","save","removeMeeting","meetingToDelete","delete","map","r","publicmeetinginfoID","a","startMeeting","_","getState","state","activeMeetingId","meetings","activeMeeting","startedAt","copyOf","Date","toISOString","stopMeeting","stoppedAt","createFeedbackLink","Error","meetingsAdapter","sortComparer","b","createdAt","getTime","initialState","getInitialState","loading","meetingsSlice","reducers","setActiveMeeting","action","payload","extraReducers","builder","addCase","pending","fulfilled","upsertMany","rejected","addOne","removeOne","upsertOne","updateOne","changes","actions","reducer"],"mappings":"AAAA,SACEA,gBADF,EAEEC,mBAFF,EAGEC,WAHF,QAKO,kBALP;AAMA,SAASC,SAAT,QAA0B,aAA1B;AAEA,SACEC,sBADF,EAEEC,OAFF,EAGEC,iBAHF,EAIEC,MAJF,EAKEC,mBALF,QAMO,WANP;AAOA,SACEC,6BADF,EAEEC,4BAFF,QAGO,+BAHP;AAIA,SAASC,aAAT,QAA8B,gBAA9B;AACA,SACEC,0BADF,EAEEC,yBAFF,QAGO,4BAHP;AAKA,OAAO,MAAMC,gBAAgB,GAAGd,gBAAgB,CAC9C,mBAD8C,EAE9C,YAAY;AACV,SAAQ,MAAMG,SAAS,CAACY,KAAV,CAAgBV,OAAhB,CAAd;AACD,CAJ6C,CAAzC;AAOP,OAAO,MAAMW,YAAY,GAAGhB,gBAAgB,CAC1C,mBAD0C,EAE1C,OAAOiB,EAAP,EAAmB;AAAEC,EAAAA;AAAF,CAAnB,KAAoC;AAClC,QAAMC,OAAO,GAAG,MAAMhB,SAAS,CAACY,KAAV,CAAgBV,OAAhB,EAAyBY,EAAzB,CAAtB;;AAEA,MAAIE,OAAJ,EAAa;AACX;AACA,UAAMC,uBAAuB,GAAG,MAAMjB,SAAS,CAACY,KAAV,CACpCX,sBADoC,EAEnCiB,SAAD,IAAeA,SAAS,CAACC,SAAV,CAAoB,IAApB,EAA0BH,OAAO,CAACF,EAAlC,CAFqB,CAAtC;AAIAC,IAAAA,QAAQ,CAACR,4BAA4B,CAACU,uBAAD,CAA7B,CAAR,CANW,CAQX;;AACA,UAAMG,oBAAoB,GAAG,MAAMpB,SAAS,CAACY,KAAV,CACjCP,mBADiC,EAEhCa,SAAD,IAAeA,SAAS,CAACC,SAAV,CAAoB,IAApB,EAA0BH,OAAO,CAACF,EAAlC,CAFkB,CAAnC;AAIAC,IAAAA,QAAQ,CAACL,yBAAyB,CAACU,oBAAD,CAA1B,CAAR;AAEA,WAAOJ,OAAP;AACD;AACF,CAtByC,CAArC;AAyBP,OAAO,MAAMK,UAAU,GAAGxB,gBAAgB,CACxC,iBADwC,EAExC,MAAOyB,IAAP,IAAwB;AACtB,SAAQ,MAAMtB,SAAS,CAACuB,IAAV,CAAe,IAAIrB,OAAJ,CAAY;AAAEoB,IAAAA;AAAF,GAAZ,CAAf,CAAd;AACD,CAJuC,CAAnC;AAOP,OAAO,MAAME,aAAa,GAAG3B,gBAAgB,CAC3C,iBAD2C,EAE3C,OAAOiB,EAAP,EAAmB;AAAEC,EAAAA;AAAF,CAAnB,KAAoC;AAClC,QAAMU,eAAoC,GAAG,MAAMzB,SAAS,CAACY,KAAV,CACjDV,OADiD,EAEjDY,EAFiD,CAAnD;;AAKA,MAAIW,eAAJ,EAAqB;AAAA;;AACnB;AACAV,IAAAA,QAAQ,CACNT,6BAA6B,CAC3B,CACE,MAAMN,SAAS,CAAC0B,MAAV,CAAiBzB,sBAAjB,EAA0CiB,SAAD,IAC7CA,SAAS,CAACC,SAAV,CAAoB,IAApB,EAA0BM,eAAe,CAACX,EAA1C,CADI,CADR,EAIEa,GAJF,CAIOT,SAAD,IAAeA,SAAS,CAACJ,EAJ/B,CAD2B,CADvB,CAAR,CAFmB,CAYnB;;AACAC,IAAAA,QAAQ,CACNN,0BAA0B,CACxB,CACE,MAAMT,SAAS,CAAC0B,MAAV,CAAiBrB,mBAAjB,EAAuCa,SAAD,IAC1CA,SAAS,CAACC,SAAV,CAAoB,IAApB,EAA0BM,eAAe,CAACX,EAA1C,CADI,CADR,EAIEa,GAJF,CAIOT,SAAD,IAAeA,SAAS,CAACJ,EAJ/B,CADwB,CADpB,CAAR,CAbmB,CAuBnB;;AACA,iCAAIW,eAAe,CAACtB,iBAApB,0DAAI,sBAAmCW,EAAvC,EAA2C;AACzCC,MAAAA,QAAQ,CACNP,aAAa,CACX,CACE,MAAMR,SAAS,CAAC0B,MAAV,CAAiBtB,MAAjB,EAA0BwB,CAAD,IAC7BA,CAAC,CAACC,mBAAF,CACE,IADF,EAEEJ,eAAe,CAACtB,iBAAhB,CAAmCW,EAFrC,CADI,CADR,EAOEa,GAPF,CAOOG,CAAD,IAAOA,CAAC,CAAChB,EAPf,CADW,CADP,CAAR;AAYD;;AAED,QAAI,CAAC,CAACW,eAAe,CAACtB,iBAAtB,EAAyC;AACvC,YAAMH,SAAS,CAAC0B,MAAV,CAAiBD,eAAe,CAACtB,iBAAjC,CAAN;AACD;;AAED,WAAQ,MAAMH,SAAS,CAAC0B,MAAV,CAAiBD,eAAjB,CAAd;AACD;AACF,CArD0C,CAAtC;AAwDP,OAAO,MAAMM,YAAY,GAAGlC,gBAAgB,CAC1C,gBAD0C,EAE1C,OAAOmC,CAAP,EAAU;AAAEC,EAAAA;AAAF,CAAV,KAA2B;AACzB,QAAMC,KAAgB,GAAGD,QAAQ,EAAjC;AACA,QAAME,eAA8B,GAAGD,KAAK,CAACE,QAAN,CAAeC,aAAtD;;AAEA,MAAIF,eAAJ,EAAqB;AACnB,UAAME,aAAsB,GAAI,MAAMrC,SAAS,CAACY,KAAV,CACpCV,OADoC,EAEpCiC,eAFoC,CAAtC;;AAKA,QAAI,CAACE,aAAa,CAACC,SAAnB,EAA8B;AAC5B,aAAQ,MAAMtC,SAAS,CAACuB,IAAV,CACZrB,OAAO,CAACqC,MAAR,CAAeF,aAAf,EAA+BrB,OAAD,IAAa;AACzCA,QAAAA,OAAO,CAACsB,SAAR,GAAoB,IAAIE,IAAJ,GAAWC,WAAX,EAApB;AACD,OAFD,CADY,CAAd;AAKD;AACF;AACF,CApByC,CAArC;AAuBP,OAAO,MAAMC,WAAW,GAAG7C,gBAAgB,CACzC,eADyC,EAEzC,OAAOmC,CAAP,EAAU;AAAEC,EAAAA;AAAF,CAAV,KAA2B;AACzB,QAAMC,KAAgB,GAAGD,QAAQ,EAAjC;AACA,QAAME,eAA8B,GAAGD,KAAK,CAACE,QAAN,CAAeC,aAAtD;;AAEA,MAAIF,eAAJ,EAAqB;AACnB,UAAME,aAAsB,GAAI,MAAMrC,SAAS,CAACY,KAAV,CACpCV,OADoC,EAEpCiC,eAFoC,CAAtC;;AAKA,QAAI,CAACE,aAAa,CAACM,SAAnB,EAA8B;AAC5B,aAAQ,MAAM3C,SAAS,CAACuB,IAAV,CACZrB,OAAO,CAACqC,MAAR,CAAeF,aAAf,EAA+BrB,OAAD,IAAa;AACzCA,QAAAA,OAAO,CAAC2B,SAAR,GAAoB,IAAIH,IAAJ,GAAWC,WAAX,EAApB;AACD,OAFD,CADY,CAAd;AAKD;AACF;AACF,CApBwC,CAApC;AAuBP,OAAO,MAAMG,kBAAkB,GAAG/C,gBAAgB,CAChD,6BADgD,EAEhD,OAAOmC,CAAP,EAAU;AAAEC,EAAAA;AAAF,CAAV,KAA2B;AACzB,QAAMC,KAAgB,GAAGD,QAAQ,EAAjC;AACA,QAAME,eAA8B,GAAGD,KAAK,CAACE,QAAN,CAAeC,aAAtD;;AAEA,MAAIF,eAAJ,EAAqB;AACnB,UAAME,aAAsB,GAAI,MAAMrC,SAAS,CAACY,KAAV,CACpCV,OADoC,EAEpCiC,eAFoC,CAAtC;;AAKA,QAAI,CAACE,aAAa,CAACC,SAAf,IAA4B,CAACD,aAAa,CAACM,SAA/C,EAA0D;AACxD,YAAM,IAAIE,KAAJ,CACJ,mEADI,CAAN;AAGD,KAVkB,CAYnB;;;AACA,WAAQ,MAAM7C,SAAS,CAACuB,IAAV,CACZrB,OAAO,CAACqC,MAAR,CAAeF,aAAf,EAA+BrB,OAAD,IAAa;AACzCA,MAAAA,OAAO,CAACb,iBAAR,GAA4B,IAAIA,iBAAJ,CAAsB;AAChDmB,QAAAA,IAAI,EAAEe,aAAa,CAACf,IAD4B;AAEhDgB,QAAAA,SAAS,EAAED,aAAa,CAACC,SAFuB;AAGhDK,QAAAA,SAAS,EAAEN,aAAa,CAACM;AAHuB,OAAtB,CAA5B;AAKD,KAND,CADY,CAAd;AASD;AACF,CA7B+C,CAA3C;AAgCP,OAAO,MAAMG,eAAe,GAAGhD,mBAAmB,CAAU;AAC1DiD,EAAAA,YAAY,EAAE,CAACjB,CAAD,EAAakB,CAAb,KACZ,IAAIR,IAAJ,CAASQ,CAAC,CAACC,SAAX,EAAuBC,OAAvB,KAAmC,IAAIV,IAAJ,CAASV,CAAC,CAACmB,SAAX,EAAuBC,OAAvB;AAFqB,CAAV,CAA3C;AAIP,MAAMC,YAAY,GAAGL,eAAe,CAACM,eAAhB,CAAgC;AACnDC,EAAAA,OAAO,EAAE,KAD0C;AAEnDhB,EAAAA,aAAa,EAAE;AAFoC,CAAhC,CAArB;AAKA,OAAO,MAAMiB,aAAa,GAAGvD,WAAW,CAAC;AACvCuB,EAAAA,IAAI,EAAE,UADiC;AAEvC6B,EAAAA,YAFuC;AAGvCI,EAAAA,QAAQ,EAAE;AACRC,IAAAA,gBAAgB,CAACtB,KAAD,EAAQuB,MAAR,EAA8C;AAC5DvB,MAAAA,KAAK,CAACG,aAAN,GAAsBoB,MAAM,CAACC,OAA7B;AACD;;AAHO,GAH6B;AAQvCC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CACJC,OADH,CACWlD,gBAAgB,CAACmD,OAD5B,EACsC5B,KAAD,IAAW;AAC5CA,MAAAA,KAAK,CAACmB,OAAN,GAAgB,IAAhB;AACD,KAHH,EAIGQ,OAJH,CAIWlD,gBAAgB,CAACoD,SAJ5B,EAIuC,CAAC7B,KAAD,EAAQ;AAAEwB,MAAAA;AAAF,KAAR,KAAwB;AAC3DZ,MAAAA,eAAe,CAACkB,UAAhB,CAA2B9B,KAA3B,EAAkCwB,OAAlC;AACAxB,MAAAA,KAAK,CAACmB,OAAN,GAAgB,KAAhB;AACD,KAPH,EAQGQ,OARH,CAQWlD,gBAAgB,CAACsD,QAR5B,EAQuC/B,KAAD,IAAW;AAC7CA,MAAAA,KAAK,CAACmB,OAAN,GAAgB,KAAhB;AACD,KAVH,EAWGQ,OAXH,CAWWxC,UAAU,CAACyC,OAXtB,EAWgC5B,KAAD,IAAW;AACtCA,MAAAA,KAAK,CAACmB,OAAN,GAAgB,IAAhB;AACD,KAbH,EAcGQ,OAdH,CAcWxC,UAAU,CAAC0C,SAdtB,EAciC,CAAC7B,KAAD,EAAQ;AAAEwB,MAAAA;AAAF,KAAR,KAAwB;AACrDZ,MAAAA,eAAe,CAACoB,MAAhB,CAAuBhC,KAAvB,EAA8BwB,OAA9B;AACAxB,MAAAA,KAAK,CAACmB,OAAN,GAAgB,KAAhB;AACD,KAjBH,EAkBGQ,OAlBH,CAkBWxC,UAAU,CAAC4C,QAlBtB,EAkBiC/B,KAAD,IAAW;AACvCA,MAAAA,KAAK,CAACmB,OAAN,GAAgB,KAAhB;AACD,KApBH,EAqBGQ,OArBH,CAqBWrC,aAAa,CAACsC,OArBzB,EAqBmC5B,KAAD,IAAW;AACzCA,MAAAA,KAAK,CAACmB,OAAN,GAAgB,IAAhB;AACD,KAvBH,EAwBGQ,OAxBH,CAwBWrC,aAAa,CAACuC,SAxBzB,EAwBoC,CAAC7B,KAAD,EAAQ;AAAEwB,MAAAA;AAAF,KAAR,KAAwB;AACxD,UAAIA,OAAJ,aAAIA,OAAJ,uBAAIA,OAAO,CAAE5C,EAAb,EAAiB;AACfgC,QAAAA,eAAe,CAACqB,SAAhB,CAA0BjC,KAA1B,EAAiCwB,OAAO,CAAC5C,EAAzC;AACD;;AACDoB,MAAAA,KAAK,CAACmB,OAAN,GAAgB,KAAhB;AACD,KA7BH,EA8BGQ,OA9BH,CA8BWrC,aAAa,CAACyC,QA9BzB,EA8BoC/B,KAAD,IAAW;AAC1CA,MAAAA,KAAK,CAACmB,OAAN,GAAgB,KAAhB;AACD,KAhCH,EAiCGQ,OAjCH,CAiCWhD,YAAY,CAACiD,OAjCxB,EAiCkC5B,KAAD,IAAW;AACxCA,MAAAA,KAAK,CAACmB,OAAN,GAAgB,IAAhB;AACD,KAnCH,EAoCGQ,OApCH,CAoCWhD,YAAY,CAACoD,QApCxB,EAoCmC/B,KAAD,IAAW;AACzCA,MAAAA,KAAK,CAACmB,OAAN,GAAgB,KAAhB;AACD,KAtCH,EAuCGQ,OAvCH,CAuCWhD,YAAY,CAACkD,SAvCxB,EAuCmC,CAAC7B,KAAD,EAAQ;AAAEwB,MAAAA;AAAF,KAAR,KAAwB;AACvD,UAAIA,OAAJ,EAAa;AACXZ,QAAAA,eAAe,CAACsB,SAAhB,CAA0BlC,KAA1B,EAAiCwB,OAAjC;AACD;;AACDxB,MAAAA,KAAK,CAACmB,OAAN,GAAgB,KAAhB;AACD,KA5CH,EA6CGQ,OA7CH,CA6CW9B,YAAY,CAACgC,SA7CxB,EA6CmC,CAAC7B,KAAD,EAAQ;AAAEwB,MAAAA;AAAF,KAAR,KAAwB;AACvD,UAAIA,OAAJ,EAAa;AACXZ,QAAAA,eAAe,CAACuB,SAAhB,CAA0BnC,KAA1B,EAAiC;AAC/BpB,UAAAA,EAAE,EAAE4C,OAAO,CAAC5C,EADmB;AAE/BwD,UAAAA,OAAO,EAAE;AACPhC,YAAAA,SAAS,EAAEoB,OAAO,CAACpB;AADZ;AAFsB,SAAjC;AAMD;AACF,KAtDH,EAuDGuB,OAvDH,CAuDWnB,WAAW,CAACqB,SAvDvB,EAuDkC,CAAC7B,KAAD,EAAQ;AAAEwB,MAAAA;AAAF,KAAR,KAAwB;AACtD,UAAIA,OAAJ,EAAa;AACXZ,QAAAA,eAAe,CAACuB,SAAhB,CAA0BnC,KAA1B,EAAiC;AAC/BpB,UAAAA,EAAE,EAAE4C,OAAO,CAAC5C,EADmB;AAE/BwD,UAAAA,OAAO,EAAE;AACP3B,YAAAA,SAAS,EAAEe,OAAO,CAACf;AADZ;AAFsB,SAAjC;AAMD;AACF,KAhEH,EAiEGkB,OAjEH,CAiEWjB,kBAAkB,CAACmB,SAjE9B,EAiEyC,CAAC7B,KAAD,EAAQ;AAAEwB,MAAAA;AAAF,KAAR,KAAwB;AAC7D,UAAIA,OAAJ,EAAa;AACXZ,QAAAA,eAAe,CAACuB,SAAhB,CAA0BnC,KAA1B,EAAiC;AAC/BpB,UAAAA,EAAE,EAAE4C,OAAO,CAAC5C,EADmB;AAE/BwD,UAAAA,OAAO,EAAE;AACPnE,YAAAA,iBAAiB,EAAEuD,OAAO,CAACvD;AADpB;AAFsB,SAAjC;AAMD;AACF,KA1EH;AA2ED;AApFsC,CAAD,CAAjC;AAuFP,OAAO,MAAM;AAAEqD,EAAAA;AAAF,IAAuBF,aAAa,CAACiB,OAA3C;AAEP,eAAejB,aAAa,CAACkB,OAA7B","sourcesContent":["import {\n  createAsyncThunk,\n  createEntityAdapter,\n  createSlice,\n  PayloadAction,\n} from \"@reduxjs/toolkit\";\nimport { DataStore } from \"aws-amplify\";\nimport { RootState } from \"../reduxStore\";\nimport {\n  AudienceFaceExpression,\n  Meeting,\n  PublicMeetingInfo,\n  Rating,\n  SpeakerVoiceEmotion,\n} from \"../models\";\nimport {\n  deleteAudienceFaceExpressions,\n  fetchAudienceFaceExpressions,\n} from \"./audienceFaceExpressionSlice\";\nimport { deleteRatings } from \"./ratingsSlice\";\nimport {\n  deleteSpeakerVoiceEmotions,\n  fetchSpeakerVoiceEmotions,\n} from \"./speakerVoiceEmotionSlice\";\n\nexport const fetchAllMeetings = createAsyncThunk(\n  \"meetings/fetchAll\",\n  async () => {\n    return (await DataStore.query(Meeting)) as Meeting[];\n  }\n);\n\nexport const fetchMeeting = createAsyncThunk(\n  \"meetings/fetchOne\",\n  async (id: string, { dispatch }) => {\n    const meeting = await DataStore.query(Meeting, id);\n\n    if (meeting) {\n      // Fetch corresponding AudienceFaceExpressions\n      const audienceFaceExpressions = await DataStore.query(\n        AudienceFaceExpression,\n        (predicate) => predicate.meetingID(\"eq\", meeting.id)\n      );\n      dispatch(fetchAudienceFaceExpressions(audienceFaceExpressions));\n\n      // Fetch corresponding SpeakerVoiceEmotions\n      const speakerVoiceEmotions = await DataStore.query(\n        SpeakerVoiceEmotion,\n        (predicate) => predicate.meetingID(\"eq\", meeting.id)\n      );\n      dispatch(fetchSpeakerVoiceEmotions(speakerVoiceEmotions));\n\n      return meeting;\n    }\n  }\n);\n\nexport const addMeeting = createAsyncThunk(\n  \"meetings/create\",\n  async (name: string) => {\n    return (await DataStore.save(new Meeting({ name }))) as Meeting;\n  }\n);\n\nexport const removeMeeting = createAsyncThunk(\n  \"meetings/delete\",\n  async (id: string, { dispatch }) => {\n    const meetingToDelete: Meeting | undefined = await DataStore.query(\n      Meeting,\n      id\n    );\n\n    if (meetingToDelete) {\n      // Delete AudienceFaceExpressions\n      dispatch(\n        deleteAudienceFaceExpressions(\n          (\n            await DataStore.delete(AudienceFaceExpression, (predicate) =>\n              predicate.meetingID(\"eq\", meetingToDelete.id)\n            )\n          ).map((predicate) => predicate.id)\n        )\n      );\n\n      // Delete SpeakerVoiceEmotions\n      dispatch(\n        deleteSpeakerVoiceEmotions(\n          (\n            await DataStore.delete(SpeakerVoiceEmotion, (predicate) =>\n              predicate.meetingID(\"eq\", meetingToDelete.id)\n            )\n          ).map((predicate) => predicate.id)\n        )\n      );\n\n      // Delete Ratings if there are any\n      if (meetingToDelete.PublicMeetingInfo?.id) {\n        dispatch(\n          deleteRatings(\n            (\n              await DataStore.delete(Rating, (r) =>\n                r.publicmeetinginfoID(\n                  \"eq\",\n                  meetingToDelete.PublicMeetingInfo!.id\n                )\n              )\n            ).map((a) => a.id)\n          )\n        );\n      }\n\n      if (!!meetingToDelete.PublicMeetingInfo) {\n        await DataStore.delete(meetingToDelete.PublicMeetingInfo);\n      }\n\n      return (await DataStore.delete(meetingToDelete)) as Meeting;\n    }\n  }\n);\n\nexport const startMeeting = createAsyncThunk(\n  \"meetings/start\",\n  async (_, { getState }) => {\n    const state: RootState = getState() as RootState;\n    const activeMeetingId: string | null = state.meetings.activeMeeting;\n\n    if (activeMeetingId) {\n      const activeMeeting: Meeting = (await DataStore.query(\n        Meeting,\n        activeMeetingId\n      ))!;\n\n      if (!activeMeeting.startedAt) {\n        return (await DataStore.save(\n          Meeting.copyOf(activeMeeting, (meeting) => {\n            meeting.startedAt = new Date().toISOString();\n          })\n        )) as Meeting;\n      }\n    }\n  }\n);\n\nexport const stopMeeting = createAsyncThunk(\n  \"meetings/stop\",\n  async (_, { getState }) => {\n    const state: RootState = getState() as RootState;\n    const activeMeetingId: string | null = state.meetings.activeMeeting;\n\n    if (activeMeetingId) {\n      const activeMeeting: Meeting = (await DataStore.query(\n        Meeting,\n        activeMeetingId\n      ))!;\n\n      if (!activeMeeting.stoppedAt) {\n        return (await DataStore.save(\n          Meeting.copyOf(activeMeeting, (meeting) => {\n            meeting.stoppedAt = new Date().toISOString();\n          })\n        )) as Meeting;\n      }\n    }\n  }\n);\n\nexport const createFeedbackLink = createAsyncThunk(\n  \"meetings/createFeedbackLink\",\n  async (_, { getState }) => {\n    const state: RootState = getState() as RootState;\n    const activeMeetingId: string | null = state.meetings.activeMeeting;\n\n    if (activeMeetingId) {\n      const activeMeeting: Meeting = (await DataStore.query(\n        Meeting,\n        activeMeetingId\n      ))!;\n\n      if (!activeMeeting.startedAt || !activeMeeting.stoppedAt) {\n        throw new Error(\n          \"You can only create feedback links once the meeting has finished.\"\n        );\n      }\n\n      // Create a PublicMeetingInfo model which will serve as read-only model for guest users in order to give feedback\n      return (await DataStore.save(\n        Meeting.copyOf(activeMeeting, (meeting) => {\n          meeting.PublicMeetingInfo = new PublicMeetingInfo({\n            name: activeMeeting.name,\n            startedAt: activeMeeting.startedAt!,\n            stoppedAt: activeMeeting.stoppedAt!,\n          });\n        })\n      )) as Meeting;\n    }\n  }\n);\n\nexport const meetingsAdapter = createEntityAdapter<Meeting>({\n  sortComparer: (a: Meeting, b: Meeting) =>\n    new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime(),\n});\nconst initialState = meetingsAdapter.getInitialState({\n  loading: false as boolean,\n  activeMeeting: null as string | null,\n});\n\nexport const meetingsSlice = createSlice({\n  name: \"meetings\",\n  initialState,\n  reducers: {\n    setActiveMeeting(state, action: PayloadAction<string | null>) {\n      state.activeMeeting = action.payload;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchAllMeetings.pending, (state) => {\n        state.loading = true;\n      })\n      .addCase(fetchAllMeetings.fulfilled, (state, { payload }) => {\n        meetingsAdapter.upsertMany(state, payload);\n        state.loading = false;\n      })\n      .addCase(fetchAllMeetings.rejected, (state) => {\n        state.loading = false;\n      })\n      .addCase(addMeeting.pending, (state) => {\n        state.loading = true;\n      })\n      .addCase(addMeeting.fulfilled, (state, { payload }) => {\n        meetingsAdapter.addOne(state, payload);\n        state.loading = false;\n      })\n      .addCase(addMeeting.rejected, (state) => {\n        state.loading = false;\n      })\n      .addCase(removeMeeting.pending, (state) => {\n        state.loading = true;\n      })\n      .addCase(removeMeeting.fulfilled, (state, { payload }) => {\n        if (payload?.id) {\n          meetingsAdapter.removeOne(state, payload.id);\n        }\n        state.loading = false;\n      })\n      .addCase(removeMeeting.rejected, (state) => {\n        state.loading = false;\n      })\n      .addCase(fetchMeeting.pending, (state) => {\n        state.loading = true;\n      })\n      .addCase(fetchMeeting.rejected, (state) => {\n        state.loading = false;\n      })\n      .addCase(fetchMeeting.fulfilled, (state, { payload }) => {\n        if (payload) {\n          meetingsAdapter.upsertOne(state, payload);\n        }\n        state.loading = false;\n      })\n      .addCase(startMeeting.fulfilled, (state, { payload }) => {\n        if (payload) {\n          meetingsAdapter.updateOne(state, {\n            id: payload.id,\n            changes: {\n              startedAt: payload.startedAt,\n            },\n          });\n        }\n      })\n      .addCase(stopMeeting.fulfilled, (state, { payload }) => {\n        if (payload) {\n          meetingsAdapter.updateOne(state, {\n            id: payload.id,\n            changes: {\n              stoppedAt: payload.stoppedAt,\n            },\n          });\n        }\n      })\n      .addCase(createFeedbackLink.fulfilled, (state, { payload }) => {\n        if (payload) {\n          meetingsAdapter.updateOne(state, {\n            id: payload.id,\n            changes: {\n              PublicMeetingInfo: payload.PublicMeetingInfo,\n            },\n          });\n        }\n      });\n  },\n});\n\nexport const { setActiveMeeting } = meetingsSlice.actions;\n\nexport default meetingsSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}