{"ast":null,"code":"import { configureStore, isPlain } from \"@reduxjs/toolkit\";\nimport counterReducer from \"./counter/counterSlice\";\nimport errorReducer from \"./error/errorSlice\";\nimport authReducer from \"./auth/authSlice\";\nimport meetingsReducer from \"./meetings/meetingsSlice\";\nimport audienceFaceExpressionsReducer from \"./meetings/audienceFaceExpressionSlice\";\nimport speakerVoiceEmotionsReducer from \"./meetings/speakerVoiceEmotionSlice\";\nimport ratingsReducer from \"./meetings/ratingsSlice\";\nimport logger from \"redux-logger\";\nimport { immerable } from \"immer\";\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    error: errorReducer,\n    auth: authReducer,\n    meetings: meetingsReducer,\n    audienceFaceExpressions: audienceFaceExpressionsReducer,\n    speakerVoiceEmotions: speakerVoiceEmotionsReducer,\n    ratings: ratingsReducer\n  },\n  middleware: getDefaultMiddleware => process.env.NODE_ENV !== \"production\" ? getDefaultMiddleware({\n    serializableCheck: {\n      isSerializable: value => // Allow Immer.js compatible classes\n      Boolean(value === null || value === void 0 ? void 0 : value.constructor[immerable]) || // Allow functions to be returned by action creators\n      // This might be useful if you return WebSocket unsubscribe functions from a ReduxThunk\n      typeof value === \"function\" || // Allow all plain values\n      isPlain(value)\n    }\n  }).concat(logger) : getDefaultMiddleware()\n});","map":{"version":3,"sources":["/Users/sanjayar/Desktop/moody-main/src/reduxStore.ts"],"names":["configureStore","isPlain","counterReducer","errorReducer","authReducer","meetingsReducer","audienceFaceExpressionsReducer","speakerVoiceEmotionsReducer","ratingsReducer","logger","immerable","store","reducer","counter","error","auth","meetings","audienceFaceExpressions","speakerVoiceEmotions","ratings","middleware","getDefaultMiddleware","process","env","NODE_ENV","serializableCheck","isSerializable","value","Boolean","constructor","concat"],"mappings":"AAAA,SAEEA,cAFF,EAIEC,OAJF,QAMO,kBANP;AAOA,OAAOC,cAAP,MAA2B,wBAA3B;AACA,OAAOC,YAAP,MAAyB,oBAAzB;AACA,OAAOC,WAAP,MAAwB,kBAAxB;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,OAAOC,8BAAP,MAA2C,wCAA3C;AACA,OAAOC,2BAAP,MAAwC,qCAAxC;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SAASC,SAAT,QAA0B,OAA1B;AAEA,OAAO,MAAMC,KAAK,GAAGX,cAAc,CAAC;AAClCY,EAAAA,OAAO,EAAE;AACPC,IAAAA,OAAO,EAAEX,cADF;AAEPY,IAAAA,KAAK,EAAEX,YAFA;AAGPY,IAAAA,IAAI,EAAEX,WAHC;AAIPY,IAAAA,QAAQ,EAAEX,eAJH;AAKPY,IAAAA,uBAAuB,EAAEX,8BALlB;AAMPY,IAAAA,oBAAoB,EAAEX,2BANf;AAOPY,IAAAA,OAAO,EAAEX;AAPF,GADyB;AAUlCY,EAAAA,UAAU,EAAGC,oBAAD,IACVC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GACIH,oBAAoB,CAAC;AACnBI,IAAAA,iBAAiB,EAAE;AACjBC,MAAAA,cAAc,EAAGC,KAAD,IACd;AACAC,MAAAA,OAAO,CAACD,KAAD,aAACA,KAAD,uBAACA,KAAK,CAAEE,WAAP,CAAmBnB,SAAnB,CAAD,CAAP,IACA;AACA;AACA,aAAOiB,KAAP,KAAiB,UAHjB,IAIA;AACA1B,MAAAA,OAAO,CAAC0B,KAAD;AARQ;AADA,GAAD,CAApB,CAWGG,MAXH,CAWUrB,MAXV,CADJ,GAaIY,oBAAoB;AAxBQ,CAAD,CAA5B","sourcesContent":["import {\n  AnyAction,\n  configureStore,\n  Dispatch,\n  isPlain,\n  Middleware,\n} from \"@reduxjs/toolkit\";\nimport counterReducer from \"./counter/counterSlice\";\nimport errorReducer from \"./error/errorSlice\";\nimport authReducer from \"./auth/authSlice\";\nimport meetingsReducer from \"./meetings/meetingsSlice\";\nimport audienceFaceExpressionsReducer from \"./meetings/audienceFaceExpressionSlice\";\nimport speakerVoiceEmotionsReducer from \"./meetings/speakerVoiceEmotionSlice\";\nimport ratingsReducer from \"./meetings/ratingsSlice\";\nimport logger from \"redux-logger\";\nimport { immerable } from \"immer\";\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    error: errorReducer,\n    auth: authReducer,\n    meetings: meetingsReducer,\n    audienceFaceExpressions: audienceFaceExpressionsReducer,\n    speakerVoiceEmotions: speakerVoiceEmotionsReducer,\n    ratings: ratingsReducer,\n  },\n  middleware: (getDefaultMiddleware) =>\n    process.env.NODE_ENV !== \"production\"\n      ? getDefaultMiddleware({\n          serializableCheck: {\n            isSerializable: (value: any) =>\n              // Allow Immer.js compatible classes\n              Boolean(value?.constructor[immerable]) ||\n              // Allow functions to be returned by action creators\n              // This might be useful if you return WebSocket unsubscribe functions from a ReduxThunk\n              typeof value === \"function\" ||\n              // Allow all plain values\n              isPlain(value),\n          },\n        }).concat(logger as Middleware<{}, any, Dispatch<AnyAction>>)\n      : getDefaultMiddleware(),\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n"]},"metadata":{},"sourceType":"module"}