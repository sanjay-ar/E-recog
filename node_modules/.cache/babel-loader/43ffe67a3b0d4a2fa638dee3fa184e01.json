{"ast":null,"code":"/*!\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport Client from './Client';\nimport CognitoUser from './CognitoUser';\nimport StorageHelper from './StorageHelper';\nvar USER_POOL_ID_MAX_LENGTH = 55;\n/** @class */\n\nvar CognitoUserPool = /*#__PURE__*/function () {\n  /**\n   * Constructs a new CognitoUserPool object\n   * @param {object} data Creation options.\n   * @param {string} data.UserPoolId Cognito user pool id.\n   * @param {string} data.ClientId User pool application client id.\n   * @param {string} data.endpoint Optional custom service endpoint.\n   * @param {object} data.fetchOptions Optional options for fetch API.\n   *        (only credentials option is supported)\n   * @param {object} data.Storage Optional storage object.\n   * @param {boolean} data.AdvancedSecurityDataCollectionFlag Optional:\n   *        boolean flag indicating if the data collection is enabled\n   *        to support cognito advanced security features. By default, this\n   *        flag is set to true.\n   */\n  function CognitoUserPool(data, wrapRefreshSessionCallback) {\n    var _ref = data || {},\n        UserPoolId = _ref.UserPoolId,\n        ClientId = _ref.ClientId,\n        endpoint = _ref.endpoint,\n        fetchOptions = _ref.fetchOptions,\n        AdvancedSecurityDataCollectionFlag = _ref.AdvancedSecurityDataCollectionFlag;\n\n    if (!UserPoolId || !ClientId) {\n      throw new Error('Both UserPoolId and ClientId are required.');\n    }\n\n    if (UserPoolId.length > USER_POOL_ID_MAX_LENGTH || !/^[\\w-]+_[0-9a-zA-Z]+$/.test(UserPoolId)) {\n      throw new Error('Invalid UserPoolId format.');\n    }\n\n    var region = UserPoolId.split('_')[0];\n    this.userPoolId = UserPoolId;\n    this.clientId = ClientId;\n    this.client = new Client(region, endpoint, fetchOptions);\n    /**\n     * By default, AdvancedSecurityDataCollectionFlag is set to true,\n     * if no input value is provided.\n     */\n\n    this.advancedSecurityDataCollectionFlag = AdvancedSecurityDataCollectionFlag !== false;\n    this.storage = data.Storage || new StorageHelper().getStorage();\n\n    if (wrapRefreshSessionCallback) {\n      this.wrapRefreshSessionCallback = wrapRefreshSessionCallback;\n    }\n  }\n  /**\n   * @returns {string} the user pool id\n   */\n\n\n  var _proto = CognitoUserPool.prototype;\n\n  _proto.getUserPoolId = function getUserPoolId() {\n    return this.userPoolId;\n  }\n  /**\n   * @returns {string} the user pool name\n   */\n  ;\n\n  _proto.getUserPoolName = function getUserPoolName() {\n    return this.getUserPoolId().split('_')[1];\n  }\n  /**\n   * @returns {string} the client id\n   */\n  ;\n\n  _proto.getClientId = function getClientId() {\n    return this.clientId;\n  }\n  /**\n   * @typedef {object} SignUpResult\n   * @property {CognitoUser} user New user.\n   * @property {bool} userConfirmed If the user is already confirmed.\n   */\n\n  /**\n   * method for signing up a user\n   * @param {string} username User's username.\n   * @param {string} password Plain-text initial password entered by user.\n   * @param {(AttributeArg[])=} userAttributes New user attributes.\n   * @param {(AttributeArg[])=} validationData Application metadata.\n   * @param {(AttributeArg[])=} clientMetadata Client metadata.\n   * @param {nodeCallback<SignUpResult>} callback Called on error or with the new user.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.signUp = function signUp(username, password, userAttributes, validationData, callback, clientMetadata) {\n    var _this = this;\n\n    var jsonReq = {\n      ClientId: this.clientId,\n      Username: username,\n      Password: password,\n      UserAttributes: userAttributes,\n      ValidationData: validationData,\n      ClientMetadata: clientMetadata\n    };\n\n    if (this.getUserContextData(username)) {\n      jsonReq.UserContextData = this.getUserContextData(username);\n    }\n\n    this.client.request('SignUp', jsonReq, function (err, data) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      var cognitoUser = {\n        Username: username,\n        Pool: _this,\n        Storage: _this.storage\n      };\n      var returnData = {\n        user: new CognitoUser(cognitoUser),\n        userConfirmed: data.UserConfirmed,\n        userSub: data.UserSub,\n        codeDeliveryDetails: data.CodeDeliveryDetails\n      };\n      return callback(null, returnData);\n    });\n  }\n  /**\n   * method for getting the current user of the application from the local storage\n   *\n   * @returns {CognitoUser} the user retrieved from storage\n   */\n  ;\n\n  _proto.getCurrentUser = function getCurrentUser() {\n    var lastUserKey = \"CognitoIdentityServiceProvider.\" + this.clientId + \".LastAuthUser\";\n    var lastAuthUser = this.storage.getItem(lastUserKey);\n\n    if (lastAuthUser) {\n      var cognitoUser = {\n        Username: lastAuthUser,\n        Pool: this,\n        Storage: this.storage\n      };\n      return new CognitoUser(cognitoUser);\n    }\n\n    return null;\n  }\n  /**\n   * This method returns the encoded data string used for cognito advanced security feature.\n   * This would be generated only when developer has included the JS used for collecting the\n   * data on their client. Please refer to documentation to know more about using AdvancedSecurity\n   * features\n   * @param {string} username the username for the context data\n   * @returns {string} the user context data\n   **/\n  ;\n\n  _proto.getUserContextData = function getUserContextData(username) {\n    if (typeof AmazonCognitoAdvancedSecurityData === 'undefined') {\n      return undefined;\n    }\n    /* eslint-disable */\n\n\n    var amazonCognitoAdvancedSecurityDataConst = AmazonCognitoAdvancedSecurityData;\n    /* eslint-enable */\n\n    if (this.advancedSecurityDataCollectionFlag) {\n      var advancedSecurityData = amazonCognitoAdvancedSecurityDataConst.getData(username, this.userPoolId, this.clientId);\n\n      if (advancedSecurityData) {\n        var userContextData = {\n          EncodedData: advancedSecurityData\n        };\n        return userContextData;\n      }\n    }\n\n    return {};\n  };\n\n  return CognitoUserPool;\n}();\n\nexport { CognitoUserPool as default };","map":{"version":3,"sources":["/Users/sanjayar/Desktop/moody-main copy 2/node_modules/amazon-cognito-identity-js/es/CognitoUserPool.js"],"names":["Client","CognitoUser","StorageHelper","USER_POOL_ID_MAX_LENGTH","CognitoUserPool","data","wrapRefreshSessionCallback","_ref","UserPoolId","ClientId","endpoint","fetchOptions","AdvancedSecurityDataCollectionFlag","Error","length","test","region","split","userPoolId","clientId","client","advancedSecurityDataCollectionFlag","storage","Storage","getStorage","_proto","prototype","getUserPoolId","getUserPoolName","getClientId","signUp","username","password","userAttributes","validationData","callback","clientMetadata","_this","jsonReq","Username","Password","UserAttributes","ValidationData","ClientMetadata","getUserContextData","UserContextData","request","err","cognitoUser","Pool","returnData","user","userConfirmed","UserConfirmed","userSub","UserSub","codeDeliveryDetails","CodeDeliveryDetails","getCurrentUser","lastUserKey","lastAuthUser","getItem","AmazonCognitoAdvancedSecurityData","undefined","amazonCognitoAdvancedSecurityDataConst","advancedSecurityData","getData","userContextData","EncodedData","default"],"mappings":"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","sourcesContent":["/*!\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport Client from './Client';\nimport CognitoUser from './CognitoUser';\nimport StorageHelper from './StorageHelper';\nvar USER_POOL_ID_MAX_LENGTH = 55;\n\n/** @class */\nvar CognitoUserPool = /*#__PURE__*/function () {\n  /**\n   * Constructs a new CognitoUserPool object\n   * @param {object} data Creation options.\n   * @param {string} data.UserPoolId Cognito user pool id.\n   * @param {string} data.ClientId User pool application client id.\n   * @param {string} data.endpoint Optional custom service endpoint.\n   * @param {object} data.fetchOptions Optional options for fetch API.\n   *        (only credentials option is supported)\n   * @param {object} data.Storage Optional storage object.\n   * @param {boolean} data.AdvancedSecurityDataCollectionFlag Optional:\n   *        boolean flag indicating if the data collection is enabled\n   *        to support cognito advanced security features. By default, this\n   *        flag is set to true.\n   */\n  function CognitoUserPool(data, wrapRefreshSessionCallback) {\n    var _ref = data || {},\n      UserPoolId = _ref.UserPoolId,\n      ClientId = _ref.ClientId,\n      endpoint = _ref.endpoint,\n      fetchOptions = _ref.fetchOptions,\n      AdvancedSecurityDataCollectionFlag = _ref.AdvancedSecurityDataCollectionFlag;\n    if (!UserPoolId || !ClientId) {\n      throw new Error('Both UserPoolId and ClientId are required.');\n    }\n    if (UserPoolId.length > USER_POOL_ID_MAX_LENGTH || !/^[\\w-]+_[0-9a-zA-Z]+$/.test(UserPoolId)) {\n      throw new Error('Invalid UserPoolId format.');\n    }\n    var region = UserPoolId.split('_')[0];\n    this.userPoolId = UserPoolId;\n    this.clientId = ClientId;\n    this.client = new Client(region, endpoint, fetchOptions);\n\n    /**\n     * By default, AdvancedSecurityDataCollectionFlag is set to true,\n     * if no input value is provided.\n     */\n    this.advancedSecurityDataCollectionFlag = AdvancedSecurityDataCollectionFlag !== false;\n    this.storage = data.Storage || new StorageHelper().getStorage();\n    if (wrapRefreshSessionCallback) {\n      this.wrapRefreshSessionCallback = wrapRefreshSessionCallback;\n    }\n  }\n\n  /**\n   * @returns {string} the user pool id\n   */\n  var _proto = CognitoUserPool.prototype;\n  _proto.getUserPoolId = function getUserPoolId() {\n    return this.userPoolId;\n  }\n\n  /**\n   * @returns {string} the user pool name\n   */;\n  _proto.getUserPoolName = function getUserPoolName() {\n    return this.getUserPoolId().split('_')[1];\n  }\n\n  /**\n   * @returns {string} the client id\n   */;\n  _proto.getClientId = function getClientId() {\n    return this.clientId;\n  }\n\n  /**\n   * @typedef {object} SignUpResult\n   * @property {CognitoUser} user New user.\n   * @property {bool} userConfirmed If the user is already confirmed.\n   */\n  /**\n   * method for signing up a user\n   * @param {string} username User's username.\n   * @param {string} password Plain-text initial password entered by user.\n   * @param {(AttributeArg[])=} userAttributes New user attributes.\n   * @param {(AttributeArg[])=} validationData Application metadata.\n   * @param {(AttributeArg[])=} clientMetadata Client metadata.\n   * @param {nodeCallback<SignUpResult>} callback Called on error or with the new user.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */;\n  _proto.signUp = function signUp(username, password, userAttributes, validationData, callback, clientMetadata) {\n    var _this = this;\n    var jsonReq = {\n      ClientId: this.clientId,\n      Username: username,\n      Password: password,\n      UserAttributes: userAttributes,\n      ValidationData: validationData,\n      ClientMetadata: clientMetadata\n    };\n    if (this.getUserContextData(username)) {\n      jsonReq.UserContextData = this.getUserContextData(username);\n    }\n    this.client.request('SignUp', jsonReq, function (err, data) {\n      if (err) {\n        return callback(err, null);\n      }\n      var cognitoUser = {\n        Username: username,\n        Pool: _this,\n        Storage: _this.storage\n      };\n      var returnData = {\n        user: new CognitoUser(cognitoUser),\n        userConfirmed: data.UserConfirmed,\n        userSub: data.UserSub,\n        codeDeliveryDetails: data.CodeDeliveryDetails\n      };\n      return callback(null, returnData);\n    });\n  }\n\n  /**\n   * method for getting the current user of the application from the local storage\n   *\n   * @returns {CognitoUser} the user retrieved from storage\n   */;\n  _proto.getCurrentUser = function getCurrentUser() {\n    var lastUserKey = \"CognitoIdentityServiceProvider.\" + this.clientId + \".LastAuthUser\";\n    var lastAuthUser = this.storage.getItem(lastUserKey);\n    if (lastAuthUser) {\n      var cognitoUser = {\n        Username: lastAuthUser,\n        Pool: this,\n        Storage: this.storage\n      };\n      return new CognitoUser(cognitoUser);\n    }\n    return null;\n  }\n\n  /**\n   * This method returns the encoded data string used for cognito advanced security feature.\n   * This would be generated only when developer has included the JS used for collecting the\n   * data on their client. Please refer to documentation to know more about using AdvancedSecurity\n   * features\n   * @param {string} username the username for the context data\n   * @returns {string} the user context data\n   **/;\n  _proto.getUserContextData = function getUserContextData(username) {\n    if (typeof AmazonCognitoAdvancedSecurityData === 'undefined') {\n      return undefined;\n    }\n    /* eslint-disable */\n    var amazonCognitoAdvancedSecurityDataConst = AmazonCognitoAdvancedSecurityData;\n    /* eslint-enable */\n\n    if (this.advancedSecurityDataCollectionFlag) {\n      var advancedSecurityData = amazonCognitoAdvancedSecurityDataConst.getData(username, this.userPoolId, this.clientId);\n      if (advancedSecurityData) {\n        var userContextData = {\n          EncodedData: advancedSecurityData\n        };\n        return userContextData;\n      }\n    }\n    return {};\n  };\n  return CognitoUserPool;\n}();\nexport { CognitoUserPool as default };"]},"metadata":{},"sourceType":"module"}