{"ast":null,"code":"export function movingAverage(arr, n = 5) {\n  if (arr.length - n < 0) {\n    return [];\n  }\n\n  const result = new Array(arr.length - n);\n\n  for (let i = n; i < arr.length; i++) {\n    let meanLastN = 0.0;\n\n    for (let j = i - n; j < i; j++) {\n      meanLastN += arr[j];\n    }\n\n    result[i] = meanLastN / n;\n  }\n\n  return result;\n}\nexport function guessGoodMovingAverage(arr) {\n  if (arr.length === 0) {\n    return 1;\n  }\n\n  return Math.floor(10 * arrStd(arr) + Math.log(arr.length));\n}\nexport function softmax(arr) {\n  const C = Math.max(...arr);\n  const d = arr.map(y => Math.exp(y - C)).reduce((a, b) => a + b);\n  return arr.map(value => {\n    return Math.exp(value - C) / d;\n  });\n}\n\nfunction arrMean(arr) {\n  const length = arr.length;\n\n  if (length === 0) {\n    return 0.0;\n  }\n\n  const sum = arr.reduce((prev, curr) => prev + curr, 0);\n  return sum / length;\n}\n\nfunction arrStd(arr) {\n  const length = arr.length;\n\n  if (length < 2) {\n    return 0.0;\n  }\n\n  const mean = arrMean(arr);\n  const variance = arr.reduce((prev, curr) => prev + (curr - mean) ** 2, 0);\n  return Math.sqrt(variance / (length - 1));\n}\n\nexport function standardize(arr) {\n  const mean = arrMean(arr);\n  const std = arrStd(arr);\n\n  if (std === 0) {\n    return arr;\n  }\n\n  return arr.map(val => (val - mean) / std);\n}\nexport function meanNormalize(arr) {\n  const min = Math.min(...arr);\n  const max = Math.max(...arr);\n  const mean = arrMean(arr);\n  return arr.map(val => (val - mean) / (max - min));\n}\nexport function rmsNormalize(arr, rmsLevel = 0.0) {\n  const r = 10 ** (rmsLevel / 10.0);\n  const squaredSum = arr.reduce((prev, curr) => prev + curr ** 2, 0);\n  const a = Math.sqrt(arr.length * r ** 2 / squaredSum);\n  return arr.map(val => val * a || 0);\n}\nexport function peakNormalize(arr) {\n  const max = Math.max(...arr);\n\n  if (max === 0.0) {\n    return arr;\n  }\n\n  return arr.map(val => val / max);\n}","map":{"version":3,"sources":["/Users/sanjayar/Desktop/moody-main/src/utils.ts"],"names":["movingAverage","arr","n","length","result","Array","i","meanLastN","j","guessGoodMovingAverage","Math","floor","arrStd","log","softmax","C","max","d","map","y","exp","reduce","a","b","value","arrMean","sum","prev","curr","mean","variance","sqrt","standardize","std","val","meanNormalize","min","rmsNormalize","rmsLevel","r","squaredSum","peakNormalize"],"mappings":"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","sourcesContent":["export function movingAverage(arr: number[], n: number = 5): number[] {\n  if (arr.length - n < 0) {\n    return [];\n  }\n  const result = new Array<number>(arr.length - n);\n\n  for (let i = n; i < arr.length; i++) {\n    let meanLastN: number = 0.0;\n    for (let j = i - n; j < i; j++) {\n      meanLastN += arr[j];\n    }\n    result[i] = meanLastN / n;\n  }\n\n  return result;\n}\n\nexport function guessGoodMovingAverage(arr: number[]) {\n  if (arr.length === 0) {\n    return 1;\n  }\n\n  return Math.floor(10 * arrStd(arr) + Math.log(arr.length));\n}\n\nexport function softmax(arr: number[]): number[] {\n  const C = Math.max(...arr);\n  const d = arr.map((y) => Math.exp(y - C)).reduce((a, b) => a + b);\n  return arr.map((value) => {\n    return Math.exp(value - C) / d;\n  });\n}\n\nfunction arrMean(arr: number[]): number {\n  const length: number = arr.length;\n  if (length === 0) {\n    return 0.0;\n  }\n  const sum: number = arr.reduce(\n    (prev: number, curr: number) => prev + curr,\n    0\n  );\n\n  return sum / length;\n}\n\nfunction arrStd(arr: number[]): number {\n  const length: number = arr.length;\n  if (length < 2) {\n    return 0.0;\n  }\n  const mean: number = arrMean(arr);\n  const variance: number = arr.reduce(\n    (prev: number, curr: number) => prev + (curr - mean) ** 2,\n    0\n  );\n  return Math.sqrt(variance / (length - 1));\n}\n\nexport function standardize(arr: number[]): number[] {\n  const mean = arrMean(arr);\n  const std = arrStd(arr);\n  if (std === 0) {\n    return arr;\n  }\n  return arr.map((val: number) => (val - mean) / std);\n}\n\nexport function meanNormalize(arr: number[]): number[] {\n  const min: number = Math.min(...arr);\n  const max: number = Math.max(...arr);\n  const mean: number = arrMean(arr);\n  return arr.map((val: number) => (val - mean) / (max - min));\n}\n\nexport function rmsNormalize(arr: number[], rmsLevel: number = 0.0): number[] {\n  const r = 10 ** (rmsLevel / 10.0);\n  const squaredSum = arr.reduce(\n    (prev: number, curr: number) => prev + curr ** 2,\n    0\n  );\n  const a = Math.sqrt((arr.length * r ** 2) / squaredSum);\n\n  return arr.map((val: number) => val * a || 0);\n}\n\nexport function peakNormalize(arr: number[]): number[] {\n  const max: number = Math.max(...arr);\n  if (max === 0.0) {\n    return arr;\n  }\n\n  return arr.map((val: number) => val / max);\n}\n"]},"metadata":{},"sourceType":"module"}