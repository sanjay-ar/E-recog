{"ast":null,"code":"var _jsxFileName = \"/Users/sanjayar/Desktop/moody-main copy 2/src/pages/meeting/AudienceEmotionBarometer.tsx\",\n    _s = $RefreshSig$();\n\nimport { Box, Checkbox, FormControlLabel, IconButton, Paper, Popover, Typography, useTheme } from \"@material-ui/core\";\nimport { useAppSelector } from \"../../reduxHooks\";\nimport { selectActiveMeetingAudienceFaceExpressionsCurrentScore } from \"../../meetings/audienceFaceExpressionSlice\";\nimport Plot from \"react-plotly.js\";\nimport { InfoOutlined } from \"@material-ui/icons\";\nimport React, { useState } from \"react\";\nimport { selectActiveMeetingSpeakerVoiceEmotionsLastN } from \"../../meetings/speakerVoiceEmotionSlice\";\nimport meanBy from \"lodash-es/meanBy\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AudienceEmotionBarometer() {\n  _s();\n\n  const theme = useTheme();\n  const audienceFaceExpression = useAppSelector(selectActiveMeetingAudienceFaceExpressionsCurrentScore);\n  const speakerVoiceEmotions = useAppSelector(selectActiveMeetingSpeakerVoiceEmotionsLastN(5)); // Popover\n\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  const handleOpenPopover = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClosePopover = () => {\n    setAnchorEl(null);\n  };\n\n  const open = Boolean(anchorEl); // Checkbox\n\n  const [checkboxes, setCheckboxes] = useState({\n    audience: true,\n    speaker: true\n  });\n\n  const handleCheckboxes = event => {\n    setCheckboxes({ ...checkboxes,\n      [event.target.name]: event.target.checked\n    });\n  };\n\n  const data = [];\n\n  if (checkboxes.audience) {\n    data.push({\n      name: \"Audience face expressions\",\n      x: [\"Score\"],\n      y: [(audienceFaceExpression === null || audienceFaceExpression === void 0 ? void 0 : audienceFaceExpression.score) || 0.0],\n      marker: {\n        color: theme.palette.primary.main\n      },\n      type: \"bar\"\n    });\n  }\n\n  if (checkboxes.speaker) {\n    data.push({\n      name: \"Speaker voice emotions (moving average)\",\n      x: [\"Score\"],\n      y: [meanBy(speakerVoiceEmotions, \"score\") || 0.0],\n      marker: {\n        color: theme.palette.secondary.main\n      },\n      type: \"bar\"\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      position: \"relative\",\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        position: \"absolute\",\n        top: 0,\n        right: 0,\n        zIndex: 1,\n        p: 1,\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          color: \"secondary\",\n          onClick: handleOpenPopover,\n          size: \"small\",\n          children: /*#__PURE__*/_jsxDEV(InfoOutlined, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Popover, {\n          open: open,\n          anchorEl: anchorEl,\n          onClose: handleClosePopover,\n          anchorOrigin: {\n            vertical: \"bottom\",\n            horizontal: \"center\"\n          },\n          transformOrigin: {\n            vertical: \"top\",\n            horizontal: \"center\"\n          },\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            p: 2,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              paragraph: true,\n              children: \"Shows the currently active emotions by the audience on a range from -1 (negative) to +1 (positive).\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              children: \"In addition, the speaker's voice emotions are visualized smoothed by a moving average of order 5.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      px: 2,\n      py: 1,\n      children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n        control: /*#__PURE__*/_jsxDEV(Checkbox, {\n          color: \"primary\",\n          checked: checkboxes.audience,\n          onChange: handleCheckboxes,\n          name: \"audience\",\n          size: \"small\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this),\n        label: \"Audience\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n        control: /*#__PURE__*/_jsxDEV(Checkbox, {\n          color: \"secondary\",\n          checked: checkboxes.speaker,\n          onChange: handleCheckboxes,\n          name: \"speaker\",\n          size: \"small\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 13\n        }, this),\n        label: \"Speaker\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Plot, {\n      config: {\n        displayModeBar: false\n      },\n      layout: {\n        title: \"Emotion Barometer\",\n        paper_bgcolor: \"transparent\",\n        plot_bgcolor: \"transparent\",\n        hovermode: false,\n        width: 465,\n        margin: {\n          l: 30,\n          r: 10,\n          t: 50,\n          b: 70\n        },\n        yaxis: {\n          range: [-1.1, 1.1]\n        },\n        showlegend: true,\n        legend: {\n          orientation: \"h\"\n        },\n        font: {\n          family: theme.typography.fontFamily,\n          color: theme.palette.text.primary\n        },\n        transition: {\n          duration: 500,\n          easing: \"cubic-in-out\"\n        },\n        barmode: \"group\"\n      },\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AudienceEmotionBarometer, \"mHBW+OhMmQxrp2GYYymTvWvDgmQ=\", false, function () {\n  return [useTheme, useAppSelector, useAppSelector];\n});\n\n_c = AudienceEmotionBarometer;\n\nvar _c;\n\n$RefreshReg$(_c, \"AudienceEmotionBarometer\");","map":{"version":3,"sources":["/Users/sanjayar/Desktop/moody-main copy 2/src/pages/meeting/AudienceEmotionBarometer.tsx"],"names":["Box","Checkbox","FormControlLabel","IconButton","Paper","Popover","Typography","useTheme","useAppSelector","selectActiveMeetingAudienceFaceExpressionsCurrentScore","Plot","InfoOutlined","React","useState","selectActiveMeetingSpeakerVoiceEmotionsLastN","meanBy","AudienceEmotionBarometer","theme","audienceFaceExpression","speakerVoiceEmotions","anchorEl","setAnchorEl","handleOpenPopover","event","currentTarget","handleClosePopover","open","Boolean","checkboxes","setCheckboxes","audience","speaker","handleCheckboxes","target","name","checked","data","push","x","y","score","marker","color","palette","primary","main","type","secondary","vertical","horizontal","displayModeBar","title","paper_bgcolor","plot_bgcolor","hovermode","width","margin","l","r","t","b","yaxis","range","showlegend","legend","orientation","font","family","typography","fontFamily","text","transition","duration","easing","barmode"],"mappings":"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","sourcesContent":["import {\n  Box,\n  Checkbox,\n  FormControlLabel,\n  IconButton,\n  Paper,\n  Popover,\n  Typography,\n  useTheme,\n} from \"@material-ui/core\";\nimport { AudienceFaceExpression, SpeakerVoiceEmotion } from \"../../models\";\nimport { useAppSelector } from \"../../reduxHooks\";\nimport { selectActiveMeetingAudienceFaceExpressionsCurrentScore } from \"../../meetings/audienceFaceExpressionSlice\";\nimport Plot from \"react-plotly.js\";\nimport { InfoOutlined } from \"@material-ui/icons\";\nimport React, { ChangeEvent, useState } from \"react\";\nimport { selectActiveMeetingSpeakerVoiceEmotionsLastN } from \"../../meetings/speakerVoiceEmotionSlice\";\nimport meanBy from \"lodash-es/meanBy\";\n\nexport default function AudienceEmotionBarometer() {\n  const theme = useTheme();\n  const audienceFaceExpression: AudienceFaceExpression | undefined =\n    useAppSelector(selectActiveMeetingAudienceFaceExpressionsCurrentScore);\n  const speakerVoiceEmotions: SpeakerVoiceEmotion[] = useAppSelector(\n    selectActiveMeetingSpeakerVoiceEmotionsLastN(5)\n  );\n\n  // Popover\n  const [anchorEl, setAnchorEl] = useState<HTMLButtonElement | null>(null);\n\n  const handleOpenPopover = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClosePopover = () => {\n    setAnchorEl(null);\n  };\n\n  const open = Boolean(anchorEl);\n\n  // Checkbox\n  const [checkboxes, setCheckboxes] = useState({\n    audience: true,\n    speaker: true,\n  });\n  const handleCheckboxes = (event: ChangeEvent<HTMLInputElement>) => {\n    setCheckboxes({ ...checkboxes, [event.target.name]: event.target.checked });\n  };\n  const data: object[] = [];\n  if (checkboxes.audience) {\n    data.push({\n      name: \"Audience face expressions\",\n      x: [\"Score\"],\n      y: [audienceFaceExpression?.score || 0.0],\n      marker: {\n        color: theme.palette.primary.main,\n      },\n      type: \"bar\",\n    });\n  }\n  if (checkboxes.speaker) {\n    data.push({\n      name: \"Speaker voice emotions (moving average)\",\n      x: [\"Score\"],\n      y: [meanBy(speakerVoiceEmotions, \"score\") || 0.0],\n      marker: {\n        color: theme.palette.secondary.main,\n      },\n      type: \"bar\",\n    });\n  }\n\n  return (\n    <Paper>\n      <Box position=\"relative\">\n        <Box position=\"absolute\" top={0} right={0} zIndex={1} p={1}>\n          <IconButton\n            color=\"secondary\"\n            onClick={handleOpenPopover}\n            size=\"small\"\n          >\n            <InfoOutlined />\n          </IconButton>\n          <Popover\n            open={open}\n            anchorEl={anchorEl}\n            onClose={handleClosePopover}\n            anchorOrigin={{\n              vertical: \"bottom\",\n              horizontal: \"center\",\n            }}\n            transformOrigin={{\n              vertical: \"top\",\n              horizontal: \"center\",\n            }}\n          >\n            <Box p={2}>\n              <Typography variant=\"body2\" paragraph>\n                Shows the currently active emotions by the audience on a range\n                from -1 (negative) to +1 (positive).\n              </Typography>\n              <Typography variant=\"body2\">\n                In addition, the speaker's voice emotions are visualized\n                smoothed by a moving average of order 5.\n              </Typography>\n            </Box>\n          </Popover>\n        </Box>\n      </Box>\n      <Box px={2} py={1}>\n        <FormControlLabel\n          control={\n            <Checkbox\n              color=\"primary\"\n              checked={checkboxes.audience}\n              onChange={handleCheckboxes}\n              name=\"audience\"\n              size=\"small\"\n            />\n          }\n          label=\"Audience\"\n        />\n        <FormControlLabel\n          control={\n            <Checkbox\n              color=\"secondary\"\n              checked={checkboxes.speaker}\n              onChange={handleCheckboxes}\n              name=\"speaker\"\n              size=\"small\"\n            />\n          }\n          label=\"Speaker\"\n        />\n      </Box>\n      <Plot\n        config={{\n          displayModeBar: false,\n        }}\n        layout={{\n          title: \"Emotion Barometer\",\n          paper_bgcolor: \"transparent\",\n          plot_bgcolor: \"transparent\",\n          hovermode: false,\n          width: 465,\n          margin: {\n            l: 30,\n            r: 10,\n            t: 50,\n            b: 70,\n          },\n          yaxis: {\n            range: [-1.1, 1.1],\n          },\n          showlegend: true,\n          legend: { orientation: \"h\" },\n          font: {\n            family: theme.typography.fontFamily,\n            color: theme.palette.text.primary,\n          },\n          transition: {\n            duration: 500,\n            easing: \"cubic-in-out\",\n          },\n          barmode: \"group\",\n        }}\n        data={data}\n      />\n    </Paper>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}