{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nimport API from '@aws-amplify/api';\nimport { ConsoleLogger as Logger, jitteredBackoff, NonRetryableError, retry, BackgroundProcessManager } from '@aws-amplify/core';\nimport Observable from 'zen-observable-ts';\nimport { DISCARD, isModelFieldType, isTargetNameAssociation, OpType, ProcessName } from '../../types';\nimport { exhaustiveCheck, extractTargetNamesFromSrc, USER, USER_AGENT_SUFFIX_DATASTORE, ID } from '../../util';\nimport { buildGraphQLOperation, createMutationInstanceFromModelOperation, getModelAuthModes, TransformerMutationType, getTokenForCustomAuth } from '../utils';\nimport { getMutationErrorType } from './errorMaps';\nvar MAX_ATTEMPTS = 10;\nvar logger = new Logger('DataStore');\n\nvar MutationProcessor =\n/** @class */\nfunction () {\n  function MutationProcessor(schema, storage, userClasses, outbox, modelInstanceCreator, MutationEvent, amplifyConfig, authModeStrategy, errorHandler, conflictHandler, amplifyContext) {\n    if (amplifyConfig === void 0) {\n      amplifyConfig = {};\n    }\n\n    this.schema = schema;\n    this.storage = storage;\n    this.userClasses = userClasses;\n    this.outbox = outbox;\n    this.modelInstanceCreator = modelInstanceCreator;\n    this.MutationEvent = MutationEvent;\n    this.amplifyConfig = amplifyConfig;\n    this.authModeStrategy = authModeStrategy;\n    this.errorHandler = errorHandler;\n    this.conflictHandler = conflictHandler;\n    this.amplifyContext = amplifyContext;\n    this.typeQuery = new WeakMap();\n    this.processing = false;\n    this.runningProcesses = new BackgroundProcessManager();\n    this.amplifyContext.API = this.amplifyContext.API || API;\n    this.generateQueries();\n  }\n\n  MutationProcessor.prototype.generateQueries = function () {\n    var _this = this;\n\n    Object.values(this.schema.namespaces).forEach(function (namespace) {\n      Object.values(namespace.models).filter(function (_a) {\n        var syncable = _a.syncable;\n        return syncable;\n      }).forEach(function (model) {\n        var _a = __read(buildGraphQLOperation(namespace, model, 'CREATE'), 1),\n            createMutation = _a[0];\n\n        var _b = __read(buildGraphQLOperation(namespace, model, 'UPDATE'), 1),\n            updateMutation = _b[0];\n\n        var _c = __read(buildGraphQLOperation(namespace, model, 'DELETE'), 1),\n            deleteMutation = _c[0];\n\n        _this.typeQuery.set(model, [createMutation, updateMutation, deleteMutation]);\n      });\n    });\n  };\n\n  MutationProcessor.prototype.isReady = function () {\n    return this.observer !== undefined;\n  };\n\n  MutationProcessor.prototype.start = function () {\n    var _this = this;\n\n    var observable = new Observable(function (observer) {\n      _this.observer = observer;\n\n      try {\n        _this.resume();\n      } catch (error) {\n        logger.error('mutations processor start error', error);\n        throw error;\n      }\n\n      return _this.runningProcesses.addCleaner(function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          return __generator(this, function (_a) {\n            this.pause();\n            return [2\n            /*return*/\n            ];\n          });\n        });\n      });\n    });\n    return observable;\n  };\n\n  MutationProcessor.prototype.stop = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.runningProcesses.close()];\n\n          case 1:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.runningProcesses.open()];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  MutationProcessor.prototype.resume = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.runningProcesses.isOpen && this.runningProcesses.add(function (onTerminate) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var head, namespaceName, _loop_1, this_1, _a;\n\n                var _this = this;\n\n                return __generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      if (this.processing || !this.isReady() || !this.runningProcesses.isOpen) {\n                        return [2\n                        /*return*/\n                        ];\n                      }\n\n                      this.processing = true;\n                      namespaceName = USER;\n\n                      _loop_1 = function () {\n                        var model, operation, data, condition, modelConstructor, result, opName, modelDefinition, modelAuthModes, operationAuthModes_1, authModeAttempts_1, authModeRetry_1, error_1, record, hasMore;\n\n                        var _a;\n\n                        return __generator(this, function (_b) {\n                          switch (_b.label) {\n                            case 0:\n                              model = head.model, operation = head.operation, data = head.data, condition = head.condition;\n                              modelConstructor = this_1.userClasses[model];\n                              result = void 0;\n                              opName = void 0;\n                              modelDefinition = void 0;\n                              _b.label = 1;\n\n                            case 1:\n                              _b.trys.push([1, 4,, 5]);\n\n                              return [4\n                              /*yield*/\n                              , getModelAuthModes({\n                                authModeStrategy: this_1.authModeStrategy,\n                                defaultAuthMode: this_1.amplifyConfig.aws_appsync_authenticationType,\n                                modelName: model,\n                                schema: this_1.schema\n                              })];\n\n                            case 2:\n                              modelAuthModes = _b.sent();\n                              operationAuthModes_1 = modelAuthModes[operation.toUpperCase()];\n                              authModeAttempts_1 = 0;\n\n                              authModeRetry_1 = function () {\n                                return __awaiter(_this, void 0, void 0, function () {\n                                  var response, error_2;\n                                  return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                      case 0:\n                                        _a.trys.push([0, 2,, 4]);\n\n                                        logger.debug(\"Attempting mutation with authMode: \" + operationAuthModes_1[authModeAttempts_1]);\n                                        return [4\n                                        /*yield*/\n                                        , this.jitteredRetry(namespaceName, model, operation, data, condition, modelConstructor, this.MutationEvent, head, operationAuthModes_1[authModeAttempts_1], onTerminate)];\n\n                                      case 1:\n                                        response = _a.sent();\n                                        logger.debug(\"Mutation sent successfully with authMode: \" + operationAuthModes_1[authModeAttempts_1]);\n                                        return [2\n                                        /*return*/\n                                        , response];\n\n                                      case 2:\n                                        error_2 = _a.sent();\n                                        authModeAttempts_1++;\n\n                                        if (authModeAttempts_1 >= operationAuthModes_1.length) {\n                                          logger.debug(\"Mutation failed with authMode: \" + operationAuthModes_1[authModeAttempts_1 - 1]);\n                                          throw error_2;\n                                        }\n\n                                        logger.debug(\"Mutation failed with authMode: \" + operationAuthModes_1[authModeAttempts_1 - 1] + \". Retrying with authMode: \" + operationAuthModes_1[authModeAttempts_1]);\n                                        return [4\n                                        /*yield*/\n                                        , authModeRetry_1()];\n\n                                      case 3:\n                                        return [2\n                                        /*return*/\n                                        , _a.sent()];\n\n                                      case 4:\n                                        return [2\n                                        /*return*/\n                                        ];\n                                    }\n                                  });\n                                });\n                              };\n\n                              return [4\n                              /*yield*/\n                              , authModeRetry_1()];\n\n                            case 3:\n                              _a = __read.apply(void 0, [_b.sent(), 3]), result = _a[0], opName = _a[1], modelDefinition = _a[2];\n                              return [3\n                              /*break*/\n                              , 5];\n\n                            case 4:\n                              error_1 = _b.sent();\n\n                              if (error_1.message === 'Offline' || error_1.message === 'RetryMutation') {\n                                return [2\n                                /*return*/\n                                , \"continue\"];\n                              }\n\n                              return [3\n                              /*break*/\n                              , 5];\n\n                            case 5:\n                              if (!(result === undefined)) return [3\n                              /*break*/\n                              , 7];\n                              logger.debug('done retrying');\n                              return [4\n                              /*yield*/\n                              , this_1.storage.runExclusive(function (storage) {\n                                return __awaiter(_this, void 0, void 0, function () {\n                                  return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                      case 0:\n                                        return [4\n                                        /*yield*/\n                                        , this.outbox.dequeue(storage)];\n\n                                      case 1:\n                                        _a.sent();\n\n                                        return [2\n                                        /*return*/\n                                        ];\n                                    }\n                                  });\n                                });\n                              })];\n\n                            case 6:\n                              _b.sent();\n\n                              return [2\n                              /*return*/\n                              , \"continue\"];\n\n                            case 7:\n                              record = result.data[opName];\n                              hasMore = false;\n                              return [4\n                              /*yield*/\n                              , this_1.storage.runExclusive(function (storage) {\n                                return __awaiter(_this, void 0, void 0, function () {\n                                  return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                      case 0:\n                                        // using runExclusive to prevent possible race condition\n                                        // when another record gets enqueued between dequeue and peek\n                                        return [4\n                                        /*yield*/\n                                        , this.outbox.dequeue(storage, record, operation)];\n\n                                      case 1:\n                                        // using runExclusive to prevent possible race condition\n                                        // when another record gets enqueued between dequeue and peek\n                                        _a.sent();\n\n                                        return [4\n                                        /*yield*/\n                                        , this.outbox.peek(storage)];\n\n                                      case 2:\n                                        hasMore = _a.sent() !== undefined;\n                                        return [2\n                                        /*return*/\n                                        ];\n                                    }\n                                  });\n                                });\n                              })];\n\n                            case 8:\n                              _b.sent();\n\n                              this_1.observer.next({\n                                operation: operation,\n                                modelDefinition: modelDefinition,\n                                model: record,\n                                hasMore: hasMore\n                              });\n                              return [2\n                              /*return*/\n                              ];\n                          }\n                        });\n                      };\n\n                      this_1 = this;\n                      _b.label = 1;\n\n                    case 1:\n                      _a = this.processing && this.runningProcesses.isOpen;\n                      if (!_a) return [3\n                      /*break*/\n                      , 3];\n                      return [4\n                      /*yield*/\n                      , this.outbox.peek(this.storage)];\n\n                    case 2:\n                      _a = (head = _b.sent()) !== undefined;\n                      _b.label = 3;\n\n                    case 3:\n                      if (!_a) return [3\n                      /*break*/\n                      , 5];\n                      return [5\n                      /*yield**/\n                      , _loop_1()];\n\n                    case 4:\n                      _b.sent();\n\n                      return [3\n                      /*break*/\n                      , 1];\n\n                    case 5:\n                      // pauses itself\n                      this.pause();\n                      return [2\n                      /*return*/\n                      ];\n                  }\n                });\n              });\n            }, 'mutation resume loop')];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  MutationProcessor.prototype.jitteredRetry = function (namespaceName, model, operation, data, condition, modelConstructor, MutationEvent, mutationEvent, authMode, onTerminate) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , retry(function (model, operation, data, condition, modelConstructor, MutationEvent, mutationEvent) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var _a, query, variables, graphQLCondition, opName, modelDefinition, authToken, tryWith, attempt, opType, result, err_1, _b, error, _c, _d, code, retryWith, err_2, _e, _f, opName_1, query_1, authToken_1, serverData, namespace, updatedMutation;\n\n                var _g;\n\n                return __generator(this, function (_h) {\n                  switch (_h.label) {\n                    case 0:\n                      _a = __read(this.createQueryVariables(namespaceName, model, operation, data, condition), 5), query = _a[0], variables = _a[1], graphQLCondition = _a[2], opName = _a[3], modelDefinition = _a[4];\n                      return [4\n                      /*yield*/\n                      , getTokenForCustomAuth(authMode, this.amplifyConfig)];\n\n                    case 1:\n                      authToken = _h.sent();\n                      tryWith = {\n                        query: query,\n                        variables: variables,\n                        authMode: authMode,\n                        authToken: authToken,\n                        userAgentSuffix: USER_AGENT_SUFFIX_DATASTORE\n                      };\n                      attempt = 0;\n                      opType = this.opTypeFromTransformerOperation(operation);\n                      _h.label = 2;\n\n                    case 2:\n                      _h.trys.push([2, 4,, 17]);\n\n                      return [4\n                      /*yield*/\n                      , this.amplifyContext.API.graphql(tryWith)];\n\n                    case 3:\n                      result = _h.sent(); // `as any` because TypeScript doesn't seem to like passing tuples\n                      // through generic params???\n\n                      return [2\n                      /*return*/\n                      , [result, opName, modelDefinition]];\n\n                    case 4:\n                      err_1 = _h.sent();\n                      if (!(err_1.errors && err_1.errors.length > 0)) return [3\n                      /*break*/\n                      , 15];\n                      _b = __read(err_1.errors, 1), error = _b[0];\n                      _c = error.originalError, _d = (_c === void 0 ? {} : _c).code, code = _d === void 0 ? null : _d;\n\n                      if (error.errorType === 'Unauthorized') {\n                        throw new NonRetryableError('Unauthorized');\n                      }\n\n                      if (error.message === 'Network Error' || code === 'ECONNABORTED' // refers to axios timeout error caused by device's bad network condition\n                      ) {\n                          if (!this.processing) {\n                            throw new NonRetryableError('Offline');\n                          } // TODO: Check errors on different env (react-native or other browsers)\n\n\n                          throw new Error('Network Error');\n                        }\n\n                      if (!(error.errorType === 'ConflictUnhandled')) return [3\n                      /*break*/\n                      , 13]; // TODO: add on ConflictConditionalCheck error query last from server\n\n                      attempt++;\n                      retryWith = void 0;\n                      if (!(attempt > MAX_ATTEMPTS)) return [3\n                      /*break*/\n                      , 5];\n                      retryWith = DISCARD;\n                      return [3\n                      /*break*/\n                      , 8];\n\n                    case 5:\n                      _h.trys.push([5, 7,, 8]);\n\n                      return [4\n                      /*yield*/\n                      , this.conflictHandler({\n                        modelConstructor: modelConstructor,\n                        localModel: this.modelInstanceCreator(modelConstructor, variables.input),\n                        remoteModel: this.modelInstanceCreator(modelConstructor, error.data),\n                        operation: opType,\n                        attempts: attempt\n                      })];\n\n                    case 6:\n                      retryWith = _h.sent();\n                      return [3\n                      /*break*/\n                      , 8];\n\n                    case 7:\n                      err_2 = _h.sent();\n                      logger.warn('conflict trycatch', err_2);\n                      return [3\n                      /*break*/\n                      , 17];\n\n                    case 8:\n                      if (!(retryWith === DISCARD)) return [3\n                      /*break*/\n                      , 11];\n                      _e = __read(buildGraphQLOperation(this.schema.namespaces[namespaceName], modelDefinition, 'GET'), 1), _f = __read(_e[0], 3), opName_1 = _f[1], query_1 = _f[2];\n                      return [4\n                      /*yield*/\n                      , getTokenForCustomAuth(authMode, this.amplifyConfig)];\n\n                    case 9:\n                      authToken_1 = _h.sent();\n                      return [4\n                      /*yield*/\n                      , this.amplifyContext.API.graphql({\n                        query: query_1,\n                        variables: {\n                          id: variables.input.id\n                        },\n                        authMode: authMode,\n                        authToken: authToken_1,\n                        userAgentSuffix: USER_AGENT_SUFFIX_DATASTORE\n                      })];\n\n                    case 10:\n                      serverData = _h.sent(); // onTerminate cancel graphql()\n\n                      return [2\n                      /*return*/\n                      , [serverData, opName_1, modelDefinition]];\n\n                    case 11:\n                      namespace = this.schema.namespaces[namespaceName];\n                      updatedMutation = createMutationInstanceFromModelOperation(namespace.relationships, modelDefinition, opType, modelConstructor, retryWith, graphQLCondition, MutationEvent, this.modelInstanceCreator, mutationEvent.id);\n                      return [4\n                      /*yield*/\n                      , this.storage.save(updatedMutation)];\n\n                    case 12:\n                      _h.sent();\n\n                      throw new NonRetryableError('RetryMutation');\n\n                    case 13:\n                      try {\n                        this.errorHandler({\n                          recoverySuggestion: 'Ensure app code is up to date, auth directives exist and are correct on each model, and that server-side data has not been invalidated by a schema change. If the problem persists, search for or create an issue: https://github.com/aws-amplify/amplify-js/issues',\n                          localModel: variables.input,\n                          message: error.message,\n                          operation: operation,\n                          errorType: getMutationErrorType(error),\n                          errorInfo: error.errorInfo,\n                          process: ProcessName.mutate,\n                          cause: error,\n                          remoteModel: error.data ? this.modelInstanceCreator(modelConstructor, error.data) : null\n                        });\n                      } catch (err) {\n                        logger.warn('Mutation error handler failed with:', err);\n                      } finally {\n                        // Return empty tuple, dequeues the mutation\n                        return [2\n                        /*return*/\n                        , error.data ? [{\n                          data: (_g = {}, _g[opName] = error.data, _g)\n                        }, opName, modelDefinition] : []];\n                      }\n\n                      _h.label = 14;\n\n                    case 14:\n                      return [3\n                      /*break*/\n                      , 16];\n\n                    case 15:\n                      // Catch-all for client-side errors that don't come back in the `GraphQLError` format.\n                      // These errors should not be retried.\n                      throw new NonRetryableError(err_1);\n\n                    case 16:\n                      return [3\n                      /*break*/\n                      , 17];\n\n                    case 17:\n                      if (tryWith) return [3\n                      /*break*/\n                      , 2];\n                      _h.label = 18;\n\n                    case 18:\n                      return [2\n                      /*return*/\n                      ];\n                  }\n                });\n              });\n            }, [model, operation, data, condition, modelConstructor, MutationEvent, mutationEvent], safeJitteredBackoff, onTerminate)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  MutationProcessor.prototype.createQueryVariables = function (namespaceName, model, operation, data, condition) {\n    var e_1, _a, e_2, _b, e_3, _c;\n\n    var modelDefinition = this.schema.namespaces[namespaceName].models[model];\n    var primaryKey = this.schema.namespaces[namespaceName].keys[model].primaryKey;\n    var queriesTuples = this.typeQuery.get(modelDefinition);\n\n    var _d = __read(queriesTuples.find(function (_a) {\n      var _b = __read(_a, 1),\n          transformerMutationType = _b[0];\n\n      return transformerMutationType === operation;\n    }), 3),\n        opName = _d[1],\n        query = _d[2];\n\n    var _e = JSON.parse(data),\n        _version = _e._version,\n        parsedData = __rest(_e, [\"_version\"]); // include all the fields that comprise a custom PK if one is specified\n\n\n    var deleteInput = {};\n\n    if (primaryKey === null || primaryKey === void 0 ? void 0 : primaryKey.length) {\n      try {\n        for (var primaryKey_1 = __values(primaryKey), primaryKey_1_1 = primaryKey_1.next(); !primaryKey_1_1.done; primaryKey_1_1 = primaryKey_1.next()) {\n          var pkField = primaryKey_1_1.value;\n          deleteInput[pkField] = parsedData[pkField];\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (primaryKey_1_1 && !primaryKey_1_1.done && (_a = primaryKey_1.return)) _a.call(primaryKey_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    } else {\n      deleteInput[ID] = parsedData.id;\n    }\n\n    var mutationInput;\n\n    if (operation === TransformerMutationType.DELETE) {\n      // For DELETE mutations, only the key(s) are included in the input\n      mutationInput = deleteInput;\n    } else {\n      // Otherwise, we construct the mutation input with the following logic\n      mutationInput = {};\n      var modelFields = Object.values(modelDefinition.fields);\n\n      try {\n        for (var modelFields_1 = __values(modelFields), modelFields_1_1 = modelFields_1.next(); !modelFields_1_1.done; modelFields_1_1 = modelFields_1.next()) {\n          var _f = modelFields_1_1.value,\n              name_1 = _f.name,\n              type = _f.type,\n              association = _f.association; // model fields should be stripped out from the input\n\n          if (isModelFieldType(type)) {\n            // except for belongs to relations - we need to replace them with the correct foreign key(s)\n            if (isTargetNameAssociation(association) && association.connectionType === 'BELONGS_TO') {\n              var targetNames = extractTargetNamesFromSrc(association);\n\n              if (targetNames) {\n                try {\n                  // instead of including the connected model itself, we add its key(s) to the mutation input\n                  for (var targetNames_1 = (e_3 = void 0, __values(targetNames)), targetNames_1_1 = targetNames_1.next(); !targetNames_1_1.done; targetNames_1_1 = targetNames_1.next()) {\n                    var targetName = targetNames_1_1.value;\n                    mutationInput[targetName] = parsedData[targetName];\n                  }\n                } catch (e_3_1) {\n                  e_3 = {\n                    error: e_3_1\n                  };\n                } finally {\n                  try {\n                    if (targetNames_1_1 && !targetNames_1_1.done && (_c = targetNames_1.return)) _c.call(targetNames_1);\n                  } finally {\n                    if (e_3) throw e_3.error;\n                  }\n                }\n              }\n            }\n\n            continue;\n          } // scalar fields / non-model types\n\n\n          if (operation === TransformerMutationType.UPDATE) {\n            if (!parsedData.hasOwnProperty(name_1)) {\n              // for update mutations - strip out a field if it's unchanged\n              continue;\n            }\n          } // all other fields are added to the input object\n\n\n          mutationInput[name_1] = parsedData[name_1];\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (modelFields_1_1 && !modelFields_1_1.done && (_b = modelFields_1.return)) _b.call(modelFields_1);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n    } // Build mutation variables input object\n\n\n    var input = __assign(__assign({}, mutationInput), {\n      _version: _version\n    });\n\n    var graphQLCondition = JSON.parse(condition);\n\n    var variables = __assign({\n      input: input\n    }, operation === TransformerMutationType.CREATE ? {} : {\n      condition: Object.keys(graphQLCondition).length > 0 ? graphQLCondition : null\n    });\n\n    return [query, variables, graphQLCondition, opName, modelDefinition];\n  };\n\n  MutationProcessor.prototype.opTypeFromTransformerOperation = function (operation) {\n    switch (operation) {\n      case TransformerMutationType.CREATE:\n        return OpType.INSERT;\n\n      case TransformerMutationType.DELETE:\n        return OpType.DELETE;\n\n      case TransformerMutationType.UPDATE:\n        return OpType.UPDATE;\n\n      case TransformerMutationType.GET:\n        // Intentionally blank\n        break;\n\n      default:\n        exhaustiveCheck(operation);\n    }\n  };\n\n  MutationProcessor.prototype.pause = function () {\n    this.processing = false;\n  };\n\n  return MutationProcessor;\n}();\n\nvar MAX_RETRY_DELAY_MS = 5 * 60 * 1000;\nvar originalJitteredBackoff = jitteredBackoff(MAX_RETRY_DELAY_MS);\n/**\n * @private\n * Internal use of Amplify only.\n *\n * Wraps the jittered backoff calculation to retry Network Errors indefinitely.\n * Backs off according to original jittered retry logic until the original retry\n * logic hits its max. After this occurs, if the error is a Network Error, we\n * ignore the attempt count and return MAX_RETRY_DELAY_MS to retry forever (until\n * the request succeeds).\n *\n * @param attempt ignored\n * @param _args ignored\n * @param error tested to see if `.message` is 'Network Error'\n * @returns number | false :\n */\n\nexport var safeJitteredBackoff = function (attempt, _args, error) {\n  var attemptResult = originalJitteredBackoff(attempt); // If this is the last attempt and it is a network error, we retry indefinitively every 5 minutes\n\n  if (attemptResult === false && (error === null || error === void 0 ? void 0 : error.message) === 'Network Error') {\n    return MAX_RETRY_DELAY_MS;\n  }\n\n  return attemptResult;\n};\nexport { MutationProcessor };","map":{"version":3,"sources":["../../../src/sync/processors/mutation.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport API from '@aws-amplify/api';\nimport { ConsoleLogger as Logger, jitteredBackoff, NonRetryableError, retry, BackgroundProcessManager, } from '@aws-amplify/core';\nimport Observable from 'zen-observable-ts';\nimport { DISCARD, isModelFieldType, isTargetNameAssociation, OpType, ProcessName, } from '../../types';\nimport { exhaustiveCheck, extractTargetNamesFromSrc, USER, USER_AGENT_SUFFIX_DATASTORE, ID, } from '../../util';\nimport { buildGraphQLOperation, createMutationInstanceFromModelOperation, getModelAuthModes, TransformerMutationType, getTokenForCustomAuth, } from '../utils';\nimport { getMutationErrorType } from './errorMaps';\nvar MAX_ATTEMPTS = 10;\nvar logger = new Logger('DataStore');\nvar MutationProcessor = /** @class */ (function () {\n    function MutationProcessor(schema, storage, userClasses, outbox, modelInstanceCreator, MutationEvent, amplifyConfig, authModeStrategy, errorHandler, conflictHandler, amplifyContext) {\n        if (amplifyConfig === void 0) { amplifyConfig = {}; }\n        this.schema = schema;\n        this.storage = storage;\n        this.userClasses = userClasses;\n        this.outbox = outbox;\n        this.modelInstanceCreator = modelInstanceCreator;\n        this.MutationEvent = MutationEvent;\n        this.amplifyConfig = amplifyConfig;\n        this.authModeStrategy = authModeStrategy;\n        this.errorHandler = errorHandler;\n        this.conflictHandler = conflictHandler;\n        this.amplifyContext = amplifyContext;\n        this.typeQuery = new WeakMap();\n        this.processing = false;\n        this.runningProcesses = new BackgroundProcessManager();\n        this.amplifyContext.API = this.amplifyContext.API || API;\n        this.generateQueries();\n    }\n    MutationProcessor.prototype.generateQueries = function () {\n        var _this = this;\n        Object.values(this.schema.namespaces).forEach(function (namespace) {\n            Object.values(namespace.models)\n                .filter(function (_a) {\n                var syncable = _a.syncable;\n                return syncable;\n            })\n                .forEach(function (model) {\n                var _a = __read(buildGraphQLOperation(namespace, model, 'CREATE'), 1), createMutation = _a[0];\n                var _b = __read(buildGraphQLOperation(namespace, model, 'UPDATE'), 1), updateMutation = _b[0];\n                var _c = __read(buildGraphQLOperation(namespace, model, 'DELETE'), 1), deleteMutation = _c[0];\n                _this.typeQuery.set(model, [\n                    createMutation,\n                    updateMutation,\n                    deleteMutation,\n                ]);\n            });\n        });\n    };\n    MutationProcessor.prototype.isReady = function () {\n        return this.observer !== undefined;\n    };\n    MutationProcessor.prototype.start = function () {\n        var _this = this;\n        var observable = new Observable(function (observer) {\n            _this.observer = observer;\n            try {\n                _this.resume();\n            }\n            catch (error) {\n                logger.error('mutations processor start error', error);\n                throw error;\n            }\n            return _this.runningProcesses.addCleaner(function () { return __awaiter(_this, void 0, void 0, function () {\n                return __generator(this, function (_a) {\n                    this.pause();\n                    return [2 /*return*/];\n                });\n            }); });\n        });\n        return observable;\n    };\n    MutationProcessor.prototype.stop = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.runningProcesses.close()];\n                    case 1:\n                        _a.sent();\n                        return [4 /*yield*/, this.runningProcesses.open()];\n                    case 2:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    MutationProcessor.prototype.resume = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, (this.runningProcesses.isOpen &&\n                            this.runningProcesses.add(function (onTerminate) { return __awaiter(_this, void 0, void 0, function () {\n                                var head, namespaceName, _loop_1, this_1, _a;\n                                var _this = this;\n                                return __generator(this, function (_b) {\n                                    switch (_b.label) {\n                                        case 0:\n                                            if (this.processing ||\n                                                !this.isReady() ||\n                                                !this.runningProcesses.isOpen) {\n                                                return [2 /*return*/];\n                                            }\n                                            this.processing = true;\n                                            namespaceName = USER;\n                                            _loop_1 = function () {\n                                                var model, operation, data, condition, modelConstructor, result, opName, modelDefinition, modelAuthModes, operationAuthModes_1, authModeAttempts_1, authModeRetry_1, error_1, record, hasMore;\n                                                var _a;\n                                                return __generator(this, function (_b) {\n                                                    switch (_b.label) {\n                                                        case 0:\n                                                            model = head.model, operation = head.operation, data = head.data, condition = head.condition;\n                                                            modelConstructor = this_1.userClasses[model];\n                                                            result = void 0;\n                                                            opName = void 0;\n                                                            modelDefinition = void 0;\n                                                            _b.label = 1;\n                                                        case 1:\n                                                            _b.trys.push([1, 4, , 5]);\n                                                            return [4 /*yield*/, getModelAuthModes({\n                                                                    authModeStrategy: this_1.authModeStrategy,\n                                                                    defaultAuthMode: this_1.amplifyConfig.aws_appsync_authenticationType,\n                                                                    modelName: model,\n                                                                    schema: this_1.schema,\n                                                                })];\n                                                        case 2:\n                                                            modelAuthModes = _b.sent();\n                                                            operationAuthModes_1 = modelAuthModes[operation.toUpperCase()];\n                                                            authModeAttempts_1 = 0;\n                                                            authModeRetry_1 = function () { return __awaiter(_this, void 0, void 0, function () {\n                                                                var response, error_2;\n                                                                return __generator(this, function (_a) {\n                                                                    switch (_a.label) {\n                                                                        case 0:\n                                                                            _a.trys.push([0, 2, , 4]);\n                                                                            logger.debug(\"Attempting mutation with authMode: \" + operationAuthModes_1[authModeAttempts_1]);\n                                                                            return [4 /*yield*/, this.jitteredRetry(namespaceName, model, operation, data, condition, modelConstructor, this.MutationEvent, head, operationAuthModes_1[authModeAttempts_1], onTerminate)];\n                                                                        case 1:\n                                                                            response = _a.sent();\n                                                                            logger.debug(\"Mutation sent successfully with authMode: \" + operationAuthModes_1[authModeAttempts_1]);\n                                                                            return [2 /*return*/, response];\n                                                                        case 2:\n                                                                            error_2 = _a.sent();\n                                                                            authModeAttempts_1++;\n                                                                            if (authModeAttempts_1 >= operationAuthModes_1.length) {\n                                                                                logger.debug(\"Mutation failed with authMode: \" + operationAuthModes_1[authModeAttempts_1 - 1]);\n                                                                                throw error_2;\n                                                                            }\n                                                                            logger.debug(\"Mutation failed with authMode: \" + operationAuthModes_1[authModeAttempts_1 - 1] + \". Retrying with authMode: \" + operationAuthModes_1[authModeAttempts_1]);\n                                                                            return [4 /*yield*/, authModeRetry_1()];\n                                                                        case 3: return [2 /*return*/, _a.sent()];\n                                                                        case 4: return [2 /*return*/];\n                                                                    }\n                                                                });\n                                                            }); };\n                                                            return [4 /*yield*/, authModeRetry_1()];\n                                                        case 3:\n                                                            _a = __read.apply(void 0, [_b.sent(), 3]), result = _a[0], opName = _a[1], modelDefinition = _a[2];\n                                                            return [3 /*break*/, 5];\n                                                        case 4:\n                                                            error_1 = _b.sent();\n                                                            if (error_1.message === 'Offline' ||\n                                                                error_1.message === 'RetryMutation') {\n                                                                return [2 /*return*/, \"continue\"];\n                                                            }\n                                                            return [3 /*break*/, 5];\n                                                        case 5:\n                                                            if (!(result === undefined)) return [3 /*break*/, 7];\n                                                            logger.debug('done retrying');\n                                                            return [4 /*yield*/, this_1.storage.runExclusive(function (storage) { return __awaiter(_this, void 0, void 0, function () {\n                                                                    return __generator(this, function (_a) {\n                                                                        switch (_a.label) {\n                                                                            case 0: return [4 /*yield*/, this.outbox.dequeue(storage)];\n                                                                            case 1:\n                                                                                _a.sent();\n                                                                                return [2 /*return*/];\n                                                                        }\n                                                                    });\n                                                                }); })];\n                                                        case 6:\n                                                            _b.sent();\n                                                            return [2 /*return*/, \"continue\"];\n                                                        case 7:\n                                                            record = result.data[opName];\n                                                            hasMore = false;\n                                                            return [4 /*yield*/, this_1.storage.runExclusive(function (storage) { return __awaiter(_this, void 0, void 0, function () {\n                                                                    return __generator(this, function (_a) {\n                                                                        switch (_a.label) {\n                                                                            case 0: \n                                                                            // using runExclusive to prevent possible race condition\n                                                                            // when another record gets enqueued between dequeue and peek\n                                                                            return [4 /*yield*/, this.outbox.dequeue(storage, record, operation)];\n                                                                            case 1:\n                                                                                // using runExclusive to prevent possible race condition\n                                                                                // when another record gets enqueued between dequeue and peek\n                                                                                _a.sent();\n                                                                                return [4 /*yield*/, this.outbox.peek(storage)];\n                                                                            case 2:\n                                                                                hasMore = (_a.sent()) !== undefined;\n                                                                                return [2 /*return*/];\n                                                                        }\n                                                                    });\n                                                                }); })];\n                                                        case 8:\n                                                            _b.sent();\n                                                            this_1.observer.next({\n                                                                operation: operation,\n                                                                modelDefinition: modelDefinition,\n                                                                model: record,\n                                                                hasMore: hasMore,\n                                                            });\n                                                            return [2 /*return*/];\n                                                    }\n                                                });\n                                            };\n                                            this_1 = this;\n                                            _b.label = 1;\n                                        case 1:\n                                            _a = this.processing &&\n                                                this.runningProcesses.isOpen;\n                                            if (!_a) return [3 /*break*/, 3];\n                                            return [4 /*yield*/, this.outbox.peek(this.storage)];\n                                        case 2:\n                                            _a = (head = _b.sent()) !== undefined;\n                                            _b.label = 3;\n                                        case 3:\n                                            if (!_a) return [3 /*break*/, 5];\n                                            return [5 /*yield**/, _loop_1()];\n                                        case 4:\n                                            _b.sent();\n                                            return [3 /*break*/, 1];\n                                        case 5:\n                                            // pauses itself\n                                            this.pause();\n                                            return [2 /*return*/];\n                                    }\n                                });\n                            }); }, 'mutation resume loop'))];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    MutationProcessor.prototype.jitteredRetry = function (namespaceName, model, operation, data, condition, modelConstructor, MutationEvent, mutationEvent, authMode, onTerminate) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, retry(function (model, operation, data, condition, modelConstructor, MutationEvent, mutationEvent) { return __awaiter(_this, void 0, void 0, function () {\n                            var _a, query, variables, graphQLCondition, opName, modelDefinition, authToken, tryWith, attempt, opType, result, err_1, _b, error, _c, _d, code, retryWith, err_2, _e, _f, opName_1, query_1, authToken_1, serverData, namespace, updatedMutation;\n                            var _g;\n                            return __generator(this, function (_h) {\n                                switch (_h.label) {\n                                    case 0:\n                                        _a = __read(this.createQueryVariables(namespaceName, model, operation, data, condition), 5), query = _a[0], variables = _a[1], graphQLCondition = _a[2], opName = _a[3], modelDefinition = _a[4];\n                                        return [4 /*yield*/, getTokenForCustomAuth(authMode, this.amplifyConfig)];\n                                    case 1:\n                                        authToken = _h.sent();\n                                        tryWith = {\n                                            query: query,\n                                            variables: variables,\n                                            authMode: authMode,\n                                            authToken: authToken,\n                                            userAgentSuffix: USER_AGENT_SUFFIX_DATASTORE,\n                                        };\n                                        attempt = 0;\n                                        opType = this.opTypeFromTransformerOperation(operation);\n                                        _h.label = 2;\n                                    case 2:\n                                        _h.trys.push([2, 4, , 17]);\n                                        return [4 /*yield*/, this.amplifyContext.API.graphql(tryWith)];\n                                    case 3:\n                                        result = (_h.sent());\n                                        // `as any` because TypeScript doesn't seem to like passing tuples\n                                        // through generic params???\n                                        return [2 /*return*/, [result, opName, modelDefinition]];\n                                    case 4:\n                                        err_1 = _h.sent();\n                                        if (!(err_1.errors && err_1.errors.length > 0)) return [3 /*break*/, 15];\n                                        _b = __read(err_1.errors, 1), error = _b[0];\n                                        _c = error.originalError, _d = (_c === void 0 ? {} : _c).code, code = _d === void 0 ? null : _d;\n                                        if (error.errorType === 'Unauthorized') {\n                                            throw new NonRetryableError('Unauthorized');\n                                        }\n                                        if (error.message === 'Network Error' ||\n                                            code === 'ECONNABORTED' // refers to axios timeout error caused by device's bad network condition\n                                        ) {\n                                            if (!this.processing) {\n                                                throw new NonRetryableError('Offline');\n                                            }\n                                            // TODO: Check errors on different env (react-native or other browsers)\n                                            throw new Error('Network Error');\n                                        }\n                                        if (!(error.errorType === 'ConflictUnhandled')) return [3 /*break*/, 13];\n                                        // TODO: add on ConflictConditionalCheck error query last from server\n                                        attempt++;\n                                        retryWith = void 0;\n                                        if (!(attempt > MAX_ATTEMPTS)) return [3 /*break*/, 5];\n                                        retryWith = DISCARD;\n                                        return [3 /*break*/, 8];\n                                    case 5:\n                                        _h.trys.push([5, 7, , 8]);\n                                        return [4 /*yield*/, this.conflictHandler({\n                                                modelConstructor: modelConstructor,\n                                                localModel: this.modelInstanceCreator(modelConstructor, variables.input),\n                                                remoteModel: this.modelInstanceCreator(modelConstructor, error.data),\n                                                operation: opType,\n                                                attempts: attempt,\n                                            })];\n                                    case 6:\n                                        retryWith = _h.sent();\n                                        return [3 /*break*/, 8];\n                                    case 7:\n                                        err_2 = _h.sent();\n                                        logger.warn('conflict trycatch', err_2);\n                                        return [3 /*break*/, 17];\n                                    case 8:\n                                        if (!(retryWith === DISCARD)) return [3 /*break*/, 11];\n                                        _e = __read(buildGraphQLOperation(this.schema.namespaces[namespaceName], modelDefinition, 'GET'), 1), _f = __read(_e[0], 3), opName_1 = _f[1], query_1 = _f[2];\n                                        return [4 /*yield*/, getTokenForCustomAuth(authMode, this.amplifyConfig)];\n                                    case 9:\n                                        authToken_1 = _h.sent();\n                                        return [4 /*yield*/, this.amplifyContext.API.graphql({\n                                                query: query_1,\n                                                variables: { id: variables.input.id },\n                                                authMode: authMode,\n                                                authToken: authToken_1,\n                                                userAgentSuffix: USER_AGENT_SUFFIX_DATASTORE,\n                                            })];\n                                    case 10:\n                                        serverData = _h.sent();\n                                        // onTerminate cancel graphql()\n                                        return [2 /*return*/, [serverData, opName_1, modelDefinition]];\n                                    case 11:\n                                        namespace = this.schema.namespaces[namespaceName];\n                                        updatedMutation = createMutationInstanceFromModelOperation(namespace.relationships, modelDefinition, opType, modelConstructor, retryWith, graphQLCondition, MutationEvent, this.modelInstanceCreator, mutationEvent.id);\n                                        return [4 /*yield*/, this.storage.save(updatedMutation)];\n                                    case 12:\n                                        _h.sent();\n                                        throw new NonRetryableError('RetryMutation');\n                                    case 13:\n                                        try {\n                                            this.errorHandler({\n                                                recoverySuggestion: 'Ensure app code is up to date, auth directives exist and are correct on each model, and that server-side data has not been invalidated by a schema change. If the problem persists, search for or create an issue: https://github.com/aws-amplify/amplify-js/issues',\n                                                localModel: variables.input,\n                                                message: error.message,\n                                                operation: operation,\n                                                errorType: getMutationErrorType(error),\n                                                errorInfo: error.errorInfo,\n                                                process: ProcessName.mutate,\n                                                cause: error,\n                                                remoteModel: error.data\n                                                    ? this.modelInstanceCreator(modelConstructor, error.data)\n                                                    : null,\n                                            });\n                                        }\n                                        catch (err) {\n                                            logger.warn('Mutation error handler failed with:', err);\n                                        }\n                                        finally {\n                                            // Return empty tuple, dequeues the mutation\n                                            return [2 /*return*/, error.data\n                                                    ? [\n                                                        { data: (_g = {}, _g[opName] = error.data, _g) },\n                                                        opName,\n                                                        modelDefinition,\n                                                    ]\n                                                    : []];\n                                        }\n                                        _h.label = 14;\n                                    case 14: return [3 /*break*/, 16];\n                                    case 15: \n                                    // Catch-all for client-side errors that don't come back in the `GraphQLError` format.\n                                    // These errors should not be retried.\n                                    throw new NonRetryableError(err_1);\n                                    case 16: return [3 /*break*/, 17];\n                                    case 17:\n                                        if (tryWith) return [3 /*break*/, 2];\n                                        _h.label = 18;\n                                    case 18: return [2 /*return*/];\n                                }\n                            });\n                        }); }, [\n                            model,\n                            operation,\n                            data,\n                            condition,\n                            modelConstructor,\n                            MutationEvent,\n                            mutationEvent,\n                        ], safeJitteredBackoff, onTerminate)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    MutationProcessor.prototype.createQueryVariables = function (namespaceName, model, operation, data, condition) {\n        var e_1, _a, e_2, _b, e_3, _c;\n        var modelDefinition = this.schema.namespaces[namespaceName].models[model];\n        var primaryKey = this.schema.namespaces[namespaceName].keys[model].primaryKey;\n        var queriesTuples = this.typeQuery.get(modelDefinition);\n        var _d = __read(queriesTuples.find(function (_a) {\n            var _b = __read(_a, 1), transformerMutationType = _b[0];\n            return transformerMutationType === operation;\n        }), 3), opName = _d[1], query = _d[2];\n        var _e = JSON.parse(data), _version = _e._version, parsedData = __rest(_e, [\"_version\"]);\n        // include all the fields that comprise a custom PK if one is specified\n        var deleteInput = {};\n        if (primaryKey === null || primaryKey === void 0 ? void 0 : primaryKey.length) {\n            try {\n                for (var primaryKey_1 = __values(primaryKey), primaryKey_1_1 = primaryKey_1.next(); !primaryKey_1_1.done; primaryKey_1_1 = primaryKey_1.next()) {\n                    var pkField = primaryKey_1_1.value;\n                    deleteInput[pkField] = parsedData[pkField];\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (primaryKey_1_1 && !primaryKey_1_1.done && (_a = primaryKey_1.return)) _a.call(primaryKey_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        }\n        else {\n            deleteInput[ID] = parsedData.id;\n        }\n        var mutationInput;\n        if (operation === TransformerMutationType.DELETE) {\n            // For DELETE mutations, only the key(s) are included in the input\n            mutationInput = deleteInput;\n        }\n        else {\n            // Otherwise, we construct the mutation input with the following logic\n            mutationInput = {};\n            var modelFields = Object.values(modelDefinition.fields);\n            try {\n                for (var modelFields_1 = __values(modelFields), modelFields_1_1 = modelFields_1.next(); !modelFields_1_1.done; modelFields_1_1 = modelFields_1.next()) {\n                    var _f = modelFields_1_1.value, name_1 = _f.name, type = _f.type, association = _f.association;\n                    // model fields should be stripped out from the input\n                    if (isModelFieldType(type)) {\n                        // except for belongs to relations - we need to replace them with the correct foreign key(s)\n                        if (isTargetNameAssociation(association) &&\n                            association.connectionType === 'BELONGS_TO') {\n                            var targetNames = extractTargetNamesFromSrc(association);\n                            if (targetNames) {\n                                try {\n                                    // instead of including the connected model itself, we add its key(s) to the mutation input\n                                    for (var targetNames_1 = (e_3 = void 0, __values(targetNames)), targetNames_1_1 = targetNames_1.next(); !targetNames_1_1.done; targetNames_1_1 = targetNames_1.next()) {\n                                        var targetName = targetNames_1_1.value;\n                                        mutationInput[targetName] = parsedData[targetName];\n                                    }\n                                }\n                                catch (e_3_1) { e_3 = { error: e_3_1 }; }\n                                finally {\n                                    try {\n                                        if (targetNames_1_1 && !targetNames_1_1.done && (_c = targetNames_1.return)) _c.call(targetNames_1);\n                                    }\n                                    finally { if (e_3) throw e_3.error; }\n                                }\n                            }\n                        }\n                        continue;\n                    }\n                    // scalar fields / non-model types\n                    if (operation === TransformerMutationType.UPDATE) {\n                        if (!parsedData.hasOwnProperty(name_1)) {\n                            // for update mutations - strip out a field if it's unchanged\n                            continue;\n                        }\n                    }\n                    // all other fields are added to the input object\n                    mutationInput[name_1] = parsedData[name_1];\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (modelFields_1_1 && !modelFields_1_1.done && (_b = modelFields_1.return)) _b.call(modelFields_1);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n        }\n        // Build mutation variables input object\n        var input = __assign(__assign({}, mutationInput), { _version: _version });\n        var graphQLCondition = JSON.parse(condition);\n        var variables = __assign({ input: input }, (operation === TransformerMutationType.CREATE\n            ? {}\n            : {\n                condition: Object.keys(graphQLCondition).length > 0\n                    ? graphQLCondition\n                    : null,\n            }));\n        return [query, variables, graphQLCondition, opName, modelDefinition];\n    };\n    MutationProcessor.prototype.opTypeFromTransformerOperation = function (operation) {\n        switch (operation) {\n            case TransformerMutationType.CREATE:\n                return OpType.INSERT;\n            case TransformerMutationType.DELETE:\n                return OpType.DELETE;\n            case TransformerMutationType.UPDATE:\n                return OpType.UPDATE;\n            case TransformerMutationType.GET: // Intentionally blank\n                break;\n            default:\n                exhaustiveCheck(operation);\n        }\n    };\n    MutationProcessor.prototype.pause = function () {\n        this.processing = false;\n    };\n    return MutationProcessor;\n}());\nvar MAX_RETRY_DELAY_MS = 5 * 60 * 1000;\nvar originalJitteredBackoff = jitteredBackoff(MAX_RETRY_DELAY_MS);\n/**\n * @private\n * Internal use of Amplify only.\n *\n * Wraps the jittered backoff calculation to retry Network Errors indefinitely.\n * Backs off according to original jittered retry logic until the original retry\n * logic hits its max. After this occurs, if the error is a Network Error, we\n * ignore the attempt count and return MAX_RETRY_DELAY_MS to retry forever (until\n * the request succeeds).\n *\n * @param attempt ignored\n * @param _args ignored\n * @param error tested to see if `.message` is 'Network Error'\n * @returns number | false :\n */\nexport var safeJitteredBackoff = function (attempt, _args, error) {\n    var attemptResult = originalJitteredBackoff(attempt);\n    // If this is the last attempt and it is a network error, we retry indefinitively every 5 minutes\n    if (attemptResult === false && (error === null || error === void 0 ? void 0 : error.message) === 'Network Error') {\n        return MAX_RETRY_DELAY_MS;\n    }\n    return attemptResult;\n};\nexport { MutationProcessor };\n//# sourceMappingURL=mutation.js.map"]},"metadata":{},"sourceType":"module"}