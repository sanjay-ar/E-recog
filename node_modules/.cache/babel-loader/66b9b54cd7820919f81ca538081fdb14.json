{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n/*\n * Copyright 2017-2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\n\nimport Observable from 'zen-observable-ts';\nimport { GraphQLError } from 'graphql';\nimport * as url from 'url';\nimport { v4 as uuid } from 'uuid';\nimport { Buffer } from 'buffer';\nimport { Logger, Credentials, Signer, Hub, Constants, USER_AGENT_HEADER, jitteredExponentialRetry, NonRetryableError } from '@aws-amplify/core';\nimport Cache from '@aws-amplify/cache';\nimport Auth from '@aws-amplify/auth';\nimport { AbstractPubSubProvider } from '../PubSubProvider';\nimport { CONTROL_MSG } from '../../types/PubSub';\nimport { AMPLIFY_SYMBOL, AWS_APPSYNC_REALTIME_HEADERS, CONNECTION_INIT_TIMEOUT, DEFAULT_KEEP_ALIVE_TIMEOUT, DEFAULT_KEEP_ALIVE_ALERT_TIMEOUT, MAX_DELAY_MS, MESSAGE_TYPES, NON_RETRYABLE_CODES, SOCKET_STATUS, START_ACK_TIMEOUT, SUBSCRIPTION_STATUS, CONNECTION_STATE_CHANGE } from '../constants';\nimport { ConnectionStateMonitor, CONNECTION_CHANGE } from '../../utils/ConnectionStateMonitor';\nvar logger = new Logger('AWSAppSyncRealTimeProvider');\n\nvar dispatchApiEvent = function (event, data, message) {\n  Hub.dispatch('api', {\n    event: event,\n    data: data,\n    message: message\n  }, 'PubSub', AMPLIFY_SYMBOL);\n};\n\nvar standardDomainPattern = /^https:\\/\\/\\w{26}\\.appsync\\-api\\.\\w{2}(?:(?:\\-\\w{2,})+)\\-\\d\\.amazonaws.com\\/graphql$/i;\nvar customDomainPath = '/realtime';\n\nvar AWSAppSyncRealTimeProvider =\n/** @class */\nfunction (_super) {\n  __extends(AWSAppSyncRealTimeProvider, _super);\n\n  function AWSAppSyncRealTimeProvider(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _this = _super.call(this, options) || this;\n\n    _this.socketStatus = SOCKET_STATUS.CLOSED;\n    _this.keepAliveTimeout = DEFAULT_KEEP_ALIVE_TIMEOUT;\n    _this.subscriptionObserverMap = new Map();\n    _this.promiseArray = [];\n    _this.connectionStateMonitor = new ConnectionStateMonitor(); // Monitor the connection state and pass changes along to Hub\n\n    _this.connectionStateMonitor.connectionStateObservable.subscribe(function (ConnectionState) {\n      dispatchApiEvent(CONNECTION_STATE_CHANGE, {\n        provider: _this,\n        connectionState: ConnectionState\n      }, \"Connection state is \" + ConnectionState);\n    });\n\n    return _this;\n  }\n\n  AWSAppSyncRealTimeProvider.prototype.getNewWebSocket = function (url, protocol) {\n    return new WebSocket(url, protocol);\n  };\n\n  AWSAppSyncRealTimeProvider.prototype.getProviderName = function () {\n    return 'AWSAppSyncRealTimeProvider';\n  };\n\n  AWSAppSyncRealTimeProvider.prototype.newClient = function () {\n    throw new Error('Not used here');\n  };\n\n  AWSAppSyncRealTimeProvider.prototype.publish = function (_topics, _msg, _options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        throw new Error('Operation not supported');\n      });\n    });\n  }; // Check if url matches standard domain pattern\n\n\n  AWSAppSyncRealTimeProvider.prototype.isCustomDomain = function (url) {\n    return url.match(standardDomainPattern) === null;\n  };\n\n  AWSAppSyncRealTimeProvider.prototype.subscribe = function (_topics, options) {\n    var _this = this;\n\n    var appSyncGraphqlEndpoint = options === null || options === void 0 ? void 0 : options.appSyncGraphqlEndpoint;\n    return new Observable(function (observer) {\n      if (!options || !appSyncGraphqlEndpoint) {\n        observer.error({\n          errors: [__assign({}, new GraphQLError(\"Subscribe only available for AWS AppSync endpoint\"))]\n        });\n        observer.complete();\n      } else {\n        var subscriptionId_1 = uuid();\n\n        _this._startSubscriptionWithAWSAppSyncRealTime({\n          options: options,\n          observer: observer,\n          subscriptionId: subscriptionId_1\n        }).catch(function (err) {\n          observer.error({\n            errors: [__assign({}, new GraphQLError(CONTROL_MSG.REALTIME_SUBSCRIPTION_INIT_ERROR + \": \" + err))]\n          });\n\n          _this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n\n          observer.complete();\n        });\n\n        return function () {\n          return __awaiter(_this, void 0, void 0, function () {\n            var subscriptionState, err_1;\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  _a.trys.push([0, 2, 3, 4]); // Waiting that subscription has been connected before trying to unsubscribe\n\n\n                  return [4\n                  /*yield*/\n                  , this._waitForSubscriptionToBeConnected(subscriptionId_1)];\n\n                case 1:\n                  // Waiting that subscription has been connected before trying to unsubscribe\n                  _a.sent();\n\n                  subscriptionState = (this.subscriptionObserverMap.get(subscriptionId_1) || {}).subscriptionState;\n\n                  if (!subscriptionState) {\n                    // subscription already unsubscribed\n                    return [2\n                    /*return*/\n                    ];\n                  }\n\n                  if (subscriptionState === SUBSCRIPTION_STATUS.CONNECTED) {\n                    this._sendUnsubscriptionMessage(subscriptionId_1);\n                  } else {\n                    throw new Error('Subscription never connected');\n                  }\n\n                  return [3\n                  /*break*/\n                  , 4];\n\n                case 2:\n                  err_1 = _a.sent();\n                  logger.debug(\"Error while unsubscribing \" + err_1);\n                  return [3\n                  /*break*/\n                  , 4];\n\n                case 3:\n                  this._removeSubscriptionObserver(subscriptionId_1);\n\n                  return [7\n                  /*endfinally*/\n                  ];\n\n                case 4:\n                  return [2\n                  /*return*/\n                  ];\n              }\n            });\n          });\n        };\n      }\n    });\n  };\n\n  Object.defineProperty(AWSAppSyncRealTimeProvider.prototype, \"isSSLEnabled\", {\n    get: function () {\n      return !this.options.aws_appsync_dangerously_connect_to_http_endpoint_for_testing;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  AWSAppSyncRealTimeProvider.prototype._startSubscriptionWithAWSAppSyncRealTime = function (_a) {\n    var options = _a.options,\n        observer = _a.observer,\n        subscriptionId = _a.subscriptionId;\n\n    var _b, _c;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var appSyncGraphqlEndpoint, authenticationType, query, variables, apiKey, region, _d, graphql_headers, _e, additionalHeaders, subscriptionState, data, dataString, headerObj, _f, _g, subscriptionMessage, stringToAWSRealTime, err_2, message, subscriptionFailedCallback_1, _h, subscriptionFailedCallback, subscriptionReadyCallback;\n\n      var _j;\n\n      var _this = this;\n\n      return __generator(this, function (_k) {\n        switch (_k.label) {\n          case 0:\n            appSyncGraphqlEndpoint = options.appSyncGraphqlEndpoint, authenticationType = options.authenticationType, query = options.query, variables = options.variables, apiKey = options.apiKey, region = options.region, _d = options.graphql_headers, graphql_headers = _d === void 0 ? function () {\n              return {};\n            } : _d, _e = options.additionalHeaders, additionalHeaders = _e === void 0 ? {} : _e;\n            subscriptionState = SUBSCRIPTION_STATUS.PENDING;\n            data = {\n              query: query,\n              variables: variables\n            }; // Having a subscription id map will make it simple to forward messages received\n\n            this.subscriptionObserverMap.set(subscriptionId, {\n              observer: observer,\n              query: query !== null && query !== void 0 ? query : '',\n              variables: variables !== null && variables !== void 0 ? variables : {},\n              subscriptionState: subscriptionState,\n              startAckTimeoutId: undefined\n            });\n            dataString = JSON.stringify(data);\n            _f = [{}];\n            return [4\n            /*yield*/\n            , this._awsRealTimeHeaderBasedAuth({\n              apiKey: apiKey,\n              appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n              authenticationType: authenticationType,\n              payload: dataString,\n              canonicalUri: '',\n              region: region,\n              additionalHeaders: additionalHeaders\n            })];\n\n          case 1:\n            _g = [__assign.apply(void 0, _f.concat([_k.sent()]))];\n            return [4\n            /*yield*/\n            , graphql_headers()];\n\n          case 2:\n            headerObj = __assign.apply(void 0, [__assign.apply(void 0, [__assign.apply(void 0, _g.concat([_k.sent()])), additionalHeaders]), (_j = {}, _j[USER_AGENT_HEADER] = Constants.userAgent, _j)]);\n            subscriptionMessage = {\n              id: subscriptionId,\n              payload: {\n                data: dataString,\n                extensions: {\n                  authorization: __assign({}, headerObj)\n                }\n              },\n              type: MESSAGE_TYPES.GQL_START\n            };\n            stringToAWSRealTime = JSON.stringify(subscriptionMessage);\n            _k.label = 3;\n\n          case 3:\n            _k.trys.push([3, 5,, 6]);\n\n            this.connectionStateMonitor.record(CONNECTION_CHANGE.OPENING_CONNECTION);\n            return [4\n            /*yield*/\n            , this._initializeWebSocketConnection({\n              apiKey: apiKey,\n              appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n              authenticationType: authenticationType,\n              region: region,\n              additionalHeaders: additionalHeaders\n            })];\n\n          case 4:\n            _k.sent();\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 5:\n            err_2 = _k.sent();\n            logger.debug({\n              err: err_2\n            });\n            message = (_b = err_2['message']) !== null && _b !== void 0 ? _b : '';\n            this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n            observer.error({\n              errors: [__assign({}, new GraphQLError(CONTROL_MSG.CONNECTION_FAILED + \": \" + message))]\n            });\n            observer.complete();\n            subscriptionFailedCallback_1 = (this.subscriptionObserverMap.get(subscriptionId) || {}).subscriptionFailedCallback; // Notify concurrent unsubscription\n\n            if (typeof subscriptionFailedCallback_1 === 'function') {\n              subscriptionFailedCallback_1();\n            }\n\n            return [2\n            /*return*/\n            ];\n\n          case 6:\n            _h = (_c = this.subscriptionObserverMap.get(subscriptionId)) !== null && _c !== void 0 ? _c : {}, subscriptionFailedCallback = _h.subscriptionFailedCallback, subscriptionReadyCallback = _h.subscriptionReadyCallback; // This must be done before sending the message in order to be listening immediately\n\n            this.subscriptionObserverMap.set(subscriptionId, {\n              observer: observer,\n              subscriptionState: subscriptionState,\n              query: query !== null && query !== void 0 ? query : '',\n              variables: variables !== null && variables !== void 0 ? variables : {},\n              subscriptionReadyCallback: subscriptionReadyCallback,\n              subscriptionFailedCallback: subscriptionFailedCallback,\n              startAckTimeoutId: setTimeout(function () {\n                _this._timeoutStartSubscriptionAck.call(_this, subscriptionId);\n              }, START_ACK_TIMEOUT)\n            });\n\n            if (this.awsRealTimeSocket) {\n              this.awsRealTimeSocket.send(stringToAWSRealTime);\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  }; // Waiting that subscription has been connected before trying to unsubscribe\n\n\n  AWSAppSyncRealTimeProvider.prototype._waitForSubscriptionToBeConnected = function (subscriptionId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var subscriptionObserver, subscriptionState;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        subscriptionObserver = this.subscriptionObserverMap.get(subscriptionId);\n\n        if (subscriptionObserver) {\n          subscriptionState = subscriptionObserver.subscriptionState; // This in case unsubscribe is invoked before sending start subscription message\n\n          if (subscriptionState === SUBSCRIPTION_STATUS.PENDING) {\n            return [2\n            /*return*/\n            , new Promise(function (res, rej) {\n              var observer = subscriptionObserver.observer,\n                  subscriptionState = subscriptionObserver.subscriptionState,\n                  variables = subscriptionObserver.variables,\n                  query = subscriptionObserver.query;\n\n              _this.subscriptionObserverMap.set(subscriptionId, {\n                observer: observer,\n                subscriptionState: subscriptionState,\n                variables: variables,\n                query: query,\n                subscriptionReadyCallback: res,\n                subscriptionFailedCallback: rej\n              });\n            })];\n          }\n        }\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._sendUnsubscriptionMessage = function (subscriptionId) {\n    try {\n      if (this.awsRealTimeSocket && this.awsRealTimeSocket.readyState === WebSocket.OPEN && this.socketStatus === SOCKET_STATUS.READY) {\n        // Preparing unsubscribe message to stop receiving messages for that subscription\n        var unsubscribeMessage = {\n          id: subscriptionId,\n          type: MESSAGE_TYPES.GQL_STOP\n        };\n        var stringToAWSRealTime = JSON.stringify(unsubscribeMessage);\n        this.awsRealTimeSocket.send(stringToAWSRealTime);\n      }\n    } catch (err) {\n      // If GQL_STOP is not sent because of disconnection issue, then there is nothing the client can do\n      logger.debug({\n        err: err\n      });\n    }\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._removeSubscriptionObserver = function (subscriptionId) {\n    this.subscriptionObserverMap.delete(subscriptionId); // Verifying 1000ms after removing subscription in case there are new subscription unmount/mount\n\n    setTimeout(this._closeSocketIfRequired.bind(this), 1000);\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._closeSocketIfRequired = function () {\n    if (this.subscriptionObserverMap.size > 0) {\n      // Active subscriptions on the WebSocket\n      return;\n    }\n\n    if (!this.awsRealTimeSocket) {\n      this.socketStatus = SOCKET_STATUS.CLOSED;\n      return;\n    }\n\n    this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSING_CONNECTION);\n\n    if (this.awsRealTimeSocket.bufferedAmount > 0) {\n      // Still data on the WebSocket\n      setTimeout(this._closeSocketIfRequired.bind(this), 1000);\n    } else {\n      logger.debug('closing WebSocket...');\n\n      if (this.keepAliveTimeoutId) {\n        clearTimeout(this.keepAliveTimeoutId);\n      }\n\n      if (this.keepAliveAlertTimeoutId) {\n        clearTimeout(this.keepAliveAlertTimeoutId);\n      }\n\n      var tempSocket = this.awsRealTimeSocket; // Cleaning callbacks to avoid race condition, socket still exists\n\n      tempSocket.onclose = null;\n      tempSocket.onerror = null;\n      tempSocket.close(1000);\n      this.awsRealTimeSocket = undefined;\n      this.socketStatus = SOCKET_STATUS.CLOSED;\n      this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n    }\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._handleIncomingSubscriptionMessage = function (message) {\n    var _this = this;\n\n    logger.debug(\"subscription message from AWS AppSync RealTime: \" + message.data);\n\n    var _a = JSON.parse(message.data),\n        _b = _a.id,\n        id = _b === void 0 ? '' : _b,\n        payload = _a.payload,\n        type = _a.type;\n\n    var _c = this.subscriptionObserverMap.get(id) || {},\n        _d = _c.observer,\n        observer = _d === void 0 ? null : _d,\n        _e = _c.query,\n        query = _e === void 0 ? '' : _e,\n        _f = _c.variables,\n        variables = _f === void 0 ? {} : _f,\n        startAckTimeoutId = _c.startAckTimeoutId,\n        subscriptionReadyCallback = _c.subscriptionReadyCallback,\n        subscriptionFailedCallback = _c.subscriptionFailedCallback;\n\n    logger.debug({\n      id: id,\n      observer: observer,\n      query: query,\n      variables: variables\n    });\n\n    if (type === MESSAGE_TYPES.GQL_DATA && payload && payload.data) {\n      if (observer) {\n        observer.next(payload);\n      } else {\n        logger.debug(\"observer not found for id: \" + id);\n      }\n\n      return;\n    }\n\n    if (type === MESSAGE_TYPES.GQL_START_ACK) {\n      logger.debug(\"subscription ready for \" + JSON.stringify({\n        query: query,\n        variables: variables\n      }));\n\n      if (typeof subscriptionReadyCallback === 'function') {\n        subscriptionReadyCallback();\n      }\n\n      if (startAckTimeoutId) clearTimeout(startAckTimeoutId);\n      dispatchApiEvent(CONTROL_MSG.SUBSCRIPTION_ACK, {\n        query: query,\n        variables: variables\n      }, 'Connection established for subscription');\n      var subscriptionState = SUBSCRIPTION_STATUS.CONNECTED;\n\n      if (observer) {\n        this.subscriptionObserverMap.set(id, {\n          observer: observer,\n          query: query,\n          variables: variables,\n          startAckTimeoutId: undefined,\n          subscriptionState: subscriptionState,\n          subscriptionReadyCallback: subscriptionReadyCallback,\n          subscriptionFailedCallback: subscriptionFailedCallback\n        });\n      }\n\n      this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_ESTABLISHED);\n      return;\n    }\n\n    if (type === MESSAGE_TYPES.GQL_CONNECTION_KEEP_ALIVE) {\n      if (this.keepAliveTimeoutId) clearTimeout(this.keepAliveTimeoutId);\n      if (this.keepAliveAlertTimeoutId) clearTimeout(this.keepAliveAlertTimeoutId);\n      this.keepAliveTimeoutId = setTimeout(function () {\n        return _this._errorDisconnect(CONTROL_MSG.TIMEOUT_DISCONNECT);\n      }, this.keepAliveTimeout);\n      this.keepAliveAlertTimeoutId = setTimeout(function () {\n        _this.connectionStateMonitor.record(CONNECTION_CHANGE.KEEP_ALIVE_MISSED);\n      }, DEFAULT_KEEP_ALIVE_ALERT_TIMEOUT);\n      this.connectionStateMonitor.record(CONNECTION_CHANGE.KEEP_ALIVE);\n      return;\n    }\n\n    if (type === MESSAGE_TYPES.GQL_ERROR) {\n      var subscriptionState = SUBSCRIPTION_STATUS.FAILED;\n\n      if (observer) {\n        this.subscriptionObserverMap.set(id, {\n          observer: observer,\n          query: query,\n          variables: variables,\n          startAckTimeoutId: startAckTimeoutId,\n          subscriptionReadyCallback: subscriptionReadyCallback,\n          subscriptionFailedCallback: subscriptionFailedCallback,\n          subscriptionState: subscriptionState\n        });\n        observer.error({\n          errors: [__assign({}, new GraphQLError(CONTROL_MSG.CONNECTION_FAILED + \": \" + JSON.stringify(payload)))]\n        });\n        if (startAckTimeoutId) clearTimeout(startAckTimeoutId);\n        observer.complete();\n\n        if (typeof subscriptionFailedCallback === 'function') {\n          subscriptionFailedCallback();\n        }\n      }\n    }\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._errorDisconnect = function (msg) {\n    logger.debug(\"Disconnect error: \" + msg);\n    this.subscriptionObserverMap.forEach(function (_a) {\n      var observer = _a.observer;\n\n      if (observer && !observer.closed) {\n        observer.error({\n          errors: [__assign({}, new GraphQLError(msg))]\n        });\n      }\n    });\n    this.subscriptionObserverMap.clear();\n\n    if (this.awsRealTimeSocket) {\n      this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n      this.awsRealTimeSocket.close();\n    }\n\n    this.socketStatus = SOCKET_STATUS.CLOSED;\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._timeoutStartSubscriptionAck = function (subscriptionId) {\n    var subscriptionObserver = this.subscriptionObserverMap.get(subscriptionId);\n\n    if (subscriptionObserver) {\n      var observer = subscriptionObserver.observer,\n          query = subscriptionObserver.query,\n          variables = subscriptionObserver.variables;\n\n      if (!observer) {\n        return;\n      }\n\n      this.subscriptionObserverMap.set(subscriptionId, {\n        observer: observer,\n        query: query,\n        variables: variables,\n        subscriptionState: SUBSCRIPTION_STATUS.FAILED\n      });\n\n      if (observer && !observer.closed) {\n        observer.error({\n          errors: [__assign({}, new GraphQLError(\"Subscription timeout \" + JSON.stringify({\n            query: query,\n            variables: variables\n          })))]\n        }); // Cleanup will be automatically executed\n\n        observer.complete();\n      }\n\n      logger.debug('timeoutStartSubscription', JSON.stringify({\n        query: query,\n        variables: variables\n      }));\n    }\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._initializeWebSocketConnection = function (_a) {\n    var _this = this;\n\n    var appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint,\n        authenticationType = _a.authenticationType,\n        apiKey = _a.apiKey,\n        region = _a.region,\n        additionalHeaders = _a.additionalHeaders;\n\n    if (this.socketStatus === SOCKET_STATUS.READY) {\n      return;\n    }\n\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var payloadString, headerString, _a, _b, headerQs, payloadQs, discoverableEndpoint, protocol, awsRealTimeUrl, err_3;\n\n        return __generator(this, function (_c) {\n          switch (_c.label) {\n            case 0:\n              this.promiseArray.push({\n                res: res,\n                rej: rej\n              });\n              if (!(this.socketStatus === SOCKET_STATUS.CLOSED)) return [3\n              /*break*/\n              , 5];\n              _c.label = 1;\n\n            case 1:\n              _c.trys.push([1, 4,, 5]);\n\n              this.socketStatus = SOCKET_STATUS.CONNECTING;\n              payloadString = '{}';\n              _b = (_a = JSON).stringify;\n              return [4\n              /*yield*/\n              , this._awsRealTimeHeaderBasedAuth({\n                authenticationType: authenticationType,\n                payload: payloadString,\n                canonicalUri: '/connect',\n                apiKey: apiKey,\n                appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n                region: region,\n                additionalHeaders: additionalHeaders\n              })];\n\n            case 2:\n              headerString = _b.apply(_a, [_c.sent()]);\n              headerQs = Buffer.from(headerString).toString('base64');\n              payloadQs = Buffer.from(payloadString).toString('base64');\n              discoverableEndpoint = appSyncGraphqlEndpoint !== null && appSyncGraphqlEndpoint !== void 0 ? appSyncGraphqlEndpoint : '';\n\n              if (this.isCustomDomain(discoverableEndpoint)) {\n                discoverableEndpoint = discoverableEndpoint.concat(customDomainPath);\n              } else {\n                discoverableEndpoint = discoverableEndpoint.replace('appsync-api', 'appsync-realtime-api').replace('gogi-beta', 'grt-beta');\n              }\n\n              protocol = this.isSSLEnabled ? 'wss://' : 'ws://';\n              discoverableEndpoint = discoverableEndpoint.replace('https://', protocol).replace('http://', protocol);\n              awsRealTimeUrl = discoverableEndpoint + \"?header=\" + headerQs + \"&payload=\" + payloadQs;\n              return [4\n              /*yield*/\n              , this._initializeRetryableHandshake(awsRealTimeUrl)];\n\n            case 3:\n              _c.sent();\n\n              this.promiseArray.forEach(function (_a) {\n                var res = _a.res;\n                logger.debug('Notifying connection successful');\n                res();\n              });\n              this.socketStatus = SOCKET_STATUS.READY;\n              this.promiseArray = [];\n              return [3\n              /*break*/\n              , 5];\n\n            case 4:\n              err_3 = _c.sent();\n              this.promiseArray.forEach(function (_a) {\n                var rej = _a.rej;\n                return rej(err_3);\n              });\n              this.promiseArray = [];\n\n              if (this.awsRealTimeSocket && this.awsRealTimeSocket.readyState === WebSocket.OPEN) {\n                this.awsRealTimeSocket.close(3001);\n              }\n\n              this.awsRealTimeSocket = undefined;\n              this.socketStatus = SOCKET_STATUS.CLOSED;\n              return [3\n              /*break*/\n              , 5];\n\n            case 5:\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._initializeRetryableHandshake = function (awsRealTimeUrl) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug(\"Initializaling retryable Handshake\");\n            return [4\n            /*yield*/\n            , jitteredExponentialRetry(this._initializeHandshake.bind(this), [awsRealTimeUrl], MAX_DELAY_MS)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._initializeHandshake = function (awsRealTimeUrl) {\n    return __awaiter(this, void 0, void 0, function () {\n      var err_4, _a, errorType, errorCode;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            logger.debug(\"Initializing handshake \" + awsRealTimeUrl);\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , function () {\n              return new Promise(function (res, rej) {\n                var newSocket = _this.getNewWebSocket(awsRealTimeUrl, 'graphql-ws');\n\n                newSocket.onerror = function () {\n                  logger.debug(\"WebSocket connection error\");\n                };\n\n                newSocket.onclose = function () {\n                  _this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_FAILED);\n\n                  rej(new Error('Connection handshake error'));\n                };\n\n                newSocket.onopen = function () {\n                  _this.awsRealTimeSocket = newSocket;\n                  return res();\n                };\n              });\n            }()];\n\n          case 2:\n            _b.sent(); // Step 2: wait for ack from AWS AppSyncReaTime after sending init\n\n\n            return [4\n            /*yield*/\n            , function () {\n              return new Promise(function (res, rej) {\n                if (_this.awsRealTimeSocket) {\n                  var ackOk_1 = false;\n\n                  _this.awsRealTimeSocket.onerror = function (error) {\n                    logger.debug(\"WebSocket error \" + JSON.stringify(error));\n                  };\n\n                  _this.awsRealTimeSocket.onclose = function (event) {\n                    logger.debug(\"WebSocket closed \" + event.reason);\n                    rej(new Error(JSON.stringify(event)));\n                  };\n\n                  _this.awsRealTimeSocket.onmessage = function (message) {\n                    logger.debug(\"subscription message from AWS AppSyncRealTime: \" + message.data + \" \");\n                    var data = JSON.parse(message.data);\n                    var type = data.type,\n                        _a = data.payload,\n                        _b = (_a === void 0 ? {} : _a).connectionTimeoutMs,\n                        connectionTimeoutMs = _b === void 0 ? DEFAULT_KEEP_ALIVE_TIMEOUT : _b;\n\n                    if (type === MESSAGE_TYPES.GQL_CONNECTION_ACK) {\n                      ackOk_1 = true;\n\n                      if (_this.awsRealTimeSocket) {\n                        _this.keepAliveTimeout = connectionTimeoutMs;\n                        _this.awsRealTimeSocket.onmessage = _this._handleIncomingSubscriptionMessage.bind(_this);\n\n                        _this.awsRealTimeSocket.onerror = function (err) {\n                          logger.debug(err);\n\n                          _this._errorDisconnect(CONTROL_MSG.CONNECTION_CLOSED);\n                        };\n\n                        _this.awsRealTimeSocket.onclose = function (event) {\n                          logger.debug(\"WebSocket closed \" + event.reason);\n\n                          _this._errorDisconnect(CONTROL_MSG.CONNECTION_CLOSED);\n                        };\n                      }\n\n                      res('Cool, connected to AWS AppSyncRealTime');\n                      return;\n                    }\n\n                    if (type === MESSAGE_TYPES.GQL_CONNECTION_ERROR) {\n                      var _c = data.payload,\n                          _d = (_c === void 0 ? {} : _c).errors,\n                          _e = __read(_d === void 0 ? [] : _d, 1),\n                          _f = _e[0],\n                          _g = _f === void 0 ? {} : _f,\n                          _h = _g.errorType,\n                          errorType = _h === void 0 ? '' : _h,\n                          _j = _g.errorCode,\n                          errorCode = _j === void 0 ? 0 : _j;\n\n                      rej({\n                        errorType: errorType,\n                        errorCode: errorCode\n                      });\n                    }\n                  };\n\n                  var gqlInit = {\n                    type: MESSAGE_TYPES.GQL_CONNECTION_INIT\n                  };\n\n                  _this.awsRealTimeSocket.send(JSON.stringify(gqlInit));\n\n                  var checkAckOk_1 = function (ackOk) {\n                    if (!ackOk) {\n                      _this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_FAILED);\n\n                      rej(new Error(\"Connection timeout: ack from AWSAppSyncRealTime was not received after \" + CONNECTION_INIT_TIMEOUT + \" ms\"));\n                    }\n                  };\n\n                  setTimeout(function () {\n                    return checkAckOk_1(ackOk_1);\n                  }, CONNECTION_INIT_TIMEOUT);\n                }\n              });\n            }()];\n\n          case 3:\n            // Step 2: wait for ack from AWS AppSyncReaTime after sending init\n            _b.sent();\n\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            err_4 = _b.sent();\n            _a = err_4, errorType = _a.errorType, errorCode = _a.errorCode;\n\n            if (NON_RETRYABLE_CODES.includes(errorCode)) {\n              throw new NonRetryableError(errorType);\n            } else if (errorType) {\n              throw new Error(errorType);\n            } else {\n              throw err_4;\n            }\n\n            return [3\n            /*break*/\n            , 5];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeHeaderBasedAuth = function (_a) {\n    var authenticationType = _a.authenticationType,\n        payload = _a.payload,\n        canonicalUri = _a.canonicalUri,\n        appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint,\n        apiKey = _a.apiKey,\n        region = _a.region,\n        additionalHeaders = _a.additionalHeaders;\n    return __awaiter(this, void 0, void 0, function () {\n      var headerHandler, handler, host, result;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            headerHandler = {\n              API_KEY: this._awsRealTimeApiKeyHeader.bind(this),\n              AWS_IAM: this._awsRealTimeIAMHeader.bind(this),\n              OPENID_CONNECT: this._awsRealTimeOPENIDHeader.bind(this),\n              AMAZON_COGNITO_USER_POOLS: this._awsRealTimeCUPHeader.bind(this),\n              AWS_LAMBDA: this._customAuthHeader\n            };\n            if (!(!authenticationType || !headerHandler[authenticationType])) return [3\n            /*break*/\n            , 1];\n            logger.debug(\"Authentication type \" + authenticationType + \" not supported\");\n            return [2\n            /*return*/\n            , ''];\n\n          case 1:\n            handler = headerHandler[authenticationType];\n            host = url.parse(appSyncGraphqlEndpoint !== null && appSyncGraphqlEndpoint !== void 0 ? appSyncGraphqlEndpoint : '').host;\n            logger.debug(\"Authenticating with \" + authenticationType);\n            return [4\n            /*yield*/\n            , handler({\n              payload: payload,\n              canonicalUri: canonicalUri,\n              appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n              apiKey: apiKey,\n              region: region,\n              host: host,\n              additionalHeaders: additionalHeaders\n            })];\n\n          case 2:\n            result = _b.sent();\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeCUPHeader = function (_a) {\n    var host = _a.host;\n    return __awaiter(this, void 0, void 0, function () {\n      var session;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , Auth.currentSession()];\n\n          case 1:\n            session = _b.sent();\n            return [2\n            /*return*/\n            , {\n              Authorization: session.getAccessToken().getJwtToken(),\n              host: host\n            }];\n        }\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeOPENIDHeader = function (_a) {\n    var host = _a.host;\n    return __awaiter(this, void 0, void 0, function () {\n      var token, federatedInfo, currentUser;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , Cache.getItem('federatedInfo')];\n\n          case 1:\n            federatedInfo = _b.sent();\n            if (!federatedInfo) return [3\n            /*break*/\n            , 2];\n            token = federatedInfo.token;\n            return [3\n            /*break*/\n            , 4];\n\n          case 2:\n            return [4\n            /*yield*/\n            , Auth.currentAuthenticatedUser()];\n\n          case 3:\n            currentUser = _b.sent();\n\n            if (currentUser) {\n              token = currentUser.token;\n            }\n\n            _b.label = 4;\n\n          case 4:\n            if (!token) {\n              throw new Error('No federated jwt');\n            }\n\n            return [2\n            /*return*/\n            , {\n              Authorization: token,\n              host: host\n            }];\n        }\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeApiKeyHeader = function (_a) {\n    var apiKey = _a.apiKey,\n        host = _a.host;\n    return __awaiter(this, void 0, void 0, function () {\n      var dt, dtStr;\n      return __generator(this, function (_b) {\n        dt = new Date();\n        dtStr = dt.toISOString().replace(/[:\\-]|\\.\\d{3}/g, '');\n        return [2\n        /*return*/\n        , {\n          host: host,\n          'x-amz-date': dtStr,\n          'x-api-key': apiKey\n        }];\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeIAMHeader = function (_a) {\n    var payload = _a.payload,\n        canonicalUri = _a.canonicalUri,\n        appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint,\n        region = _a.region;\n    return __awaiter(this, void 0, void 0, function () {\n      var endpointInfo, credentialsOK, creds, request, signed_params;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            endpointInfo = {\n              region: region,\n              service: 'appsync'\n            };\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _b.sent();\n\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n\n            return [4\n            /*yield*/\n            , Credentials.get().then(function (credentials) {\n              var _a = credentials,\n                  secretAccessKey = _a.secretAccessKey,\n                  accessKeyId = _a.accessKeyId,\n                  sessionToken = _a.sessionToken;\n              return {\n                secret_key: secretAccessKey,\n                access_key: accessKeyId,\n                session_token: sessionToken\n              };\n            })];\n\n          case 2:\n            creds = _b.sent();\n            request = {\n              url: \"\" + appSyncGraphqlEndpoint + canonicalUri,\n              data: payload,\n              method: 'POST',\n              headers: __assign({}, AWS_APPSYNC_REALTIME_HEADERS)\n            };\n            signed_params = Signer.sign(request, creds, endpointInfo);\n            return [2\n            /*return*/\n            , signed_params.headers];\n        }\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._customAuthHeader = function (_a) {\n    var host = _a.host,\n        additionalHeaders = _a.additionalHeaders;\n\n    if (!additionalHeaders || !additionalHeaders['Authorization']) {\n      throw new Error('No auth token specified');\n    }\n\n    return {\n      Authorization: additionalHeaders.Authorization,\n      host: host\n    };\n  };\n  /**\n   * @private\n   */\n\n\n  AWSAppSyncRealTimeProvider.prototype._ensureCredentials = function () {\n    return Credentials.get().then(function (credentials) {\n      if (!credentials) return false;\n      var cred = Credentials.shear(credentials);\n      logger.debug('set credentials for AWSAppSyncRealTimeProvider', cred);\n      return true;\n    }).catch(function (err) {\n      logger.warn('ensure credentials error', err);\n      return false;\n    });\n  };\n\n  return AWSAppSyncRealTimeProvider;\n}(AbstractPubSubProvider);\n\nexport { AWSAppSyncRealTimeProvider };","map":{"version":3,"sources":["../../../src/Providers/AWSAppSyncRealTimeProvider/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\n/*\n * Copyright 2017-2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport Observable from 'zen-observable-ts';\nimport { GraphQLError } from 'graphql';\nimport * as url from 'url';\nimport { v4 as uuid } from 'uuid';\nimport { Buffer } from 'buffer';\nimport { Logger, Credentials, Signer, Hub, Constants, USER_AGENT_HEADER, jitteredExponentialRetry, NonRetryableError, } from '@aws-amplify/core';\nimport Cache from '@aws-amplify/cache';\nimport Auth from '@aws-amplify/auth';\nimport { AbstractPubSubProvider } from '../PubSubProvider';\nimport { CONTROL_MSG } from '../../types/PubSub';\nimport { AMPLIFY_SYMBOL, AWS_APPSYNC_REALTIME_HEADERS, CONNECTION_INIT_TIMEOUT, DEFAULT_KEEP_ALIVE_TIMEOUT, DEFAULT_KEEP_ALIVE_ALERT_TIMEOUT, MAX_DELAY_MS, MESSAGE_TYPES, NON_RETRYABLE_CODES, SOCKET_STATUS, START_ACK_TIMEOUT, SUBSCRIPTION_STATUS, CONNECTION_STATE_CHANGE, } from '../constants';\nimport { ConnectionStateMonitor, CONNECTION_CHANGE, } from '../../utils/ConnectionStateMonitor';\nvar logger = new Logger('AWSAppSyncRealTimeProvider');\nvar dispatchApiEvent = function (event, data, message) {\n    Hub.dispatch('api', { event: event, data: data, message: message }, 'PubSub', AMPLIFY_SYMBOL);\n};\nvar standardDomainPattern = /^https:\\/\\/\\w{26}\\.appsync\\-api\\.\\w{2}(?:(?:\\-\\w{2,})+)\\-\\d\\.amazonaws.com\\/graphql$/i;\nvar customDomainPath = '/realtime';\nvar AWSAppSyncRealTimeProvider = /** @class */ (function (_super) {\n    __extends(AWSAppSyncRealTimeProvider, _super);\n    function AWSAppSyncRealTimeProvider(options) {\n        if (options === void 0) { options = {}; }\n        var _this = _super.call(this, options) || this;\n        _this.socketStatus = SOCKET_STATUS.CLOSED;\n        _this.keepAliveTimeout = DEFAULT_KEEP_ALIVE_TIMEOUT;\n        _this.subscriptionObserverMap = new Map();\n        _this.promiseArray = [];\n        _this.connectionStateMonitor = new ConnectionStateMonitor();\n        // Monitor the connection state and pass changes along to Hub\n        _this.connectionStateMonitor.connectionStateObservable.subscribe(function (ConnectionState) {\n            dispatchApiEvent(CONNECTION_STATE_CHANGE, {\n                provider: _this,\n                connectionState: ConnectionState,\n            }, \"Connection state is \" + ConnectionState);\n        });\n        return _this;\n    }\n    AWSAppSyncRealTimeProvider.prototype.getNewWebSocket = function (url, protocol) {\n        return new WebSocket(url, protocol);\n    };\n    AWSAppSyncRealTimeProvider.prototype.getProviderName = function () {\n        return 'AWSAppSyncRealTimeProvider';\n    };\n    AWSAppSyncRealTimeProvider.prototype.newClient = function () {\n        throw new Error('Not used here');\n    };\n    AWSAppSyncRealTimeProvider.prototype.publish = function (_topics, _msg, _options) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                throw new Error('Operation not supported');\n            });\n        });\n    };\n    // Check if url matches standard domain pattern\n    AWSAppSyncRealTimeProvider.prototype.isCustomDomain = function (url) {\n        return url.match(standardDomainPattern) === null;\n    };\n    AWSAppSyncRealTimeProvider.prototype.subscribe = function (_topics, options) {\n        var _this = this;\n        var appSyncGraphqlEndpoint = options === null || options === void 0 ? void 0 : options.appSyncGraphqlEndpoint;\n        return new Observable(function (observer) {\n            if (!options || !appSyncGraphqlEndpoint) {\n                observer.error({\n                    errors: [\n                        __assign({}, new GraphQLError(\"Subscribe only available for AWS AppSync endpoint\")),\n                    ],\n                });\n                observer.complete();\n            }\n            else {\n                var subscriptionId_1 = uuid();\n                _this._startSubscriptionWithAWSAppSyncRealTime({\n                    options: options,\n                    observer: observer,\n                    subscriptionId: subscriptionId_1,\n                }).catch(function (err) {\n                    observer.error({\n                        errors: [\n                            __assign({}, new GraphQLError(CONTROL_MSG.REALTIME_SUBSCRIPTION_INIT_ERROR + \": \" + err)),\n                        ],\n                    });\n                    _this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n                    observer.complete();\n                });\n                return function () { return __awaiter(_this, void 0, void 0, function () {\n                    var subscriptionState, err_1;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0:\n                                _a.trys.push([0, 2, 3, 4]);\n                                // Waiting that subscription has been connected before trying to unsubscribe\n                                return [4 /*yield*/, this._waitForSubscriptionToBeConnected(subscriptionId_1)];\n                            case 1:\n                                // Waiting that subscription has been connected before trying to unsubscribe\n                                _a.sent();\n                                subscriptionState = (this.subscriptionObserverMap.get(subscriptionId_1) || {}).subscriptionState;\n                                if (!subscriptionState) {\n                                    // subscription already unsubscribed\n                                    return [2 /*return*/];\n                                }\n                                if (subscriptionState === SUBSCRIPTION_STATUS.CONNECTED) {\n                                    this._sendUnsubscriptionMessage(subscriptionId_1);\n                                }\n                                else {\n                                    throw new Error('Subscription never connected');\n                                }\n                                return [3 /*break*/, 4];\n                            case 2:\n                                err_1 = _a.sent();\n                                logger.debug(\"Error while unsubscribing \" + err_1);\n                                return [3 /*break*/, 4];\n                            case 3:\n                                this._removeSubscriptionObserver(subscriptionId_1);\n                                return [7 /*endfinally*/];\n                            case 4: return [2 /*return*/];\n                        }\n                    });\n                }); };\n            }\n        });\n    };\n    Object.defineProperty(AWSAppSyncRealTimeProvider.prototype, \"isSSLEnabled\", {\n        get: function () {\n            return !this.options\n                .aws_appsync_dangerously_connect_to_http_endpoint_for_testing;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    AWSAppSyncRealTimeProvider.prototype._startSubscriptionWithAWSAppSyncRealTime = function (_a) {\n        var options = _a.options, observer = _a.observer, subscriptionId = _a.subscriptionId;\n        var _b, _c;\n        return __awaiter(this, void 0, void 0, function () {\n            var appSyncGraphqlEndpoint, authenticationType, query, variables, apiKey, region, _d, graphql_headers, _e, additionalHeaders, subscriptionState, data, dataString, headerObj, _f, _g, subscriptionMessage, stringToAWSRealTime, err_2, message, subscriptionFailedCallback_1, _h, subscriptionFailedCallback, subscriptionReadyCallback;\n            var _j;\n            var _this = this;\n            return __generator(this, function (_k) {\n                switch (_k.label) {\n                    case 0:\n                        appSyncGraphqlEndpoint = options.appSyncGraphqlEndpoint, authenticationType = options.authenticationType, query = options.query, variables = options.variables, apiKey = options.apiKey, region = options.region, _d = options.graphql_headers, graphql_headers = _d === void 0 ? function () { return ({}); } : _d, _e = options.additionalHeaders, additionalHeaders = _e === void 0 ? {} : _e;\n                        subscriptionState = SUBSCRIPTION_STATUS.PENDING;\n                        data = {\n                            query: query,\n                            variables: variables,\n                        };\n                        // Having a subscription id map will make it simple to forward messages received\n                        this.subscriptionObserverMap.set(subscriptionId, {\n                            observer: observer,\n                            query: query !== null && query !== void 0 ? query : '',\n                            variables: variables !== null && variables !== void 0 ? variables : {},\n                            subscriptionState: subscriptionState,\n                            startAckTimeoutId: undefined,\n                        });\n                        dataString = JSON.stringify(data);\n                        _f = [{}];\n                        return [4 /*yield*/, this._awsRealTimeHeaderBasedAuth({\n                                apiKey: apiKey,\n                                appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n                                authenticationType: authenticationType,\n                                payload: dataString,\n                                canonicalUri: '',\n                                region: region,\n                                additionalHeaders: additionalHeaders,\n                            })];\n                    case 1:\n                        _g = [__assign.apply(void 0, _f.concat([(_k.sent())]))];\n                        return [4 /*yield*/, graphql_headers()];\n                    case 2:\n                        headerObj = __assign.apply(void 0, [__assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), additionalHeaders]), (_j = {}, _j[USER_AGENT_HEADER] = Constants.userAgent, _j)]);\n                        subscriptionMessage = {\n                            id: subscriptionId,\n                            payload: {\n                                data: dataString,\n                                extensions: {\n                                    authorization: __assign({}, headerObj),\n                                },\n                            },\n                            type: MESSAGE_TYPES.GQL_START,\n                        };\n                        stringToAWSRealTime = JSON.stringify(subscriptionMessage);\n                        _k.label = 3;\n                    case 3:\n                        _k.trys.push([3, 5, , 6]);\n                        this.connectionStateMonitor.record(CONNECTION_CHANGE.OPENING_CONNECTION);\n                        return [4 /*yield*/, this._initializeWebSocketConnection({\n                                apiKey: apiKey,\n                                appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n                                authenticationType: authenticationType,\n                                region: region,\n                                additionalHeaders: additionalHeaders,\n                            })];\n                    case 4:\n                        _k.sent();\n                        return [3 /*break*/, 6];\n                    case 5:\n                        err_2 = _k.sent();\n                        logger.debug({ err: err_2 });\n                        message = (_b = err_2['message']) !== null && _b !== void 0 ? _b : '';\n                        this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n                        observer.error({\n                            errors: [\n                                __assign({}, new GraphQLError(CONTROL_MSG.CONNECTION_FAILED + \": \" + message)),\n                            ],\n                        });\n                        observer.complete();\n                        subscriptionFailedCallback_1 = (this.subscriptionObserverMap.get(subscriptionId) || {}).subscriptionFailedCallback;\n                        // Notify concurrent unsubscription\n                        if (typeof subscriptionFailedCallback_1 === 'function') {\n                            subscriptionFailedCallback_1();\n                        }\n                        return [2 /*return*/];\n                    case 6:\n                        _h = (_c = this.subscriptionObserverMap.get(subscriptionId)) !== null && _c !== void 0 ? _c : {}, subscriptionFailedCallback = _h.subscriptionFailedCallback, subscriptionReadyCallback = _h.subscriptionReadyCallback;\n                        // This must be done before sending the message in order to be listening immediately\n                        this.subscriptionObserverMap.set(subscriptionId, {\n                            observer: observer,\n                            subscriptionState: subscriptionState,\n                            query: query !== null && query !== void 0 ? query : '',\n                            variables: variables !== null && variables !== void 0 ? variables : {},\n                            subscriptionReadyCallback: subscriptionReadyCallback,\n                            subscriptionFailedCallback: subscriptionFailedCallback,\n                            startAckTimeoutId: setTimeout(function () {\n                                _this._timeoutStartSubscriptionAck.call(_this, subscriptionId);\n                            }, START_ACK_TIMEOUT),\n                        });\n                        if (this.awsRealTimeSocket) {\n                            this.awsRealTimeSocket.send(stringToAWSRealTime);\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    // Waiting that subscription has been connected before trying to unsubscribe\n    AWSAppSyncRealTimeProvider.prototype._waitForSubscriptionToBeConnected = function (subscriptionId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var subscriptionObserver, subscriptionState;\n            var _this = this;\n            return __generator(this, function (_a) {\n                subscriptionObserver = this.subscriptionObserverMap.get(subscriptionId);\n                if (subscriptionObserver) {\n                    subscriptionState = subscriptionObserver.subscriptionState;\n                    // This in case unsubscribe is invoked before sending start subscription message\n                    if (subscriptionState === SUBSCRIPTION_STATUS.PENDING) {\n                        return [2 /*return*/, new Promise(function (res, rej) {\n                                var observer = subscriptionObserver.observer, subscriptionState = subscriptionObserver.subscriptionState, variables = subscriptionObserver.variables, query = subscriptionObserver.query;\n                                _this.subscriptionObserverMap.set(subscriptionId, {\n                                    observer: observer,\n                                    subscriptionState: subscriptionState,\n                                    variables: variables,\n                                    query: query,\n                                    subscriptionReadyCallback: res,\n                                    subscriptionFailedCallback: rej,\n                                });\n                            })];\n                    }\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    AWSAppSyncRealTimeProvider.prototype._sendUnsubscriptionMessage = function (subscriptionId) {\n        try {\n            if (this.awsRealTimeSocket &&\n                this.awsRealTimeSocket.readyState === WebSocket.OPEN &&\n                this.socketStatus === SOCKET_STATUS.READY) {\n                // Preparing unsubscribe message to stop receiving messages for that subscription\n                var unsubscribeMessage = {\n                    id: subscriptionId,\n                    type: MESSAGE_TYPES.GQL_STOP,\n                };\n                var stringToAWSRealTime = JSON.stringify(unsubscribeMessage);\n                this.awsRealTimeSocket.send(stringToAWSRealTime);\n            }\n        }\n        catch (err) {\n            // If GQL_STOP is not sent because of disconnection issue, then there is nothing the client can do\n            logger.debug({ err: err });\n        }\n    };\n    AWSAppSyncRealTimeProvider.prototype._removeSubscriptionObserver = function (subscriptionId) {\n        this.subscriptionObserverMap.delete(subscriptionId);\n        // Verifying 1000ms after removing subscription in case there are new subscription unmount/mount\n        setTimeout(this._closeSocketIfRequired.bind(this), 1000);\n    };\n    AWSAppSyncRealTimeProvider.prototype._closeSocketIfRequired = function () {\n        if (this.subscriptionObserverMap.size > 0) {\n            // Active subscriptions on the WebSocket\n            return;\n        }\n        if (!this.awsRealTimeSocket) {\n            this.socketStatus = SOCKET_STATUS.CLOSED;\n            return;\n        }\n        this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSING_CONNECTION);\n        if (this.awsRealTimeSocket.bufferedAmount > 0) {\n            // Still data on the WebSocket\n            setTimeout(this._closeSocketIfRequired.bind(this), 1000);\n        }\n        else {\n            logger.debug('closing WebSocket...');\n            if (this.keepAliveTimeoutId) {\n                clearTimeout(this.keepAliveTimeoutId);\n            }\n            if (this.keepAliveAlertTimeoutId) {\n                clearTimeout(this.keepAliveAlertTimeoutId);\n            }\n            var tempSocket = this.awsRealTimeSocket;\n            // Cleaning callbacks to avoid race condition, socket still exists\n            tempSocket.onclose = null;\n            tempSocket.onerror = null;\n            tempSocket.close(1000);\n            this.awsRealTimeSocket = undefined;\n            this.socketStatus = SOCKET_STATUS.CLOSED;\n            this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n        }\n    };\n    AWSAppSyncRealTimeProvider.prototype._handleIncomingSubscriptionMessage = function (message) {\n        var _this = this;\n        logger.debug(\"subscription message from AWS AppSync RealTime: \" + message.data);\n        var _a = JSON.parse(message.data), _b = _a.id, id = _b === void 0 ? '' : _b, payload = _a.payload, type = _a.type;\n        var _c = this.subscriptionObserverMap.get(id) || {}, _d = _c.observer, observer = _d === void 0 ? null : _d, _e = _c.query, query = _e === void 0 ? '' : _e, _f = _c.variables, variables = _f === void 0 ? {} : _f, startAckTimeoutId = _c.startAckTimeoutId, subscriptionReadyCallback = _c.subscriptionReadyCallback, subscriptionFailedCallback = _c.subscriptionFailedCallback;\n        logger.debug({ id: id, observer: observer, query: query, variables: variables });\n        if (type === MESSAGE_TYPES.GQL_DATA && payload && payload.data) {\n            if (observer) {\n                observer.next(payload);\n            }\n            else {\n                logger.debug(\"observer not found for id: \" + id);\n            }\n            return;\n        }\n        if (type === MESSAGE_TYPES.GQL_START_ACK) {\n            logger.debug(\"subscription ready for \" + JSON.stringify({ query: query, variables: variables }));\n            if (typeof subscriptionReadyCallback === 'function') {\n                subscriptionReadyCallback();\n            }\n            if (startAckTimeoutId)\n                clearTimeout(startAckTimeoutId);\n            dispatchApiEvent(CONTROL_MSG.SUBSCRIPTION_ACK, { query: query, variables: variables }, 'Connection established for subscription');\n            var subscriptionState = SUBSCRIPTION_STATUS.CONNECTED;\n            if (observer) {\n                this.subscriptionObserverMap.set(id, {\n                    observer: observer,\n                    query: query,\n                    variables: variables,\n                    startAckTimeoutId: undefined,\n                    subscriptionState: subscriptionState,\n                    subscriptionReadyCallback: subscriptionReadyCallback,\n                    subscriptionFailedCallback: subscriptionFailedCallback,\n                });\n            }\n            this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_ESTABLISHED);\n            return;\n        }\n        if (type === MESSAGE_TYPES.GQL_CONNECTION_KEEP_ALIVE) {\n            if (this.keepAliveTimeoutId)\n                clearTimeout(this.keepAliveTimeoutId);\n            if (this.keepAliveAlertTimeoutId)\n                clearTimeout(this.keepAliveAlertTimeoutId);\n            this.keepAliveTimeoutId = setTimeout(function () { return _this._errorDisconnect(CONTROL_MSG.TIMEOUT_DISCONNECT); }, this.keepAliveTimeout);\n            this.keepAliveAlertTimeoutId = setTimeout(function () {\n                _this.connectionStateMonitor.record(CONNECTION_CHANGE.KEEP_ALIVE_MISSED);\n            }, DEFAULT_KEEP_ALIVE_ALERT_TIMEOUT);\n            this.connectionStateMonitor.record(CONNECTION_CHANGE.KEEP_ALIVE);\n            return;\n        }\n        if (type === MESSAGE_TYPES.GQL_ERROR) {\n            var subscriptionState = SUBSCRIPTION_STATUS.FAILED;\n            if (observer) {\n                this.subscriptionObserverMap.set(id, {\n                    observer: observer,\n                    query: query,\n                    variables: variables,\n                    startAckTimeoutId: startAckTimeoutId,\n                    subscriptionReadyCallback: subscriptionReadyCallback,\n                    subscriptionFailedCallback: subscriptionFailedCallback,\n                    subscriptionState: subscriptionState,\n                });\n                observer.error({\n                    errors: [\n                        __assign({}, new GraphQLError(CONTROL_MSG.CONNECTION_FAILED + \": \" + JSON.stringify(payload))),\n                    ],\n                });\n                if (startAckTimeoutId)\n                    clearTimeout(startAckTimeoutId);\n                observer.complete();\n                if (typeof subscriptionFailedCallback === 'function') {\n                    subscriptionFailedCallback();\n                }\n            }\n        }\n    };\n    AWSAppSyncRealTimeProvider.prototype._errorDisconnect = function (msg) {\n        logger.debug(\"Disconnect error: \" + msg);\n        this.subscriptionObserverMap.forEach(function (_a) {\n            var observer = _a.observer;\n            if (observer && !observer.closed) {\n                observer.error({\n                    errors: [__assign({}, new GraphQLError(msg))],\n                });\n            }\n        });\n        this.subscriptionObserverMap.clear();\n        if (this.awsRealTimeSocket) {\n            this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n            this.awsRealTimeSocket.close();\n        }\n        this.socketStatus = SOCKET_STATUS.CLOSED;\n    };\n    AWSAppSyncRealTimeProvider.prototype._timeoutStartSubscriptionAck = function (subscriptionId) {\n        var subscriptionObserver = this.subscriptionObserverMap.get(subscriptionId);\n        if (subscriptionObserver) {\n            var observer = subscriptionObserver.observer, query = subscriptionObserver.query, variables = subscriptionObserver.variables;\n            if (!observer) {\n                return;\n            }\n            this.subscriptionObserverMap.set(subscriptionId, {\n                observer: observer,\n                query: query,\n                variables: variables,\n                subscriptionState: SUBSCRIPTION_STATUS.FAILED,\n            });\n            if (observer && !observer.closed) {\n                observer.error({\n                    errors: [\n                        __assign({}, new GraphQLError(\"Subscription timeout \" + JSON.stringify({\n                            query: query,\n                            variables: variables,\n                        }))),\n                    ],\n                });\n                // Cleanup will be automatically executed\n                observer.complete();\n            }\n            logger.debug('timeoutStartSubscription', JSON.stringify({ query: query, variables: variables }));\n        }\n    };\n    AWSAppSyncRealTimeProvider.prototype._initializeWebSocketConnection = function (_a) {\n        var _this = this;\n        var appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint, authenticationType = _a.authenticationType, apiKey = _a.apiKey, region = _a.region, additionalHeaders = _a.additionalHeaders;\n        if (this.socketStatus === SOCKET_STATUS.READY) {\n            return;\n        }\n        return new Promise(function (res, rej) { return __awaiter(_this, void 0, void 0, function () {\n            var payloadString, headerString, _a, _b, headerQs, payloadQs, discoverableEndpoint, protocol, awsRealTimeUrl, err_3;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        this.promiseArray.push({ res: res, rej: rej });\n                        if (!(this.socketStatus === SOCKET_STATUS.CLOSED)) return [3 /*break*/, 5];\n                        _c.label = 1;\n                    case 1:\n                        _c.trys.push([1, 4, , 5]);\n                        this.socketStatus = SOCKET_STATUS.CONNECTING;\n                        payloadString = '{}';\n                        _b = (_a = JSON).stringify;\n                        return [4 /*yield*/, this._awsRealTimeHeaderBasedAuth({\n                                authenticationType: authenticationType,\n                                payload: payloadString,\n                                canonicalUri: '/connect',\n                                apiKey: apiKey,\n                                appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n                                region: region,\n                                additionalHeaders: additionalHeaders,\n                            })];\n                    case 2:\n                        headerString = _b.apply(_a, [_c.sent()]);\n                        headerQs = Buffer.from(headerString).toString('base64');\n                        payloadQs = Buffer.from(payloadString).toString('base64');\n                        discoverableEndpoint = appSyncGraphqlEndpoint !== null && appSyncGraphqlEndpoint !== void 0 ? appSyncGraphqlEndpoint : '';\n                        if (this.isCustomDomain(discoverableEndpoint)) {\n                            discoverableEndpoint =\n                                discoverableEndpoint.concat(customDomainPath);\n                        }\n                        else {\n                            discoverableEndpoint = discoverableEndpoint\n                                .replace('appsync-api', 'appsync-realtime-api')\n                                .replace('gogi-beta', 'grt-beta');\n                        }\n                        protocol = this.isSSLEnabled ? 'wss://' : 'ws://';\n                        discoverableEndpoint = discoverableEndpoint\n                            .replace('https://', protocol)\n                            .replace('http://', protocol);\n                        awsRealTimeUrl = discoverableEndpoint + \"?header=\" + headerQs + \"&payload=\" + payloadQs;\n                        return [4 /*yield*/, this._initializeRetryableHandshake(awsRealTimeUrl)];\n                    case 3:\n                        _c.sent();\n                        this.promiseArray.forEach(function (_a) {\n                            var res = _a.res;\n                            logger.debug('Notifying connection successful');\n                            res();\n                        });\n                        this.socketStatus = SOCKET_STATUS.READY;\n                        this.promiseArray = [];\n                        return [3 /*break*/, 5];\n                    case 4:\n                        err_3 = _c.sent();\n                        this.promiseArray.forEach(function (_a) {\n                            var rej = _a.rej;\n                            return rej(err_3);\n                        });\n                        this.promiseArray = [];\n                        if (this.awsRealTimeSocket &&\n                            this.awsRealTimeSocket.readyState === WebSocket.OPEN) {\n                            this.awsRealTimeSocket.close(3001);\n                        }\n                        this.awsRealTimeSocket = undefined;\n                        this.socketStatus = SOCKET_STATUS.CLOSED;\n                        return [3 /*break*/, 5];\n                    case 5: return [2 /*return*/];\n                }\n            });\n        }); });\n    };\n    AWSAppSyncRealTimeProvider.prototype._initializeRetryableHandshake = function (awsRealTimeUrl) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        logger.debug(\"Initializaling retryable Handshake\");\n                        return [4 /*yield*/, jitteredExponentialRetry(this._initializeHandshake.bind(this), [awsRealTimeUrl], MAX_DELAY_MS)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSAppSyncRealTimeProvider.prototype._initializeHandshake = function (awsRealTimeUrl) {\n        return __awaiter(this, void 0, void 0, function () {\n            var err_4, _a, errorType, errorCode;\n            var _this = this;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        logger.debug(\"Initializing handshake \" + awsRealTimeUrl);\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([1, 4, , 5]);\n                        return [4 /*yield*/, (function () {\n                                return new Promise(function (res, rej) {\n                                    var newSocket = _this.getNewWebSocket(awsRealTimeUrl, 'graphql-ws');\n                                    newSocket.onerror = function () {\n                                        logger.debug(\"WebSocket connection error\");\n                                    };\n                                    newSocket.onclose = function () {\n                                        _this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_FAILED);\n                                        rej(new Error('Connection handshake error'));\n                                    };\n                                    newSocket.onopen = function () {\n                                        _this.awsRealTimeSocket = newSocket;\n                                        return res();\n                                    };\n                                });\n                            })()];\n                    case 2:\n                        _b.sent();\n                        // Step 2: wait for ack from AWS AppSyncReaTime after sending init\n                        return [4 /*yield*/, (function () {\n                                return new Promise(function (res, rej) {\n                                    if (_this.awsRealTimeSocket) {\n                                        var ackOk_1 = false;\n                                        _this.awsRealTimeSocket.onerror = function (error) {\n                                            logger.debug(\"WebSocket error \" + JSON.stringify(error));\n                                        };\n                                        _this.awsRealTimeSocket.onclose = function (event) {\n                                            logger.debug(\"WebSocket closed \" + event.reason);\n                                            rej(new Error(JSON.stringify(event)));\n                                        };\n                                        _this.awsRealTimeSocket.onmessage = function (message) {\n                                            logger.debug(\"subscription message from AWS AppSyncRealTime: \" + message.data + \" \");\n                                            var data = JSON.parse(message.data);\n                                            var type = data.type, _a = data.payload, _b = (_a === void 0 ? {} : _a).connectionTimeoutMs, connectionTimeoutMs = _b === void 0 ? DEFAULT_KEEP_ALIVE_TIMEOUT : _b;\n                                            if (type === MESSAGE_TYPES.GQL_CONNECTION_ACK) {\n                                                ackOk_1 = true;\n                                                if (_this.awsRealTimeSocket) {\n                                                    _this.keepAliveTimeout = connectionTimeoutMs;\n                                                    _this.awsRealTimeSocket.onmessage =\n                                                        _this._handleIncomingSubscriptionMessage.bind(_this);\n                                                    _this.awsRealTimeSocket.onerror = function (err) {\n                                                        logger.debug(err);\n                                                        _this._errorDisconnect(CONTROL_MSG.CONNECTION_CLOSED);\n                                                    };\n                                                    _this.awsRealTimeSocket.onclose = function (event) {\n                                                        logger.debug(\"WebSocket closed \" + event.reason);\n                                                        _this._errorDisconnect(CONTROL_MSG.CONNECTION_CLOSED);\n                                                    };\n                                                }\n                                                res('Cool, connected to AWS AppSyncRealTime');\n                                                return;\n                                            }\n                                            if (type === MESSAGE_TYPES.GQL_CONNECTION_ERROR) {\n                                                var _c = data.payload, _d = (_c === void 0 ? {} : _c).errors, _e = __read(_d === void 0 ? [] : _d, 1), _f = _e[0], _g = _f === void 0 ? {} : _f, _h = _g.errorType, errorType = _h === void 0 ? '' : _h, _j = _g.errorCode, errorCode = _j === void 0 ? 0 : _j;\n                                                rej({ errorType: errorType, errorCode: errorCode });\n                                            }\n                                        };\n                                        var gqlInit = {\n                                            type: MESSAGE_TYPES.GQL_CONNECTION_INIT,\n                                        };\n                                        _this.awsRealTimeSocket.send(JSON.stringify(gqlInit));\n                                        var checkAckOk_1 = function (ackOk) {\n                                            if (!ackOk) {\n                                                _this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_FAILED);\n                                                rej(new Error(\"Connection timeout: ack from AWSAppSyncRealTime was not received after \" + CONNECTION_INIT_TIMEOUT + \" ms\"));\n                                            }\n                                        };\n                                        setTimeout(function () { return checkAckOk_1(ackOk_1); }, CONNECTION_INIT_TIMEOUT);\n                                    }\n                                });\n                            })()];\n                    case 3:\n                        // Step 2: wait for ack from AWS AppSyncReaTime after sending init\n                        _b.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        err_4 = _b.sent();\n                        _a = err_4, errorType = _a.errorType, errorCode = _a.errorCode;\n                        if (NON_RETRYABLE_CODES.includes(errorCode)) {\n                            throw new NonRetryableError(errorType);\n                        }\n                        else if (errorType) {\n                            throw new Error(errorType);\n                        }\n                        else {\n                            throw err_4;\n                        }\n                        return [3 /*break*/, 5];\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSAppSyncRealTimeProvider.prototype._awsRealTimeHeaderBasedAuth = function (_a) {\n        var authenticationType = _a.authenticationType, payload = _a.payload, canonicalUri = _a.canonicalUri, appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint, apiKey = _a.apiKey, region = _a.region, additionalHeaders = _a.additionalHeaders;\n        return __awaiter(this, void 0, void 0, function () {\n            var headerHandler, handler, host, result;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        headerHandler = {\n                            API_KEY: this._awsRealTimeApiKeyHeader.bind(this),\n                            AWS_IAM: this._awsRealTimeIAMHeader.bind(this),\n                            OPENID_CONNECT: this._awsRealTimeOPENIDHeader.bind(this),\n                            AMAZON_COGNITO_USER_POOLS: this._awsRealTimeCUPHeader.bind(this),\n                            AWS_LAMBDA: this._customAuthHeader,\n                        };\n                        if (!(!authenticationType || !headerHandler[authenticationType])) return [3 /*break*/, 1];\n                        logger.debug(\"Authentication type \" + authenticationType + \" not supported\");\n                        return [2 /*return*/, ''];\n                    case 1:\n                        handler = headerHandler[authenticationType];\n                        host = url.parse(appSyncGraphqlEndpoint !== null && appSyncGraphqlEndpoint !== void 0 ? appSyncGraphqlEndpoint : '').host;\n                        logger.debug(\"Authenticating with \" + authenticationType);\n                        return [4 /*yield*/, handler({\n                                payload: payload,\n                                canonicalUri: canonicalUri,\n                                appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n                                apiKey: apiKey,\n                                region: region,\n                                host: host,\n                                additionalHeaders: additionalHeaders,\n                            })];\n                    case 2:\n                        result = _b.sent();\n                        return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    AWSAppSyncRealTimeProvider.prototype._awsRealTimeCUPHeader = function (_a) {\n        var host = _a.host;\n        return __awaiter(this, void 0, void 0, function () {\n            var session;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, Auth.currentSession()];\n                    case 1:\n                        session = _b.sent();\n                        return [2 /*return*/, {\n                                Authorization: session.getAccessToken().getJwtToken(),\n                                host: host,\n                            }];\n                }\n            });\n        });\n    };\n    AWSAppSyncRealTimeProvider.prototype._awsRealTimeOPENIDHeader = function (_a) {\n        var host = _a.host;\n        return __awaiter(this, void 0, void 0, function () {\n            var token, federatedInfo, currentUser;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, Cache.getItem('federatedInfo')];\n                    case 1:\n                        federatedInfo = _b.sent();\n                        if (!federatedInfo) return [3 /*break*/, 2];\n                        token = federatedInfo.token;\n                        return [3 /*break*/, 4];\n                    case 2: return [4 /*yield*/, Auth.currentAuthenticatedUser()];\n                    case 3:\n                        currentUser = _b.sent();\n                        if (currentUser) {\n                            token = currentUser.token;\n                        }\n                        _b.label = 4;\n                    case 4:\n                        if (!token) {\n                            throw new Error('No federated jwt');\n                        }\n                        return [2 /*return*/, {\n                                Authorization: token,\n                                host: host,\n                            }];\n                }\n            });\n        });\n    };\n    AWSAppSyncRealTimeProvider.prototype._awsRealTimeApiKeyHeader = function (_a) {\n        var apiKey = _a.apiKey, host = _a.host;\n        return __awaiter(this, void 0, void 0, function () {\n            var dt, dtStr;\n            return __generator(this, function (_b) {\n                dt = new Date();\n                dtStr = dt.toISOString().replace(/[:\\-]|\\.\\d{3}/g, '');\n                return [2 /*return*/, {\n                        host: host,\n                        'x-amz-date': dtStr,\n                        'x-api-key': apiKey,\n                    }];\n            });\n        });\n    };\n    AWSAppSyncRealTimeProvider.prototype._awsRealTimeIAMHeader = function (_a) {\n        var payload = _a.payload, canonicalUri = _a.canonicalUri, appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint, region = _a.region;\n        return __awaiter(this, void 0, void 0, function () {\n            var endpointInfo, credentialsOK, creds, request, signed_params;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        endpointInfo = {\n                            region: region,\n                            service: 'appsync',\n                        };\n                        return [4 /*yield*/, this._ensureCredentials()];\n                    case 1:\n                        credentialsOK = _b.sent();\n                        if (!credentialsOK) {\n                            throw new Error('No credentials');\n                        }\n                        return [4 /*yield*/, Credentials.get().then(function (credentials) {\n                                var _a = credentials, secretAccessKey = _a.secretAccessKey, accessKeyId = _a.accessKeyId, sessionToken = _a.sessionToken;\n                                return {\n                                    secret_key: secretAccessKey,\n                                    access_key: accessKeyId,\n                                    session_token: sessionToken,\n                                };\n                            })];\n                    case 2:\n                        creds = _b.sent();\n                        request = {\n                            url: \"\" + appSyncGraphqlEndpoint + canonicalUri,\n                            data: payload,\n                            method: 'POST',\n                            headers: __assign({}, AWS_APPSYNC_REALTIME_HEADERS),\n                        };\n                        signed_params = Signer.sign(request, creds, endpointInfo);\n                        return [2 /*return*/, signed_params.headers];\n                }\n            });\n        });\n    };\n    AWSAppSyncRealTimeProvider.prototype._customAuthHeader = function (_a) {\n        var host = _a.host, additionalHeaders = _a.additionalHeaders;\n        if (!additionalHeaders || !additionalHeaders['Authorization']) {\n            throw new Error('No auth token specified');\n        }\n        return {\n            Authorization: additionalHeaders.Authorization,\n            host: host,\n        };\n    };\n    /**\n     * @private\n     */\n    AWSAppSyncRealTimeProvider.prototype._ensureCredentials = function () {\n        return Credentials.get()\n            .then(function (credentials) {\n            if (!credentials)\n                return false;\n            var cred = Credentials.shear(credentials);\n            logger.debug('set credentials for AWSAppSyncRealTimeProvider', cred);\n            return true;\n        })\n            .catch(function (err) {\n            logger.warn('ensure credentials error', err);\n            return false;\n        });\n    };\n    return AWSAppSyncRealTimeProvider;\n}(AbstractPubSubProvider));\nexport { AWSAppSyncRealTimeProvider };\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}