{"ast":null,"code":"var _jsxFileName = \"/Users/sanjayar/Desktop/moody-main copy/src/pages/meeting/VoiceCaptureControls.tsx\",\n    _s = $RefreshSig$();\n\nimport { Box, FormControlLabel, IconButton, LinearProgress, MenuItem, Popover, Switch, TextField, Typography } from \"@material-ui/core\";\nimport { useCallback, useState } from \"react\";\nimport { useAppSelector } from \"../../reduxHooks\";\nimport { activeMeetingRunning } from \"../../meetings/meetingsSelectors\";\nimport { useVoiceCapturingIfMeetingIsRunning, useVoiceEmotionCapturing } from \"./hooks\";\nimport { InfoOutlined } from \"@material-ui/icons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function VoiceCaptureControls({\n  handleMediaStream\n}) {\n  _s();\n\n  const meetingRunning = useAppSelector(activeMeetingRunning);\n  const [checked, setChecked] = useState(false);\n  const [warmupModel, extractAndPersistVoiceEmotionsCallback] = useVoiceEmotionCapturing();\n  const [modelLoading, setModelLoading] = useState(false);\n  const [audioDevices, setAudioDevices] = useState([]);\n  const [selectedAudioDevice, setSelectedAudioDevice] = useState(null);\n  const [startVoiceCapturing, stopVoiceCapturing] = useVoiceCapturingIfMeetingIsRunning(extractAndPersistVoiceEmotionsCallback);\n  const handeSelectAudioDevice = useCallback(async e => {\n    await setSelectedAudioDevice(e.target.value); // Stop accessing microphone\n\n    await stopVoiceCapturing();\n    handleMediaStream(undefined); // Acquire access to the microphone and start predicting the emotions\n\n    handleMediaStream(await startVoiceCapturing(e.target.value));\n  }, [handleMediaStream, startVoiceCapturing, stopVoiceCapturing]);\n  const handleVoiceCaptureSwitch = useCallback(async e => {\n    setChecked(e.target.checked);\n\n    if (meetingRunning) {\n      if (e.target.checked) {\n        setModelLoading(true);\n        await warmupModel();\n        setModelLoading(false); // Acquire access to the microphone and start predicting the emotions\n\n        handleMediaStream(await startVoiceCapturing()); // Enumerate all audio input devices after acquiring permission to the microphone\n\n        const devices = await navigator.mediaDevices.enumerateDevices();\n        const audioDevices = devices.filter(device => (device === null || device === void 0 ? void 0 : device.kind) === \"audioinput\");\n        setSelectedAudioDevice(audioDevices[0].deviceId);\n        setAudioDevices(audioDevices);\n      } else {\n        // Stop accessing microphone\n        await stopVoiceCapturing();\n        handleMediaStream(undefined);\n      }\n    }\n  }, [handleMediaStream, meetingRunning, startVoiceCapturing, stopVoiceCapturing, warmupModel]); // Popover\n\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  const handleOpenPopover = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClosePopover = () => {\n    setAnchorEl(null);\n  };\n\n  const open = Boolean(anchorEl);\n  return modelLoading ? /*#__PURE__*/_jsxDEV(Box, {\n    display: \"flex\",\n    width: 200,\n    alignItems: \"center\",\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      flexGrow: 1,\n      children: /*#__PURE__*/_jsxDEV(LinearProgress, {\n        color: \"primary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      ml: 2,\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        children: \"Warming up ...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(Box, {\n    display: \"flex\",\n    alignItems: \"center\",\n    children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n      control: /*#__PURE__*/_jsxDEV(Switch, {\n        checked: checked,\n        onChange: handleVoiceCaptureSwitch,\n        color: \"primary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this),\n      label: `${checked ? \"Disable\" : \"Enable\"} voice emotion tracking`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), checked && audioDevices.length > 1 && /*#__PURE__*/_jsxDEV(TextField, {\n      select: true,\n      label: \"Audio device\",\n      value: selectedAudioDevice,\n      onChange: handeSelectAudioDevice,\n      size: \"small\",\n      variant: \"outlined\",\n      style: {\n        width: 200\n      },\n      children: audioDevices.map(device => /*#__PURE__*/_jsxDEV(MenuItem, {\n        value: device.deviceId,\n        children: device.label\n      }, device.deviceId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }, this), !checked && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        ml: 2,\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          color: \"secondary\",\n          onClick: handleOpenPopover,\n          size: \"small\",\n          children: /*#__PURE__*/_jsxDEV(InfoOutlined, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Popover, {\n          open: open,\n          anchorEl: anchorEl,\n          onClose: handleClosePopover,\n          anchorOrigin: {\n            vertical: \"bottom\",\n            horizontal: \"center\"\n          },\n          transformOrigin: {\n            vertical: \"top\",\n            horizontal: \"center\"\n          },\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            p: 2,\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              children: \"If you enable this function, we will ask you to access your microphone in order to track the emotions transmitted by your voice. You can enable and disable it at any time during a meeting.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }, this)\n    }, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n}\n\n_s(VoiceCaptureControls, \"yl7LjmPXH9iILHSO4ArnvAgokrg=\", false, function () {\n  return [useAppSelector, useVoiceEmotionCapturing, useVoiceCapturingIfMeetingIsRunning];\n});\n\n_c = VoiceCaptureControls;\n\nvar _c;\n\n$RefreshReg$(_c, \"VoiceCaptureControls\");","map":{"version":3,"sources":["/Users/sanjayar/Desktop/moody-main copy/src/pages/meeting/VoiceCaptureControls.tsx"],"names":["Box","FormControlLabel","IconButton","LinearProgress","MenuItem","Popover","Switch","TextField","Typography","useCallback","useState","useAppSelector","activeMeetingRunning","useVoiceCapturingIfMeetingIsRunning","useVoiceEmotionCapturing","InfoOutlined","VoiceCaptureControls","handleMediaStream","meetingRunning","checked","setChecked","warmupModel","extractAndPersistVoiceEmotionsCallback","modelLoading","setModelLoading","audioDevices","setAudioDevices","selectedAudioDevice","setSelectedAudioDevice","startVoiceCapturing","stopVoiceCapturing","handeSelectAudioDevice","e","target","value","undefined","handleVoiceCaptureSwitch","devices","navigator","mediaDevices","enumerateDevices","filter","device","kind","deviceId","anchorEl","setAnchorEl","handleOpenPopover","event","currentTarget","handleClosePopover","open","Boolean","length","width","map","label","vertical","horizontal"],"mappings":"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","sourcesContent":["import {\n  Box,\n  FormControlLabel,\n  IconButton,\n  LinearProgress,\n  MenuItem,\n  Popover,\n  Switch,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport { ChangeEvent, useCallback, useState } from \"react\";\nimport { useAppSelector } from \"../../reduxHooks\";\nimport { activeMeetingRunning } from \"../../meetings/meetingsSelectors\";\nimport {\n  useVoiceCapturingIfMeetingIsRunning,\n  useVoiceEmotionCapturing,\n} from \"./hooks\";\nimport { InfoOutlined } from \"@material-ui/icons\";\n\ntype VoiceCaputreControlsProps = {\n  handleMediaStream: (mediaStream: MediaStream | undefined) => void;\n};\n\nexport default function VoiceCaptureControls({\n  handleMediaStream,\n}: VoiceCaputreControlsProps): JSX.Element {\n  const meetingRunning = useAppSelector(activeMeetingRunning);\n  const [checked, setChecked] = useState<boolean>(false);\n  const [warmupModel, extractAndPersistVoiceEmotionsCallback] =\n    useVoiceEmotionCapturing();\n  const [modelLoading, setModelLoading] = useState<boolean>(false);\n  const [audioDevices, setAudioDevices] = useState<InputDeviceInfo[]>([]);\n  const [selectedAudioDevice, setSelectedAudioDevice] = useState<string | null>(\n    null\n  );\n  const [startVoiceCapturing, stopVoiceCapturing] =\n    useVoiceCapturingIfMeetingIsRunning(extractAndPersistVoiceEmotionsCallback);\n\n  const handeSelectAudioDevice = useCallback(\n    async (e: ChangeEvent<HTMLInputElement>) => {\n      await setSelectedAudioDevice(e.target.value);\n\n      // Stop accessing microphone\n      await stopVoiceCapturing();\n      handleMediaStream(undefined);\n\n      // Acquire access to the microphone and start predicting the emotions\n      handleMediaStream(await startVoiceCapturing(e.target.value));\n    },\n    [handleMediaStream, startVoiceCapturing, stopVoiceCapturing]\n  );\n\n  const handleVoiceCaptureSwitch = useCallback(\n    async (e: ChangeEvent<HTMLInputElement>) => {\n      setChecked(e.target.checked);\n\n      if (meetingRunning) {\n        if (e.target.checked) {\n          setModelLoading(true);\n          await warmupModel();\n          setModelLoading(false);\n\n          // Acquire access to the microphone and start predicting the emotions\n          handleMediaStream(await startVoiceCapturing());\n\n          // Enumerate all audio input devices after acquiring permission to the microphone\n          const devices = await (\n            navigator.mediaDevices as any\n          ).enumerateDevices();\n          const audioDevices = devices.filter(\n            (device: any) => device?.kind === \"audioinput\"\n          );\n          setSelectedAudioDevice(audioDevices[0].deviceId);\n          setAudioDevices(audioDevices);\n        } else {\n          // Stop accessing microphone\n          await stopVoiceCapturing();\n          handleMediaStream(undefined);\n        }\n      }\n    },\n    [\n      handleMediaStream,\n      meetingRunning,\n      startVoiceCapturing,\n      stopVoiceCapturing,\n      warmupModel,\n    ]\n  );\n\n  // Popover\n  const [anchorEl, setAnchorEl] = useState<HTMLButtonElement | null>(null);\n\n  const handleOpenPopover = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClosePopover = () => {\n    setAnchorEl(null);\n  };\n\n  const open = Boolean(anchorEl);\n\n  return modelLoading ? (\n    <Box display=\"flex\" width={200} alignItems=\"center\">\n      <Box flexGrow={1}>\n        <LinearProgress color=\"primary\" />\n      </Box>\n      <Box ml={2}>\n        <Typography variant=\"body1\">Warming up ...</Typography>\n      </Box>\n    </Box>\n  ) : (\n    <Box display=\"flex\" alignItems=\"center\">\n      <FormControlLabel\n        control={\n          <Switch\n            checked={checked}\n            onChange={handleVoiceCaptureSwitch}\n            color=\"primary\"\n          />\n        }\n        label={`${checked ? \"Disable\" : \"Enable\"} voice emotion tracking`}\n      />\n      {checked && audioDevices.length > 1 && (\n        <TextField\n          select\n          label=\"Audio device\"\n          value={selectedAudioDevice}\n          onChange={handeSelectAudioDevice}\n          size=\"small\"\n          variant=\"outlined\"\n          style={{ width: 200 }}\n        >\n          {audioDevices.map((device: InputDeviceInfo) => (\n            <MenuItem key={device.deviceId} value={device.deviceId}>\n              {device.label}\n            </MenuItem>\n          ))}\n        </TextField>\n      )}\n      {!checked && (\n        <>\n          <Box ml={2}>\n            <IconButton\n              color=\"secondary\"\n              onClick={handleOpenPopover}\n              size=\"small\"\n            >\n              <InfoOutlined />\n            </IconButton>\n            <Popover\n              open={open}\n              anchorEl={anchorEl}\n              onClose={handleClosePopover}\n              anchorOrigin={{\n                vertical: \"bottom\",\n                horizontal: \"center\",\n              }}\n              transformOrigin={{\n                vertical: \"top\",\n                horizontal: \"center\",\n              }}\n            >\n              <Box p={2}>\n                <Typography variant=\"body2\">\n                  If you enable this function, we will ask you to access your\n                  microphone in order to track the emotions transmitted by your\n                  voice. You can enable and disable it at any time during a\n                  meeting.\n                </Typography>\n              </Box>\n            </Popover>\n          </Box>\n        </>\n      )}\n    </Box>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}