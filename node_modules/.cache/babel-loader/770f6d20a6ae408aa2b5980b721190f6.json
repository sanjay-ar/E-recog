{"ast":null,"code":"export default class FrequencyBarVisualizerService {\n  constructor(canvas, audioCtx, mediaStream) {\n    this.audioCtx = audioCtx;\n    this.mediaStream = mediaStream;\n    this.canvasCtx = void 0;\n    this.canvas = void 0;\n    this.WIDTH = void 0;\n    this.HEIGHT = void 0;\n\n    if (!canvas || !(canvas instanceof HTMLCanvasElement)) {\n      throw new Error(\"Did not get a valid Canvas element.\");\n    }\n\n    this.canvas = canvas;\n    this.WIDTH = this.canvas.width;\n    this.HEIGHT = this.canvas.height;\n    const canvasCtx = this.canvas.getContext(\"2d\");\n\n    if (!canvasCtx) {\n      throw new Error(\"Could not retrieve a valid Canvas 2D context.\");\n    }\n\n    this.canvasCtx = canvasCtx;\n  }\n\n  async startDrawing() {\n    const source = this.audioCtx.createMediaStreamSource(this.mediaStream);\n    const analyzer = this.audioCtx.createAnalyser();\n    source.connect(analyzer);\n    analyzer.fftSize = 64;\n    const bufferLength = analyzer.frequencyBinCount;\n    const dataArray = new Uint8Array(bufferLength);\n    let animationFrame;\n\n    const draw = () => {\n      animationFrame = requestAnimationFrame(draw);\n      this.canvasCtx.clearRect(0, 0, this.WIDTH, this.HEIGHT);\n      analyzer.getByteFrequencyData(dataArray);\n      const barWidth = this.WIDTH / bufferLength * 2;\n      let barHeight;\n      let x = 0;\n\n      for (let i = 0; i < bufferLength; i++) {\n        barHeight = dataArray[i];\n        this.canvasCtx.fillStyle = `rgb(38,${barHeight + 100},154)`;\n        this.canvasCtx.fillRect(x, this.HEIGHT - barHeight, barWidth, barHeight);\n        x += barWidth + 1;\n      }\n    };\n\n    draw();\n    return () => {\n      cancelAnimationFrame(animationFrame);\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/sanjayar/Desktop/moody-main copy 2/src/media/FrequencyBarVisualizerService.ts"],"names":["FrequencyBarVisualizerService","constructor","canvas","audioCtx","mediaStream","canvasCtx","WIDTH","HEIGHT","HTMLCanvasElement","Error","width","height","getContext","startDrawing","source","createMediaStreamSource","analyzer","createAnalyser","connect","fftSize","bufferLength","frequencyBinCount","dataArray","Uint8Array","animationFrame","draw","requestAnimationFrame","clearRect","getByteFrequencyData","barWidth","barHeight","x","i","fillStyle","fillRect","cancelAnimationFrame"],"mappings":"AAAA,eAAe,MAAMA,6BAAN,CAAoC;AAMjDC,EAAAA,WAAW,CACTC,MADS,EAEQC,QAFR,EAGQC,WAHR,EAIT;AAAA,SAFiBD,QAEjB,GAFiBA,QAEjB;AAAA,SADiBC,WACjB,GADiBA,WACjB;AAAA,SATeC,SASf;AAAA,SAReH,MAQf;AAAA,SAPeI,KAOf;AAAA,SANeC,MAMf;;AACA,QAAI,CAACL,MAAD,IAAW,EAAEA,MAAM,YAAYM,iBAApB,CAAf,EAAuD;AACrD,YAAM,IAAIC,KAAJ,CAAU,qCAAV,CAAN;AACD;;AACD,SAAKP,MAAL,GAAcA,MAAd;AACA,SAAKI,KAAL,GAAa,KAAKJ,MAAL,CAAYQ,KAAzB;AACA,SAAKH,MAAL,GAAc,KAAKL,MAAL,CAAYS,MAA1B;AAEA,UAAMN,SAAS,GAAG,KAAKH,MAAL,CAAYU,UAAZ,CAAuB,IAAvB,CAAlB;;AACA,QAAI,CAACP,SAAL,EAAgB;AACd,YAAM,IAAII,KAAJ,CAAU,+CAAV,CAAN;AACD;;AACD,SAAKJ,SAAL,GAAiBA,SAAjB;AACD;;AAEwB,QAAZQ,YAAY,GAAsB;AAC7C,UAAMC,MAAM,GAAG,KAAKX,QAAL,CAAcY,uBAAd,CAAsC,KAAKX,WAA3C,CAAf;AACA,UAAMY,QAAQ,GAAG,KAAKb,QAAL,CAAcc,cAAd,EAAjB;AACAH,IAAAA,MAAM,CAACI,OAAP,CAAeF,QAAf;AAEAA,IAAAA,QAAQ,CAACG,OAAT,GAAmB,EAAnB;AACA,UAAMC,YAAY,GAAGJ,QAAQ,CAACK,iBAA9B;AACA,UAAMC,SAAS,GAAG,IAAIC,UAAJ,CAAeH,YAAf,CAAlB;AAEA,QAAII,cAAJ;;AAEA,UAAMC,IAAI,GAAG,MAAM;AACjBD,MAAAA,cAAc,GAAGE,qBAAqB,CAACD,IAAD,CAAtC;AACA,WAAKpB,SAAL,CAAesB,SAAf,CAAyB,CAAzB,EAA4B,CAA5B,EAA+B,KAAKrB,KAApC,EAA2C,KAAKC,MAAhD;AAEAS,MAAAA,QAAQ,CAACY,oBAAT,CAA8BN,SAA9B;AAEA,YAAMO,QAAQ,GAAI,KAAKvB,KAAL,GAAac,YAAd,GAA8B,CAA/C;AACA,UAAIU,SAAJ;AACA,UAAIC,CAAC,GAAG,CAAR;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,YAApB,EAAkCY,CAAC,EAAnC,EAAuC;AACrCF,QAAAA,SAAS,GAAGR,SAAS,CAACU,CAAD,CAArB;AAEA,aAAK3B,SAAL,CAAe4B,SAAf,GAA4B,UAASH,SAAS,GAAG,GAAI,OAArD;AACA,aAAKzB,SAAL,CAAe6B,QAAf,CACEH,CADF,EAEE,KAAKxB,MAAL,GAAcuB,SAFhB,EAGED,QAHF,EAIEC,SAJF;AAOAC,QAAAA,CAAC,IAAIF,QAAQ,GAAG,CAAhB;AACD;AACF,KAvBD;;AAyBAJ,IAAAA,IAAI;AAEJ,WAAO,MAAM;AACXU,MAAAA,oBAAoB,CAACX,cAAD,CAApB;AACD,KAFD;AAGD;;AAlEgD","sourcesContent":["export default class FrequencyBarVisualizerService {\n  private readonly canvasCtx: CanvasRenderingContext2D;\n  private readonly canvas: HTMLCanvasElement;\n  private readonly WIDTH: number;\n  private readonly HEIGHT: number;\n\n  constructor(\n    canvas: HTMLCanvasElement | null,\n    private readonly audioCtx: AudioContext,\n    private readonly mediaStream: MediaStream\n  ) {\n    if (!canvas || !(canvas instanceof HTMLCanvasElement)) {\n      throw new Error(\"Did not get a valid Canvas element.\");\n    }\n    this.canvas = canvas;\n    this.WIDTH = this.canvas.width;\n    this.HEIGHT = this.canvas.height;\n\n    const canvasCtx = this.canvas.getContext(\"2d\");\n    if (!canvasCtx) {\n      throw new Error(\"Could not retrieve a valid Canvas 2D context.\");\n    }\n    this.canvasCtx = canvasCtx;\n  }\n\n  public async startDrawing(): Promise<Function> {\n    const source = this.audioCtx.createMediaStreamSource(this.mediaStream);\n    const analyzer = this.audioCtx.createAnalyser();\n    source.connect(analyzer);\n\n    analyzer.fftSize = 64;\n    const bufferLength = analyzer.frequencyBinCount;\n    const dataArray = new Uint8Array(bufferLength);\n\n    let animationFrame: number;\n\n    const draw = () => {\n      animationFrame = requestAnimationFrame(draw);\n      this.canvasCtx.clearRect(0, 0, this.WIDTH, this.HEIGHT);\n\n      analyzer.getByteFrequencyData(dataArray);\n\n      const barWidth = (this.WIDTH / bufferLength) * 2;\n      let barHeight;\n      let x = 0;\n\n      for (let i = 0; i < bufferLength; i++) {\n        barHeight = dataArray[i];\n\n        this.canvasCtx.fillStyle = `rgb(38,${barHeight + 100},154)`;\n        this.canvasCtx.fillRect(\n          x,\n          this.HEIGHT - barHeight,\n          barWidth,\n          barHeight\n        );\n\n        x += barWidth + 1;\n      }\n    };\n\n    draw();\n\n    return () => {\n      cancelAnimationFrame(animationFrame);\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}