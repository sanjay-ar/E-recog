{"ast":null,"code":"import { createSelector } from \"@reduxjs/toolkit\";\nimport { meetingsAdapter } from \"./meetingsSlice\";\nexport const {\n  selectAll: selectAllMeetings,\n  selectById: selectMeetingById\n} = meetingsAdapter.getSelectors(state => state.meetings);\nexport const selectActiveMeeting = state => selectMeetingById(state, state.meetings.activeMeeting); // Returns true if the currently visible meeting is running, else false\n\nexport const activeMeetingRunning = createSelector(selectActiveMeeting, activeMeeting => {\n  return !!(activeMeeting && !!activeMeeting.startedAt && !activeMeeting.stoppedAt);\n}); // Returns true if the currently active meeting has ended, else false\n\nexport const activeMeetingEnded = createSelector(selectActiveMeeting, activeMeeting => {\n  return !!(activeMeeting && !!activeMeeting.startedAt && !!activeMeeting.stoppedAt);\n});\nexport const selectActiveMeetingFeedbackLinkId = createSelector(selectActiveMeeting, activeMeeting => {\n  if (activeMeeting) {\n    var _activeMeeting$Public;\n\n    return (_activeMeeting$Public = activeMeeting.PublicMeetingInfo) === null || _activeMeeting$Public === void 0 ? void 0 : _activeMeeting$Public.id;\n  }\n});","map":{"version":3,"sources":["/Users/sanjayar/Desktop/moody-main copy 2/src/meetings/meetingsSelectors.ts"],"names":["createSelector","meetingsAdapter","selectAll","selectAllMeetings","selectById","selectMeetingById","getSelectors","state","meetings","selectActiveMeeting","activeMeeting","activeMeetingRunning","startedAt","stoppedAt","activeMeetingEnded","selectActiveMeetingFeedbackLinkId","PublicMeetingInfo","id"],"mappings":"AACA,SAASA,cAAT,QAAyC,kBAAzC;AAEA,SAASC,eAAT,QAAgC,iBAAhC;AAEA,OAAO,MAAM;AAAEC,EAAAA,SAAS,EAAEC,iBAAb;AAAgCC,EAAAA,UAAU,EAAEC;AAA5C,IACXJ,eAAe,CAACK,YAAhB,CAA8BC,KAAD,IAAsBA,KAAK,CAACC,QAAzD,CADK;AAGP,OAAO,MAAMC,mBAAmB,GAAIF,KAAD,IACjCF,iBAAiB,CAACE,KAAD,EAAQA,KAAK,CAACC,QAAN,CAAeE,aAAvB,CADZ,C,CAGP;;AACA,OAAO,MAAMC,oBAAoB,GAAGX,cAAc,CAChDS,mBADgD,EAE/CC,aAAD,IAAwC;AACtC,SAAO,CAAC,EACNA,aAAa,IACb,CAAC,CAACA,aAAa,CAACE,SADhB,IAEA,CAACF,aAAa,CAACG,SAHT,CAAR;AAKD,CAR+C,CAA3C,C,CAWP;;AACA,OAAO,MAAMC,kBAAkB,GAAGd,cAAc,CAC9CS,mBAD8C,EAE7CC,aAAD,IAAwC;AACtC,SAAO,CAAC,EACNA,aAAa,IACb,CAAC,CAACA,aAAa,CAACE,SADhB,IAEA,CAAC,CAACF,aAAa,CAACG,SAHV,CAAR;AAKD,CAR6C,CAAzC;AAWP,OAAO,MAAME,iCAAiC,GAAGf,cAAc,CAC7DS,mBAD6D,EAE5DC,aAAD,IAAwC;AACtC,MAAIA,aAAJ,EAAmB;AAAA;;AACjB,oCAAOA,aAAa,CAACM,iBAArB,0DAAO,sBAAiCC,EAAxC;AACD;AACF,CAN4D,CAAxD","sourcesContent":["import { RootState } from \"../reduxStore\";\nimport { createSelector, EntityId } from \"@reduxjs/toolkit\";\nimport { Meeting } from \"../models\";\nimport { meetingsAdapter } from \"./meetingsSlice\";\n\nexport const { selectAll: selectAllMeetings, selectById: selectMeetingById } =\n  meetingsAdapter.getSelectors((state: RootState) => state.meetings);\n\nexport const selectActiveMeeting = (state: RootState) =>\n  selectMeetingById(state, state.meetings.activeMeeting as EntityId);\n\n// Returns true if the currently visible meeting is running, else false\nexport const activeMeetingRunning = createSelector(\n  selectActiveMeeting,\n  (activeMeeting: Meeting | undefined) => {\n    return !!(\n      activeMeeting &&\n      !!activeMeeting.startedAt &&\n      !activeMeeting.stoppedAt\n    );\n  }\n);\n\n// Returns true if the currently active meeting has ended, else false\nexport const activeMeetingEnded = createSelector(\n  selectActiveMeeting,\n  (activeMeeting: Meeting | undefined) => {\n    return !!(\n      activeMeeting &&\n      !!activeMeeting.startedAt &&\n      !!activeMeeting.stoppedAt\n    );\n  }\n);\n\nexport const selectActiveMeetingFeedbackLinkId = createSelector(\n  selectActiveMeeting,\n  (activeMeeting: Meeting | undefined) => {\n    if (activeMeeting) {\n      return activeMeeting.PublicMeetingInfo?.id;\n    }\n  }\n);\n"]},"metadata":{},"sourceType":"module"}