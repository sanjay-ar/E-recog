{"ast":null,"code":"var _jsxFileName = \"/Users/sanjayar/Desktop/moody-main copy 2/src/pages/meeting/AudienceEmotionRollercoaster.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useAppSelector } from \"../../reduxHooks\";\nimport { selectActiveMeetingAudienceFaceExpressions } from \"../../meetings/audienceFaceExpressionSlice\";\nimport Plot from \"react-plotly.js\";\nimport { Box, Button, Checkbox, Dialog, DialogActions, DialogContent, DialogTitle, FormControlLabel, IconButton, Paper, Popover, TextField, Typography, useTheme } from \"@material-ui/core\";\nimport { InfoOutlined, MoreVert } from \"@material-ui/icons\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { selectActiveMeetingSpeakerVoiceEmotions } from \"../../meetings/speakerVoiceEmotionSlice\";\nimport { guessGoodMovingAverage, movingAverage } from \"../../utils\";\nimport { activeMeetingRunning } from \"../../meetings/meetingsSelectors\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MovingAverageSelect = ({\n  defaultAudienceMa,\n  defaultSpeakerMa,\n  callback\n}) => {\n  _s();\n\n  const meetingRunning = useAppSelector(activeMeetingRunning);\n  const [open, setOpen] = useState(false);\n  const [audienceMa, setAudienceMa] = useState(1);\n  const [speakerMa, setSpeakerMa] = useState(1);\n\n  const handleClickOpen = () => {\n    setAudienceMa(defaultAudienceMa);\n    setSpeakerMa(defaultSpeakerMa);\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleSave = () => {\n    callback(audienceMa, speakerMa);\n    handleClose();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(IconButton, {\n      size: \"small\",\n      onClick: handleClickOpen,\n      children: /*#__PURE__*/_jsxDEV(MoreVert, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      disableBackdropClick: true,\n      disableEscapeKeyDown: true,\n      open: open,\n      onClose: handleClose,\n      maxWidth: \"xs\",\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Moving average smoothing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          display: \"flex\",\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            mr: 2,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              id: \"audience-ma-input\",\n              type: \"number\",\n              inputProps: {\n                min: 1\n              },\n              label: \"Audience\",\n              value: audienceMa,\n              color: \"primary\",\n              disabled: meetingRunning,\n              onChange: e => {\n                setAudienceMa(parseInt(e.target.value, 10) || 1);\n              },\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              id: \"speaker-ma-input\",\n              type: \"number\",\n              inputProps: {\n                min: 1\n              },\n              label: \"Speaker\",\n              value: speakerMa,\n              color: \"secondary\",\n              disabled: meetingRunning,\n              onChange: e => {\n                setSpeakerMa(parseInt(e.target.value, 10) || 1);\n              },\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          mt: 2,\n          children: meetingRunning ? /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            children: \"The above values are guessed based on the curve variance and meeting duration. You can adjust the values after the meeting has finished.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            children: \"Higher values make the curves smoother. A value of 1 is equal to the original curve.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleClose,\n          color: \"secondary\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleSave,\n          color: \"primary\",\n          children: \"Ok\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(MovingAverageSelect, \"7T7VxDUnsjftSxXoh3BYXwoRi+w=\", false, function () {\n  return [useAppSelector];\n});\n\n_c = MovingAverageSelect;\nexport default function AudienceEmotionRollercoaster() {\n  _s2();\n\n  const theme = useTheme();\n  const audienceFaceExpressions = useAppSelector(selectActiveMeetingAudienceFaceExpressions);\n  const speakerVoiceEmotions = useAppSelector(selectActiveMeetingSpeakerVoiceEmotions); // Popover\n\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  const handleOpenPopover = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClosePopover = () => {\n    setAnchorEl(null);\n  };\n\n  const open = Boolean(anchorEl); // Moving average state\n\n  const [audienceMa, setAudienceMa] = useState(1);\n  const [speakerMa, setSpeakerMa] = useState(1);\n  const updateFromDialog = useCallback((audienceMa, speakerMa) => {\n    setAudienceMa(audienceMa);\n    setSpeakerMa(speakerMa);\n  }, []); // Guess good initial values for the moving average smoothing\n\n  useEffect(() => {\n    setAudienceMa(guessGoodMovingAverage(audienceFaceExpressions.map(e => e.score)));\n    setSpeakerMa(guessGoodMovingAverage(speakerVoiceEmotions.map(e => e.score)));\n  }, [audienceFaceExpressions, speakerVoiceEmotions]); // Checkbox\n\n  const [checkboxes, setCheckboxes] = useState({\n    audience: true,\n    speaker: true\n  });\n\n  const handleCheckboxes = event => {\n    setCheckboxes({ ...checkboxes,\n      [event.target.name]: event.target.checked\n    });\n  };\n\n  const data = [];\n\n  if (checkboxes.audience) {\n    data.push({\n      name: \"Audience face expressions\",\n      x: audienceFaceExpressions.map(e => new Date(e.timestamp)),\n      y: movingAverage(audienceFaceExpressions.map(e => e.score), audienceMa),\n      type: \"scatter\",\n      mode: \"lines\",\n      line: {\n        color: theme.palette.primary.main\n      }\n    });\n  }\n\n  if (checkboxes.speaker) {\n    data.push({\n      name: \"Speaker voice emotions\",\n      x: speakerVoiceEmotions.map(e => new Date(e.timestamp)),\n      y: movingAverage(speakerVoiceEmotions.map(e => e.score), speakerMa),\n      type: \"scatter\",\n      mode: \"lines\",\n      line: {\n        color: theme.palette.secondary.main\n      }\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    style: {\n      backgroundColor: 'transparent',\n      boxShadow: 'none'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      position: \"relative\",\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        position: \"absolute\",\n        top: 0,\n        right: 0,\n        zIndex: 1,\n        p: 1,\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          color: \"secondary\",\n          onClick: handleOpenPopover,\n          size: \"small\",\n          children: /*#__PURE__*/_jsxDEV(InfoOutlined, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Popover, {\n          open: open,\n          anchorEl: anchorEl,\n          onClose: handleClosePopover,\n          anchorOrigin: {\n            vertical: \"bottom\",\n            horizontal: \"center\"\n          },\n          transformOrigin: {\n            vertical: \"top\",\n            horizontal: \"center\"\n          },\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            p: 2,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              paragraph: true,\n              children: \"Shows the emotions by the audience for any given point in time on a range from -1 (negative) to +1 (positive). Emotion data is tracked every second.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              children: \"In addition, the speakers voice emotions are plotted for any given point in time on a range from -1 (negative) to +1 (positive). Voice emotion data is tracked every 2.1 seconds.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      px: 2,\n      py: 1,\n      children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n        control: /*#__PURE__*/_jsxDEV(Checkbox, {\n          color: \"primary\",\n          checked: checkboxes.audience,\n          onChange: handleCheckboxes,\n          name: \"audience\",\n          size: \"small\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 13\n        }, this),\n        label: \"Audience\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n        control: /*#__PURE__*/_jsxDEV(Checkbox, {\n          color: \"secondary\",\n          checked: checkboxes.speaker,\n          onChange: handleCheckboxes,\n          name: \"speaker\",\n          size: \"small\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 13\n        }, this),\n        label: \"Speaker\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MovingAverageSelect, {\n        callback: updateFromDialog,\n        defaultAudienceMa: audienceMa,\n        defaultSpeakerMa: speakerMa\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Plot, {\n      config: {\n        displayModeBar: false\n      },\n      layout: {\n        title: \"Emotion Rollercoaster\",\n        paper_bgcolor: \"transparent\",\n        plot_bgcolor: \"transparent\",\n        hoverlabel: {\n          bgcolor: theme.palette.primary.main\n        },\n        margin: {\n          l: 40,\n          r: 30,\n          t: 50,\n          b: 70\n        },\n        width: 750,\n        yaxis: {\n          range: [-1.1, 1.1]\n        },\n        font: {\n          family: theme.typography.fontFamily,\n          color: theme.palette.text.primary\n        },\n        showlegend: true,\n        legend: {\n          orientation: \"h\"\n        },\n        transition: {\n          duration: 500,\n          easing: \"cubic-in-out\"\n        }\n      },\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 223,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(AudienceEmotionRollercoaster, \"vTMBwweP3fi268lsZN/FmYyaZEc=\", false, function () {\n  return [useTheme, useAppSelector, useAppSelector];\n});\n\n_c2 = AudienceEmotionRollercoaster;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MovingAverageSelect\");\n$RefreshReg$(_c2, \"AudienceEmotionRollercoaster\");","map":{"version":3,"sources":["/Users/sanjayar/Desktop/moody-main copy 2/src/pages/meeting/AudienceEmotionRollercoaster.tsx"],"names":["useAppSelector","selectActiveMeetingAudienceFaceExpressions","Plot","Box","Button","Checkbox","Dialog","DialogActions","DialogContent","DialogTitle","FormControlLabel","IconButton","Paper","Popover","TextField","Typography","useTheme","InfoOutlined","MoreVert","React","useCallback","useEffect","useState","selectActiveMeetingSpeakerVoiceEmotions","guessGoodMovingAverage","movingAverage","activeMeetingRunning","MovingAverageSelect","defaultAudienceMa","defaultSpeakerMa","callback","meetingRunning","open","setOpen","audienceMa","setAudienceMa","speakerMa","setSpeakerMa","handleClickOpen","handleClose","handleSave","min","e","parseInt","target","value","AudienceEmotionRollercoaster","theme","audienceFaceExpressions","speakerVoiceEmotions","anchorEl","setAnchorEl","handleOpenPopover","event","currentTarget","handleClosePopover","Boolean","updateFromDialog","map","score","checkboxes","setCheckboxes","audience","speaker","handleCheckboxes","name","checked","data","push","x","Date","timestamp","y","type","mode","line","color","palette","primary","main","secondary","backgroundColor","boxShadow","vertical","horizontal","displayModeBar","title","paper_bgcolor","plot_bgcolor","hoverlabel","bgcolor","margin","l","r","t","b","width","yaxis","range","font","family","typography","fontFamily","text","showlegend","legend","orientation","transition","duration","easing"],"mappings":"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","sourcesContent":["import { useAppSelector } from \"../../reduxHooks\";\nimport { AudienceFaceExpression, SpeakerVoiceEmotion } from \"../../models\";\nimport { selectActiveMeetingAudienceFaceExpressions } from \"../../meetings/audienceFaceExpressionSlice\";\nimport Plot from \"react-plotly.js\";\nimport {\n  Box,\n  Button,\n  Checkbox,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  FormControlLabel,\n  IconButton,\n  Paper,\n  Popover,\n  TextField,\n  Typography,\n  useTheme,\n} from \"@material-ui/core\";\nimport { InfoOutlined, MoreVert } from \"@material-ui/icons\";\nimport React, {\n  ChangeEvent,\n  MouseEvent,\n  useCallback,\n  useEffect,\n  useState,\n} from \"react\";\nimport { selectActiveMeetingSpeakerVoiceEmotions } from \"../../meetings/speakerVoiceEmotionSlice\";\nimport { guessGoodMovingAverage, movingAverage } from \"../../utils\";\nimport { activeMeetingRunning } from \"../../meetings/meetingsSelectors\";\n\ntype MovingAverageSelectProps = {\n  callback: (audienceMa: number, speakerMa: number) => void;\n  defaultAudienceMa: number;\n  defaultSpeakerMa: number;\n};\n\nconst MovingAverageSelect = ({\n  defaultAudienceMa,\n  defaultSpeakerMa,\n  callback,\n}: MovingAverageSelectProps) => {\n  const meetingRunning = useAppSelector(activeMeetingRunning);\n  const [open, setOpen] = useState(false);\n  const [audienceMa, setAudienceMa] = useState<number>(1);\n  const [speakerMa, setSpeakerMa] = useState<number>(1);\n\n  const handleClickOpen = () => {\n    setAudienceMa(defaultAudienceMa);\n    setSpeakerMa(defaultSpeakerMa);\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleSave = () => {\n    callback(audienceMa, speakerMa);\n    handleClose();\n  };\n\n  return (\n    <>\n      <IconButton size=\"small\" onClick={handleClickOpen}>\n        <MoreVert />\n      </IconButton>\n      <Dialog\n        disableBackdropClick\n        disableEscapeKeyDown\n        open={open}\n        onClose={handleClose}\n        maxWidth=\"xs\"\n      >\n        <DialogTitle>Moving average smoothing</DialogTitle>\n        <DialogContent>\n          <Box display=\"flex\">\n            <Box mr={2}>\n              <TextField\n                id=\"audience-ma-input\"\n                type=\"number\"\n                inputProps={{\n                  min: 1,\n                }}\n                label=\"Audience\"\n                value={audienceMa}\n                color=\"primary\"\n                disabled={meetingRunning}\n                onChange={(e: ChangeEvent<HTMLInputElement>) => {\n                  setAudienceMa(parseInt(e.target.value, 10) || 1);\n                }}\n                required\n              />\n            </Box>\n            <Box>\n              <TextField\n                id=\"speaker-ma-input\"\n                type=\"number\"\n                inputProps={{\n                  min: 1,\n                }}\n                label=\"Speaker\"\n                value={speakerMa}\n                color=\"secondary\"\n                disabled={meetingRunning}\n                onChange={(e: ChangeEvent<HTMLInputElement>) => {\n                  setSpeakerMa(parseInt(e.target.value, 10) || 1);\n                }}\n                required\n              />\n            </Box>\n          </Box>\n          <Box mt={2}>\n            {meetingRunning ? (\n              <Typography variant=\"body2\">\n                The above values are guessed based on the curve variance and\n                meeting duration. You can adjust the values after the meeting\n                has finished.\n              </Typography>\n            ) : (\n              <Typography variant=\"body2\">\n                Higher values make the curves smoother. A value of 1 is equal to\n                the original curve.\n              </Typography>\n            )}\n          </Box>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"secondary\">\n            Cancel\n          </Button>\n          <Button onClick={handleSave} color=\"primary\">\n            Ok\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n\nexport default function AudienceEmotionRollercoaster(): JSX.Element {\n  const theme = useTheme();\n  const audienceFaceExpressions: AudienceFaceExpression[] = useAppSelector(\n    selectActiveMeetingAudienceFaceExpressions\n  );\n  const speakerVoiceEmotions: SpeakerVoiceEmotion[] = useAppSelector(\n    selectActiveMeetingSpeakerVoiceEmotions\n  );\n\n  // Popover\n  const [anchorEl, setAnchorEl] = useState<HTMLButtonElement | null>(null);\n\n  const handleOpenPopover = (event: MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClosePopover = () => {\n    setAnchorEl(null);\n  };\n\n  const open = Boolean(anchorEl);\n\n  // Moving average state\n  const [audienceMa, setAudienceMa] = useState<number>(1);\n  const [speakerMa, setSpeakerMa] = useState<number>(1);\n\n  const updateFromDialog = useCallback(\n    (audienceMa: number, speakerMa: number) => {\n      setAudienceMa(audienceMa);\n      setSpeakerMa(speakerMa);\n    },\n    []\n  );\n\n  // Guess good initial values for the moving average smoothing\n  useEffect(() => {\n    setAudienceMa(\n      guessGoodMovingAverage(audienceFaceExpressions.map((e) => e.score))\n    );\n    setSpeakerMa(\n      guessGoodMovingAverage(speakerVoiceEmotions.map((e) => e.score))\n    );\n  }, [audienceFaceExpressions, speakerVoiceEmotions]);\n\n  // Checkbox\n  const [checkboxes, setCheckboxes] = useState({\n    audience: true,\n    speaker: true,\n  });\n  const handleCheckboxes = (event: ChangeEvent<HTMLInputElement>) => {\n    setCheckboxes({ ...checkboxes, [event.target.name]: event.target.checked });\n  };\n  const data: object[] = [];\n  if (checkboxes.audience) {\n    data.push({\n      name: \"Audience face expressions\",\n      x: audienceFaceExpressions.map((e) => new Date(e.timestamp)),\n      y: movingAverage(\n        audienceFaceExpressions.map((e) => e.score),\n        audienceMa\n      ),\n      type: \"scatter\",\n      mode: \"lines\",\n      line: { color: theme.palette.primary.main },\n    });\n  }\n  if (checkboxes.speaker) {\n    data.push({\n      name: \"Speaker voice emotions\",\n      x: speakerVoiceEmotions.map((e) => new Date(e.timestamp)),\n      y: movingAverage(\n        speakerVoiceEmotions.map((e) => e.score),\n        speakerMa\n      ),\n      type: \"scatter\",\n      mode: \"lines\",\n      line: { color: theme.palette.secondary.main },\n    });\n  }\n\n  return (\n    <Paper style={{ backgroundColor: 'transparent', boxShadow: 'none' }}>\n      <Box position=\"relative\">\n        <Box position=\"absolute\" top={0} right={0} zIndex={1} p={1}>\n          <IconButton\n            color=\"secondary\"\n            onClick={handleOpenPopover}\n            size=\"small\"\n          >\n            <InfoOutlined />\n          </IconButton>\n          <Popover\n            open={open}\n            anchorEl={anchorEl}\n            onClose={handleClosePopover}\n            anchorOrigin={{\n              vertical: \"bottom\",\n              horizontal: \"center\",\n            }}\n            transformOrigin={{\n              vertical: \"top\",\n              horizontal: \"center\",\n            }}\n          >\n            <Box p={2}>\n              <Typography variant=\"body2\" paragraph>\n                Shows the emotions by the audience for any given point in time\n                on a range from -1 (negative) to +1 (positive). Emotion data is\n                tracked every second.\n              </Typography>\n              <Typography variant=\"body2\">\n                In addition, the speakers voice emotions are plotted for any\n                given point in time on a range from -1 (negative) to +1\n                (positive). Voice emotion data is tracked every 2.1 seconds.\n              </Typography>\n            </Box>\n          </Popover>\n        </Box>\n      </Box>\n      <Box px={2} py={1}>\n        <FormControlLabel\n          control={\n            <Checkbox\n              color=\"primary\"\n              checked={checkboxes.audience}\n              onChange={handleCheckboxes}\n              name=\"audience\"\n              size=\"small\"\n            />\n          }\n          label=\"Audience\"\n        />\n        <FormControlLabel\n          control={\n            <Checkbox\n              color=\"secondary\"\n              checked={checkboxes.speaker}\n              onChange={handleCheckboxes}\n              name=\"speaker\"\n              size=\"small\"\n            />\n          }\n          label=\"Speaker\"\n        />\n        <MovingAverageSelect\n          callback={updateFromDialog}\n          defaultAudienceMa={audienceMa}\n          defaultSpeakerMa={speakerMa}\n        />\n      </Box>\n      <Plot\n        config={{\n          displayModeBar: false,\n        }}\n        layout={{\n          title: \"Emotion Rollercoaster\",\n          paper_bgcolor: \"transparent\",\n          plot_bgcolor: \"transparent\",\n          hoverlabel: {\n            bgcolor: theme.palette.primary.main,\n          },\n          margin: {\n            l: 40,\n            r: 30,\n            t: 50,\n            b: 70,\n          },\n          width: 750,\n          yaxis: {\n            range: [-1.1, 1.1],\n          },\n          font: {\n            family: theme.typography.fontFamily,\n            color: theme.palette.text.primary,\n          },\n          showlegend: true,\n          legend: { orientation: \"h\" },\n          transition: {\n            duration: 500,\n            easing: \"cubic-in-out\",\n          },\n        }}\n        data={data}\n      />\n    </Paper>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}