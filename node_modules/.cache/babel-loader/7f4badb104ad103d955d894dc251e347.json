{"ast":null,"code":"var _jsxFileName = \"/Users/sanjayar/Desktop/moody-main copy 2/src/media/FrequencyBar.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useRef } from \"react\";\nimport FrequencyBarVisualizerService from \"./FrequencyBarVisualizerService\";\nimport { useAppDispatch } from \"../reduxHooks\";\nimport { addError } from \"../error/errorSlice\";\nimport { Card } from \"@material-ui/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function FrequencyBar({\n  width,\n  height\n}) {\n  _s();\n\n  const canvasRef = useRef(null);\n  const dispatch = useAppDispatch();\n  useEffect(() => {\n    let cancelAnimation;\n    let audioStream;\n\n    const draw = async () => {\n      try {\n        audioStream = await navigator.mediaDevices.getUserMedia({\n          audio: true,\n          video: false\n        });\n      } catch (e) {\n        const msg = \"Cannot access audio device: \" + e.message;\n        dispatch(addError(msg));\n        return console.error(msg);\n      }\n\n      const AudioContext = window.AudioContext || window.webkitAudioContext;\n      const visualizer = new FrequencyBarVisualizerService(canvasRef.current, new AudioContext(), audioStream);\n      cancelAnimation = await visualizer.startDrawing();\n    };\n\n    draw();\n    return () => {\n      var _audioStream;\n\n      (_audioStream = audioStream) === null || _audioStream === void 0 ? void 0 : _audioStream.getAudioTracks().forEach(track => track.stop());\n      !!cancelAnimation && cancelAnimation();\n    };\n  }, [dispatch]);\n  return /*#__PURE__*/_jsxDEV(Card, {\n    style: {\n      display: \"inline-block\",\n      padding: 0\n    },\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      width: width,\n      height: height,\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n\n_s(FrequencyBar, \"+azoQiWH8LsIWw5mYPSs3VdqGJI=\", false, function () {\n  return [useAppDispatch];\n});\n\n_c = FrequencyBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"FrequencyBar\");","map":{"version":3,"sources":["/Users/sanjayar/Desktop/moody-main copy 2/src/media/FrequencyBar.tsx"],"names":["useEffect","useRef","FrequencyBarVisualizerService","useAppDispatch","addError","Card","FrequencyBar","width","height","canvasRef","dispatch","cancelAnimation","audioStream","draw","navigator","mediaDevices","getUserMedia","audio","video","e","msg","message","console","error","AudioContext","window","webkitAudioContext","visualizer","current","startDrawing","getAudioTracks","forEach","track","stop","display","padding"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AACA,OAAOC,6BAAP,MAA0C,iCAA1C;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,IAAT,QAAqB,mBAArB;;AAOA,eAAe,SAASC,YAAT,CAAsB;AACnCC,EAAAA,KADmC;AAEnCC,EAAAA;AAFmC,CAAtB,EAGoB;AAAA;;AACjC,QAAMC,SAAS,GAAGR,MAAM,CAAoB,IAApB,CAAxB;AACA,QAAMS,QAAQ,GAAGP,cAAc,EAA/B;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIW,eAAJ;AACA,QAAIC,WAAJ;;AAEA,UAAMC,IAAI,GAAG,YAAY;AACvB,UAAI;AACFD,QAAAA,WAAW,GAAG,MAAME,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC;AACtDC,UAAAA,KAAK,EAAE,IAD+C;AAEtDC,UAAAA,KAAK,EAAE;AAF+C,SAApC,CAApB;AAID,OALD,CAKE,OAAOC,CAAP,EAAU;AACV,cAAMC,GAAG,GAAG,iCAAiCD,CAAC,CAACE,OAA/C;AACAX,QAAAA,QAAQ,CAACN,QAAQ,CAACgB,GAAD,CAAT,CAAR;AACA,eAAOE,OAAO,CAACC,KAAR,CAAcH,GAAd,CAAP;AACD;;AAED,YAAMI,YAAY,GAChBC,MAAM,CAACD,YAAP,IAAwBC,MAAD,CAAgBC,kBADzC;AAEA,YAAMC,UAAU,GAAG,IAAIzB,6BAAJ,CACjBO,SAAS,CAACmB,OADO,EAEjB,IAAIJ,YAAJ,EAFiB,EAGjBZ,WAHiB,CAAnB;AAKAD,MAAAA,eAAe,GAAG,MAAMgB,UAAU,CAACE,YAAX,EAAxB;AACD,KApBD;;AAqBAhB,IAAAA,IAAI;AAEJ,WAAO,MAAM;AAAA;;AACX,sBAAAD,WAAW,UAAX,oDAAakB,cAAb,GAA8BC,OAA9B,CAAuCC,KAAD,IAAWA,KAAK,CAACC,IAAN,EAAjD;AACA,OAAC,CAACtB,eAAF,IAAqBA,eAAe,EAApC;AACD,KAHD;AAID,GA/BQ,EA+BN,CAACD,QAAD,CA/BM,CAAT;AAiCA,sBACE,QAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEwB,MAAAA,OAAO,EAAE,cAAX;AAA2BC,MAAAA,OAAO,EAAE;AAApC,KAAb;AAAA,2BACE;AAAQ,MAAA,KAAK,EAAE5B,KAAf;AAAsB,MAAA,MAAM,EAAEC,MAA9B;AAAsC,MAAA,GAAG,EAAEC;AAA3C;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GA7CuBH,Y;UAKLH,c;;;KALKG,Y","sourcesContent":["import { useEffect, useRef } from \"react\";\nimport FrequencyBarVisualizerService from \"./FrequencyBarVisualizerService\";\nimport { useAppDispatch } from \"../reduxHooks\";\nimport { addError } from \"../error/errorSlice\";\nimport { Card } from \"@material-ui/core\";\n\ntype FrequencyBarProps = {\n  width?: number;\n  height?: number;\n};\n\nexport default function FrequencyBar({\n  width,\n  height,\n}: FrequencyBarProps): JSX.Element {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    let cancelAnimation: Function;\n    let audioStream: MediaStream;\n\n    const draw = async () => {\n      try {\n        audioStream = await navigator.mediaDevices.getUserMedia({\n          audio: true,\n          video: false,\n        });\n      } catch (e) {\n        const msg = \"Cannot access audio device: \" + e.message;\n        dispatch(addError(msg));\n        return console.error(msg);\n      }\n\n      const AudioContext =\n        window.AudioContext || (window as any).webkitAudioContext;\n      const visualizer = new FrequencyBarVisualizerService(\n        canvasRef.current,\n        new AudioContext(),\n        audioStream\n      );\n      cancelAnimation = await visualizer.startDrawing();\n    };\n    draw();\n\n    return () => {\n      audioStream?.getAudioTracks().forEach((track) => track.stop());\n      !!cancelAnimation && cancelAnimation();\n    };\n  }, [dispatch]);\n\n  return (\n    <Card style={{ display: \"inline-block\", padding: 0 }}>\n      <canvas width={width} height={height} ref={canvasRef} />\n    </Card>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}