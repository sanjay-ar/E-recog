{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { fetchAllCounters } from \"../counter/counterSlice\";\nimport { addMeeting, createFeedbackLink, fetchAllMeetings, fetchMeeting, removeMeeting, startMeeting, stopMeeting } from \"../meetings/meetingsSlice\";\nimport { fetchActiveMeetingRatings } from \"../meetings/ratingsSlice\";\nconst initialState = {\n  errors: []\n};\n\nconst addErrorReducer = (state, action) => {\n  var _action$error;\n\n  if ((_action$error = action.error) === null || _action$error === void 0 ? void 0 : _action$error.message) {\n    state.errors.push(action.type + \": \" + action.error.message);\n  }\n\n  if (action.payload && typeof action.payload === \"string\") {\n    state.errors.push(action.payload);\n  }\n};\n\nconst errorSlice = createSlice({\n  name: \"error\",\n  initialState,\n  reducers: {\n    clearError(state, action) {\n      delete state.errors[action.payload];\n    },\n\n    addError(state, action) {\n      addErrorReducer(state, action);\n    }\n\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchAllCounters.rejected, addErrorReducer);\n    builder.addCase(fetchAllMeetings.rejected, addErrorReducer);\n    builder.addCase(addMeeting.rejected, addErrorReducer);\n    builder.addCase(removeMeeting.rejected, addErrorReducer);\n    builder.addCase(fetchMeeting.rejected, addErrorReducer);\n    builder.addCase(startMeeting.rejected, addErrorReducer);\n    builder.addCase(stopMeeting.rejected, addErrorReducer);\n    builder.addCase(createFeedbackLink.rejected, addErrorReducer);\n    builder.addCase(fetchActiveMeetingRatings.rejected, addErrorReducer);\n  }\n});\nexport const {\n  clearError,\n  addError\n} = errorSlice.actions;\nexport default errorSlice.reducer;","map":{"version":3,"sources":["/Users/sanjayar/Desktop/moody-main/src/error/errorSlice.ts"],"names":["createSlice","fetchAllCounters","addMeeting","createFeedbackLink","fetchAllMeetings","fetchMeeting","removeMeeting","startMeeting","stopMeeting","fetchActiveMeetingRatings","initialState","errors","addErrorReducer","state","action","error","message","push","type","payload","errorSlice","name","reducers","clearError","addError","extraReducers","builder","addCase","rejected","actions","reducer"],"mappings":"AAAA,SAAsBA,WAAtB,QAAwD,kBAAxD;AACA,SAASC,gBAAT,QAAiC,yBAAjC;AACA,SACEC,UADF,EAEEC,kBAFF,EAGEC,gBAHF,EAIEC,YAJF,EAKEC,aALF,EAMEC,YANF,EAOEC,WAPF,QAQO,2BARP;AASA,SAASC,yBAAT,QAA0C,0BAA1C;AAMA,MAAMC,YAAwB,GAAG;AAC/BC,EAAAA,MAAM,EAAE;AADuB,CAAjC;;AAIA,MAAMC,eAA4B,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAAA;;AACtD,uBAAIA,MAAM,CAACC,KAAX,kDAAI,cAAcC,OAAlB,EAA2B;AACzBH,IAAAA,KAAK,CAACF,MAAN,CAAaM,IAAb,CAAkBH,MAAM,CAACI,IAAP,GAAc,IAAd,GAAqBJ,MAAM,CAACC,KAAP,CAAaC,OAApD;AACD;;AAED,MAAIF,MAAM,CAACK,OAAP,IAAkB,OAAOL,MAAM,CAACK,OAAd,KAA0B,QAAhD,EAA0D;AACxDN,IAAAA,KAAK,CAACF,MAAN,CAAaM,IAAb,CAAkBH,MAAM,CAACK,OAAzB;AACD;AACF,CARD;;AAUA,MAAMC,UAAU,GAAGpB,WAAW,CAAC;AAC7BqB,EAAAA,IAAI,EAAE,OADuB;AAE7BX,EAAAA,YAF6B;AAG7BY,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UAAU,CAACV,KAAD,EAAQC,MAAR,EAAuC;AAC/C,aAAOD,KAAK,CAACF,MAAN,CAAaG,MAAM,CAACK,OAApB,CAAP;AACD,KAHO;;AAIRK,IAAAA,QAAQ,CAACX,KAAD,EAAQC,MAAR,EAAuC;AAC7CF,MAAAA,eAAe,CAACC,KAAD,EAAQC,MAAR,CAAf;AACD;;AANO,GAHmB;AAW7BW,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CAACC,OAAR,CAAgB1B,gBAAgB,CAAC2B,QAAjC,EAA2ChB,eAA3C;AACAc,IAAAA,OAAO,CAACC,OAAR,CAAgBvB,gBAAgB,CAACwB,QAAjC,EAA2ChB,eAA3C;AACAc,IAAAA,OAAO,CAACC,OAAR,CAAgBzB,UAAU,CAAC0B,QAA3B,EAAqChB,eAArC;AACAc,IAAAA,OAAO,CAACC,OAAR,CAAgBrB,aAAa,CAACsB,QAA9B,EAAwChB,eAAxC;AACAc,IAAAA,OAAO,CAACC,OAAR,CAAgBtB,YAAY,CAACuB,QAA7B,EAAuChB,eAAvC;AACAc,IAAAA,OAAO,CAACC,OAAR,CAAgBpB,YAAY,CAACqB,QAA7B,EAAuChB,eAAvC;AACAc,IAAAA,OAAO,CAACC,OAAR,CAAgBnB,WAAW,CAACoB,QAA5B,EAAsChB,eAAtC;AACAc,IAAAA,OAAO,CAACC,OAAR,CAAgBxB,kBAAkB,CAACyB,QAAnC,EAA6ChB,eAA7C;AACAc,IAAAA,OAAO,CAACC,OAAR,CAAgBlB,yBAAyB,CAACmB,QAA1C,EAAoDhB,eAApD;AACD;AArB4B,CAAD,CAA9B;AAwBA,OAAO,MAAM;AAAEW,EAAAA,UAAF;AAAcC,EAAAA;AAAd,IAA2BJ,UAAU,CAACS,OAA5C;AAEP,eAAeT,UAAU,CAACU,OAA1B","sourcesContent":["import { CaseReducer, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { fetchAllCounters } from \"../counter/counterSlice\";\nimport {\n  addMeeting,\n  createFeedbackLink,\n  fetchAllMeetings,\n  fetchMeeting,\n  removeMeeting,\n  startMeeting,\n  stopMeeting,\n} from \"../meetings/meetingsSlice\";\nimport { fetchActiveMeetingRatings } from \"../meetings/ratingsSlice\";\n\ntype ErrorState = {\n  errors: string[];\n};\n\nconst initialState: ErrorState = {\n  errors: [],\n};\n\nconst addErrorReducer: CaseReducer = (state, action) => {\n  if (action.error?.message) {\n    state.errors.push(action.type + \": \" + action.error.message);\n  }\n\n  if (action.payload && typeof action.payload === \"string\") {\n    state.errors.push(action.payload);\n  }\n};\n\nconst errorSlice = createSlice({\n  name: \"error\",\n  initialState,\n  reducers: {\n    clearError(state, action: PayloadAction<number>) {\n      delete state.errors[action.payload];\n    },\n    addError(state, action: PayloadAction<string>) {\n      addErrorReducer(state, action);\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(fetchAllCounters.rejected, addErrorReducer);\n    builder.addCase(fetchAllMeetings.rejected, addErrorReducer);\n    builder.addCase(addMeeting.rejected, addErrorReducer);\n    builder.addCase(removeMeeting.rejected, addErrorReducer);\n    builder.addCase(fetchMeeting.rejected, addErrorReducer);\n    builder.addCase(startMeeting.rejected, addErrorReducer);\n    builder.addCase(stopMeeting.rejected, addErrorReducer);\n    builder.addCase(createFeedbackLink.rejected, addErrorReducer);\n    builder.addCase(fetchActiveMeetingRatings.rejected, addErrorReducer);\n  },\n});\n\nexport const { clearError, addError } = errorSlice.actions;\n\nexport default errorSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}