{"ast":null,"code":"import { Crc32 } from \"@aws-crypto/crc32\";\nimport { HeaderMarshaller } from \"./HeaderMarshaller\";\nimport { splitMessage } from \"./splitMessage\";\n\nvar EventStreamCodec = function () {\n  function EventStreamCodec(toUtf8, fromUtf8) {\n    this.headerMarshaller = new HeaderMarshaller(toUtf8, fromUtf8);\n  }\n\n  EventStreamCodec.prototype.encode = function (_a) {\n    var rawHeaders = _a.headers,\n        body = _a.body;\n    var headers = this.headerMarshaller.format(rawHeaders);\n    var length = headers.byteLength + body.byteLength + 16;\n    var out = new Uint8Array(length);\n    var view = new DataView(out.buffer, out.byteOffset, out.byteLength);\n    var checksum = new Crc32();\n    view.setUint32(0, length, false);\n    view.setUint32(4, headers.byteLength, false);\n    view.setUint32(8, checksum.update(out.subarray(0, 8)).digest(), false);\n    out.set(headers, 12);\n    out.set(body, headers.byteLength + 12);\n    view.setUint32(length - 4, checksum.update(out.subarray(8, length - 4)).digest(), false);\n    return out;\n  };\n\n  EventStreamCodec.prototype.decode = function (message) {\n    var _a = splitMessage(message),\n        headers = _a.headers,\n        body = _a.body;\n\n    return {\n      headers: this.headerMarshaller.parse(headers),\n      body: body\n    };\n  };\n\n  EventStreamCodec.prototype.formatHeaders = function (rawHeaders) {\n    return this.headerMarshaller.format(rawHeaders);\n  };\n\n  return EventStreamCodec;\n}();\n\nexport { EventStreamCodec };","map":{"version":3,"sources":["/Users/sanjayar/Desktop/moody-main copy 2/node_modules/@aws-sdk/eventstream-codec/dist-es/EventStreamCodec.js"],"names":["Crc32","HeaderMarshaller","splitMessage","EventStreamCodec","toUtf8","fromUtf8","headerMarshaller","prototype","encode","_a","rawHeaders","headers","body","format","length","byteLength","out","Uint8Array","view","DataView","buffer","byteOffset","checksum","setUint32","update","subarray","digest","set","decode","message","parse","formatHeaders"],"mappings":"AAAA,SAASA,KAAT,QAAsB,mBAAtB;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,YAAT,QAA6B,gBAA7B;;AACA,IAAIC,gBAAgB,GAAI,YAAY;AAChC,WAASA,gBAAT,CAA0BC,MAA1B,EAAkCC,QAAlC,EAA4C;AACxC,SAAKC,gBAAL,GAAwB,IAAIL,gBAAJ,CAAqBG,MAArB,EAA6BC,QAA7B,CAAxB;AACH;;AACDF,EAAAA,gBAAgB,CAACI,SAAjB,CAA2BC,MAA3B,GAAoC,UAAUC,EAAV,EAAc;AAC9C,QAAIC,UAAU,GAAGD,EAAE,CAACE,OAApB;AAAA,QAA6BC,IAAI,GAAGH,EAAE,CAACG,IAAvC;AACA,QAAID,OAAO,GAAG,KAAKL,gBAAL,CAAsBO,MAAtB,CAA6BH,UAA7B,CAAd;AACA,QAAII,MAAM,GAAGH,OAAO,CAACI,UAAR,GAAqBH,IAAI,CAACG,UAA1B,GAAuC,EAApD;AACA,QAAIC,GAAG,GAAG,IAAIC,UAAJ,CAAeH,MAAf,CAAV;AACA,QAAII,IAAI,GAAG,IAAIC,QAAJ,CAAaH,GAAG,CAACI,MAAjB,EAAyBJ,GAAG,CAACK,UAA7B,EAAyCL,GAAG,CAACD,UAA7C,CAAX;AACA,QAAIO,QAAQ,GAAG,IAAItB,KAAJ,EAAf;AACAkB,IAAAA,IAAI,CAACK,SAAL,CAAe,CAAf,EAAkBT,MAAlB,EAA0B,KAA1B;AACAI,IAAAA,IAAI,CAACK,SAAL,CAAe,CAAf,EAAkBZ,OAAO,CAACI,UAA1B,EAAsC,KAAtC;AACAG,IAAAA,IAAI,CAACK,SAAL,CAAe,CAAf,EAAkBD,QAAQ,CAACE,MAAT,CAAgBR,GAAG,CAACS,QAAJ,CAAa,CAAb,EAAgB,CAAhB,CAAhB,EAAoCC,MAApC,EAAlB,EAAgE,KAAhE;AACAV,IAAAA,GAAG,CAACW,GAAJ,CAAQhB,OAAR,EAAiB,EAAjB;AACAK,IAAAA,GAAG,CAACW,GAAJ,CAAQf,IAAR,EAAcD,OAAO,CAACI,UAAR,GAAqB,EAAnC;AACAG,IAAAA,IAAI,CAACK,SAAL,CAAeT,MAAM,GAAG,CAAxB,EAA2BQ,QAAQ,CAACE,MAAT,CAAgBR,GAAG,CAACS,QAAJ,CAAa,CAAb,EAAgBX,MAAM,GAAG,CAAzB,CAAhB,EAA6CY,MAA7C,EAA3B,EAAkF,KAAlF;AACA,WAAOV,GAAP;AACH,GAdD;;AAeAb,EAAAA,gBAAgB,CAACI,SAAjB,CAA2BqB,MAA3B,GAAoC,UAAUC,OAAV,EAAmB;AACnD,QAAIpB,EAAE,GAAGP,YAAY,CAAC2B,OAAD,CAArB;AAAA,QAAgClB,OAAO,GAAGF,EAAE,CAACE,OAA7C;AAAA,QAAsDC,IAAI,GAAGH,EAAE,CAACG,IAAhE;;AACA,WAAO;AAAED,MAAAA,OAAO,EAAE,KAAKL,gBAAL,CAAsBwB,KAAtB,CAA4BnB,OAA5B,CAAX;AAAiDC,MAAAA,IAAI,EAAEA;AAAvD,KAAP;AACH,GAHD;;AAIAT,EAAAA,gBAAgB,CAACI,SAAjB,CAA2BwB,aAA3B,GAA2C,UAAUrB,UAAV,EAAsB;AAC7D,WAAO,KAAKJ,gBAAL,CAAsBO,MAAtB,CAA6BH,UAA7B,CAAP;AACH,GAFD;;AAGA,SAAOP,gBAAP;AACH,CA3BuB,EAAxB;;AA4BA,SAASA,gBAAT","sourcesContent":["import { Crc32 } from \"@aws-crypto/crc32\";\nimport { HeaderMarshaller } from \"./HeaderMarshaller\";\nimport { splitMessage } from \"./splitMessage\";\nvar EventStreamCodec = (function () {\n    function EventStreamCodec(toUtf8, fromUtf8) {\n        this.headerMarshaller = new HeaderMarshaller(toUtf8, fromUtf8);\n    }\n    EventStreamCodec.prototype.encode = function (_a) {\n        var rawHeaders = _a.headers, body = _a.body;\n        var headers = this.headerMarshaller.format(rawHeaders);\n        var length = headers.byteLength + body.byteLength + 16;\n        var out = new Uint8Array(length);\n        var view = new DataView(out.buffer, out.byteOffset, out.byteLength);\n        var checksum = new Crc32();\n        view.setUint32(0, length, false);\n        view.setUint32(4, headers.byteLength, false);\n        view.setUint32(8, checksum.update(out.subarray(0, 8)).digest(), false);\n        out.set(headers, 12);\n        out.set(body, headers.byteLength + 12);\n        view.setUint32(length - 4, checksum.update(out.subarray(8, length - 4)).digest(), false);\n        return out;\n    };\n    EventStreamCodec.prototype.decode = function (message) {\n        var _a = splitMessage(message), headers = _a.headers, body = _a.body;\n        return { headers: this.headerMarshaller.parse(headers), body: body };\n    };\n    EventStreamCodec.prototype.formatHeaders = function (rawHeaders) {\n        return this.headerMarshaller.format(rawHeaders);\n    };\n    return EventStreamCodec;\n}());\nexport { EventStreamCodec };\n"]},"metadata":{},"sourceType":"module"}