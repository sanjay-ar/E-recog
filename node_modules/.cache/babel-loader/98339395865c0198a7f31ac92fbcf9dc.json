{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __asyncValues = this && this.__asyncValues || function (o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator],\n      i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () {\n    return this;\n  }, i);\n\n  function verb(n) {\n    i[n] = o[n] && function (v) {\n      return new Promise(function (resolve, reject) {\n        v = o[n](v), settle(resolve, reject, v.done, v.value);\n      });\n    };\n  }\n\n  function settle(resolve, reject, d, v) {\n    Promise.resolve(v).then(function (v) {\n      resolve({\n        value: v,\n        done: d\n      });\n    }, reject);\n  }\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n};\n\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport * as idb from 'idb';\nimport { ModelPredicateCreator, ModelSortPredicateCreator } from '../../predicates';\nimport { isPredicateObj, OpType, QueryOne } from '../../types';\nimport { exhaustiveCheck, getIndex, getIndexFromAssociation, isModelConstructor, isPrivateMode, traverseModel, validatePredicate, sortCompareFunction, keysEqual, getStorename, getIndexKeys, extractPrimaryKeyValues, isSafariCompatabilityMode } from '../../util';\nvar logger = new Logger('DataStore');\nvar DB_NAME = 'amplify-datastore';\n\nvar IndexedDBAdapter =\n/** @class */\nfunction () {\n  function IndexedDBAdapter() {\n    var _this = this;\n\n    this.dbName = DB_NAME;\n    this.safariCompatabilityMode = false;\n    /**\n     * Checks the given path against the browser's IndexedDB implementation for\n     * necessary compatibility transformations, applying those transforms if needed.\n     *\n     * @param `keyArr` strings to compatibilize for browser-indexeddb index operations\n     * @returns An array or string, depending on and given key,\n     * that is ensured to be compatible with the IndexedDB implementation's nuances.\n     */\n\n    this.canonicalKeyPath = function (keyArr) {\n      if (_this.safariCompatabilityMode) {\n        return keyArr.length > 1 ? keyArr : keyArr[0];\n      }\n\n      return keyArr;\n    };\n  }\n\n  IndexedDBAdapter.prototype.getStorenameForModel = function (modelConstructor) {\n    var namespace = this.namespaceResolver(modelConstructor);\n    var modelName = modelConstructor.name;\n    return getStorename(namespace, modelName);\n  }; // Retrieves primary key values from a model\n\n\n  IndexedDBAdapter.prototype.getIndexKeyValuesFromModel = function (model) {\n    var modelConstructor = Object.getPrototypeOf(model).constructor;\n    var namespaceName = this.namespaceResolver(modelConstructor);\n    var keys = getIndexKeys(this.schema.namespaces[namespaceName], modelConstructor.name);\n    return extractPrimaryKeyValues(model, keys);\n  };\n\n  IndexedDBAdapter.prototype.checkPrivate = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var isPrivate;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , isPrivateMode().then(function (isPrivate) {\n              return isPrivate;\n            })];\n\n          case 1:\n            isPrivate = _a.sent();\n\n            if (isPrivate) {\n              logger.error(\"IndexedDB not supported in this browser's private mode\");\n              return [2\n              /*return*/\n              , Promise.reject(\"IndexedDB not supported in this browser's private mode\")];\n            } else {\n              return [2\n              /*return*/\n              , Promise.resolve()];\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Whether the browser's implementation of IndexedDB is coercing single-field\n   * indexes to a scalar key.\n   *\n   * If this returns `true`, we need to treat indexes containing a single field\n   * as scalars.\n   *\n   * See PR description for reference:\n   * https://github.com/aws-amplify/amplify-js/pull/10527\n   */\n\n\n  IndexedDBAdapter.prototype.setSafariCompatabilityMode = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this;\n            return [4\n            /*yield*/\n            , isSafariCompatabilityMode()];\n\n          case 1:\n            _a.safariCompatabilityMode = _b.sent();\n\n            if (this.safariCompatabilityMode === true) {\n              logger.debug('IndexedDB Adapter is running in Safari Compatability Mode');\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.getNamespaceAndModelFromStorename = function (storeName) {\n    var _a = __read(storeName.split('_')),\n        namespaceName = _a[0],\n        modelNameArr = _a.slice(1);\n\n    return {\n      namespaceName: namespaceName,\n      modelName: modelNameArr.join('_')\n    };\n  };\n\n  IndexedDBAdapter.prototype.setUp = function (theSchema, namespaceResolver, modelInstanceCreator, getModelConstructorByModelName, sessionId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var VERSION, _a, error_1;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.checkPrivate()];\n\n          case 1:\n            _b.sent();\n\n            return [4\n            /*yield*/\n            , this.setSafariCompatabilityMode()];\n\n          case 2:\n            _b.sent();\n\n            if (!!this.initPromise) return [3\n            /*break*/\n            , 3];\n            this.initPromise = new Promise(function (res, rej) {\n              _this.resolve = res;\n              _this.reject = rej;\n            });\n            return [3\n            /*break*/\n            , 5];\n\n          case 3:\n            return [4\n            /*yield*/\n            , this.initPromise];\n\n          case 4:\n            _b.sent();\n\n            _b.label = 5;\n\n          case 5:\n            if (sessionId) {\n              this.dbName = DB_NAME + \"-\" + sessionId;\n            }\n\n            this.schema = theSchema;\n            this.namespaceResolver = namespaceResolver;\n            this.modelInstanceCreator = modelInstanceCreator;\n            this.getModelConstructorByModelName = getModelConstructorByModelName;\n            _b.label = 6;\n\n          case 6:\n            _b.trys.push([6, 9,, 10]);\n\n            if (!!this.db) return [3\n            /*break*/\n            , 8];\n            VERSION = 3;\n            _a = this;\n            return [4\n            /*yield*/\n            , idb.openDB(this.dbName, VERSION, {\n              upgrade: function (db, oldVersion, newVersion, txn) {\n                return __awaiter(_this, void 0, void 0, function () {\n                  var _a, _b, storeName, origStore, tmpName, _c, namespaceName, modelName, newStore, cursor, count, e_1_1, error_2;\n\n                  var e_1, _d;\n\n                  var _this = this;\n\n                  return __generator(this, function (_e) {\n                    switch (_e.label) {\n                      case 0:\n                        if (oldVersion === 0) {\n                          Object.keys(theSchema.namespaces).forEach(function (namespaceName) {\n                            var namespace = theSchema.namespaces[namespaceName];\n                            Object.keys(namespace.models).forEach(function (modelName) {\n                              var storeName = getStorename(namespaceName, modelName);\n\n                              _this.createObjectStoreForModel(db, namespaceName, storeName, modelName);\n                            });\n                          });\n                          return [2\n                          /*return*/\n                          ];\n                        }\n\n                        if (!((oldVersion === 1 || oldVersion === 2) && newVersion === 3)) return [3\n                        /*break*/\n                        , 16];\n                        _e.label = 1;\n\n                      case 1:\n                        _e.trys.push([1, 14,, 15]);\n\n                        _e.label = 2;\n\n                      case 2:\n                        _e.trys.push([2, 11, 12, 13]);\n\n                        _a = __values(txn.objectStoreNames), _b = _a.next();\n                        _e.label = 3;\n\n                      case 3:\n                        if (!!_b.done) return [3\n                        /*break*/\n                        , 10];\n                        storeName = _b.value;\n                        origStore = txn.objectStore(storeName);\n                        tmpName = \"tmp_\" + storeName;\n                        origStore.name = tmpName;\n                        _c = this.getNamespaceAndModelFromStorename(storeName), namespaceName = _c.namespaceName, modelName = _c.modelName;\n                        newStore = this.createObjectStoreForModel(db, namespaceName, storeName, modelName);\n                        return [4\n                        /*yield*/\n                        , origStore.openCursor()];\n\n                      case 4:\n                        cursor = _e.sent();\n                        count = 0;\n                        _e.label = 5;\n\n                      case 5:\n                        if (!(cursor && cursor.value)) return [3\n                        /*break*/\n                        , 8]; // we don't pass key, since they are all new entries in the new store\n\n                        return [4\n                        /*yield*/\n                        , newStore.put(cursor.value)];\n\n                      case 6:\n                        // we don't pass key, since they are all new entries in the new store\n                        _e.sent();\n\n                        return [4\n                        /*yield*/\n                        , cursor.continue()];\n\n                      case 7:\n                        cursor = _e.sent();\n                        count++;\n                        return [3\n                        /*break*/\n                        , 5];\n\n                      case 8:\n                        // delete original\n                        db.deleteObjectStore(tmpName);\n                        logger.debug(count + \" \" + storeName + \" records migrated\");\n                        _e.label = 9;\n\n                      case 9:\n                        _b = _a.next();\n                        return [3\n                        /*break*/\n                        , 3];\n\n                      case 10:\n                        return [3\n                        /*break*/\n                        , 13];\n\n                      case 11:\n                        e_1_1 = _e.sent();\n                        e_1 = {\n                          error: e_1_1\n                        };\n                        return [3\n                        /*break*/\n                        , 13];\n\n                      case 12:\n                        try {\n                          if (_b && !_b.done && (_d = _a.return)) _d.call(_a);\n                        } finally {\n                          if (e_1) throw e_1.error;\n                        }\n\n                        return [7\n                        /*endfinally*/\n                        ];\n\n                      case 13:\n                        // add new models created after IndexedDB, but before migration\n                        // this case may happen when a user has not opened an app for\n                        // some time and a new model is added during that time\n                        Object.keys(theSchema.namespaces).forEach(function (namespaceName) {\n                          var namespace = theSchema.namespaces[namespaceName];\n                          var objectStoreNames = new Set(txn.objectStoreNames);\n                          Object.keys(namespace.models).map(function (modelName) {\n                            return [modelName, getStorename(namespaceName, modelName)];\n                          }).filter(function (_a) {\n                            var _b = __read(_a, 2),\n                                storeName = _b[1];\n\n                            return !objectStoreNames.has(storeName);\n                          }).forEach(function (_a) {\n                            var _b = __read(_a, 2),\n                                modelName = _b[0],\n                                storeName = _b[1];\n\n                            _this.createObjectStoreForModel(db, namespaceName, storeName, modelName);\n                          });\n                        });\n                        return [3\n                        /*break*/\n                        , 15];\n\n                      case 14:\n                        error_2 = _e.sent();\n                        logger.error('Error migrating IndexedDB data', error_2);\n                        txn.abort();\n                        throw error_2;\n\n                      case 15:\n                        return [2\n                        /*return*/\n                        ];\n\n                      case 16:\n                        return [2\n                        /*return*/\n                        ];\n                    }\n                  });\n                });\n              }\n            })];\n\n          case 7:\n            _a.db = _b.sent();\n            this.resolve();\n            _b.label = 8;\n\n          case 8:\n            return [3\n            /*break*/\n            , 10];\n\n          case 9:\n            error_1 = _b.sent();\n            this.reject(error_1);\n            return [3\n            /*break*/\n            , 10];\n\n          case 10:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype._get = function (storeOrStoreName, keyArr) {\n    return __awaiter(this, void 0, void 0, function () {\n      var index, storeName, store, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (typeof storeOrStoreName === 'string') {\n              storeName = storeOrStoreName;\n              index = this.db.transaction(storeName, 'readonly').store.index('byPk');\n            } else {\n              store = storeOrStoreName;\n              index = store.index('byPk');\n            }\n\n            return [4\n            /*yield*/\n            , index.get(this.canonicalKeyPath(keyArr))];\n\n          case 1:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.save = function (model, condition) {\n    var e_2, _a;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var modelConstructor, storeName, namespaceName, connectedModels, set, connectionStoreNames, tx, store, keyValues, fromDB, predicates, predicateObjs, type, isValid, msg, result, connectionStoreNames_1, connectionStoreNames_1_1, resItem, storeName_1, item, instance, keys, store_1, itemKeyValues, fromDB_1, opType, modelKeyValues, key, e_2_1;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.checkPrivate()];\n\n          case 1:\n            _b.sent();\n\n            modelConstructor = Object.getPrototypeOf(model).constructor;\n            storeName = this.getStorenameForModel(modelConstructor);\n            namespaceName = this.namespaceResolver(modelConstructor);\n            connectedModels = traverseModel(modelConstructor.name, model, this.schema.namespaces[namespaceName], this.modelInstanceCreator, this.getModelConstructorByModelName);\n            set = new Set();\n            connectionStoreNames = Object.values(connectedModels).map(function (_a) {\n              var modelName = _a.modelName,\n                  item = _a.item,\n                  instance = _a.instance;\n              var storeName = getStorename(namespaceName, modelName);\n              set.add(storeName);\n              var keys = getIndexKeys(_this.schema.namespaces[namespaceName], modelName);\n              return {\n                storeName: storeName,\n                item: item,\n                instance: instance,\n                keys: keys\n              };\n            });\n            tx = this.db.transaction(__spread([storeName], Array.from(set.values())), 'readwrite');\n            store = tx.objectStore(storeName);\n            keyValues = this.getIndexKeyValuesFromModel(model);\n            return [4\n            /*yield*/\n            , this._get(store, keyValues)];\n\n          case 2:\n            fromDB = _b.sent();\n\n            if (condition && fromDB) {\n              predicates = ModelPredicateCreator.getPredicates(condition);\n              predicateObjs = predicates.predicates, type = predicates.type;\n              isValid = validatePredicate(fromDB, type, predicateObjs);\n\n              if (!isValid) {\n                msg = 'Conditional update failed';\n                logger.error(msg, {\n                  model: fromDB,\n                  condition: predicateObjs\n                });\n                throw new Error(msg);\n              }\n            }\n\n            result = [];\n            _b.label = 3;\n\n          case 3:\n            _b.trys.push([3, 11, 12, 17]);\n\n            connectionStoreNames_1 = __asyncValues(connectionStoreNames);\n            _b.label = 4;\n\n          case 4:\n            return [4\n            /*yield*/\n            , connectionStoreNames_1.next()];\n\n          case 5:\n            if (!(connectionStoreNames_1_1 = _b.sent(), !connectionStoreNames_1_1.done)) return [3\n            /*break*/\n            , 10];\n            resItem = connectionStoreNames_1_1.value;\n            storeName_1 = resItem.storeName, item = resItem.item, instance = resItem.instance, keys = resItem.keys;\n            store_1 = tx.objectStore(storeName_1);\n            itemKeyValues = keys.map(function (key) {\n              var value = item[key];\n              return value;\n            });\n            return [4\n            /*yield*/\n            , this._get(store_1, itemKeyValues)];\n\n          case 6:\n            fromDB_1 = _b.sent();\n            opType = fromDB_1 === undefined ? OpType.INSERT : OpType.UPDATE;\n            modelKeyValues = this.getIndexKeyValuesFromModel(model);\n            if (!(keysEqual(itemKeyValues, modelKeyValues) || opType === OpType.INSERT)) return [3\n            /*break*/\n            , 9];\n            return [4\n            /*yield*/\n            , store_1.index('byPk').getKey(this.canonicalKeyPath(itemKeyValues))];\n\n          case 7:\n            key = _b.sent();\n            return [4\n            /*yield*/\n            , store_1.put(item, key)];\n\n          case 8:\n            _b.sent();\n\n            result.push([instance, opType]);\n            _b.label = 9;\n\n          case 9:\n            return [3\n            /*break*/\n            , 4];\n\n          case 10:\n            return [3\n            /*break*/\n            , 17];\n\n          case 11:\n            e_2_1 = _b.sent();\n            e_2 = {\n              error: e_2_1\n            };\n            return [3\n            /*break*/\n            , 17];\n\n          case 12:\n            _b.trys.push([12,, 15, 16]);\n\n            if (!(connectionStoreNames_1_1 && !connectionStoreNames_1_1.done && (_a = connectionStoreNames_1.return))) return [3\n            /*break*/\n            , 14];\n            return [4\n            /*yield*/\n            , _a.call(connectionStoreNames_1)];\n\n          case 13:\n            _b.sent();\n\n            _b.label = 14;\n\n          case 14:\n            return [3\n            /*break*/\n            , 16];\n\n          case 15:\n            if (e_2) throw e_2.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 16:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 17:\n            return [4\n            /*yield*/\n            , tx.done];\n\n          case 18:\n            _b.sent();\n\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.load = function (namespaceName, srcModelName, records) {\n    var records_1, records_1_1, records_2, records_2_1;\n\n    var e_3, _a, e_4, _b, e_5, _c;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var namespace, relations, connectionStoreNames, modelConstructor, tx, relations_1, relations_1_1, relation, fieldName, modelName, targetName, targetNames, storeName, store, modelConstructor_1, _d, recordItem, getByFields, allPresent, keys, connectionRecord, getByfield, key, connectionRecord, e_4_1, recordItem, allPresent, keys, connectionRecord, key, connectionRecord, e_5_1, e_3_1;\n\n      var _this = this;\n\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            namespace = this.schema.namespaces[namespaceName];\n            relations = namespace.relationships[srcModelName].relationTypes;\n            connectionStoreNames = relations.map(function (_a) {\n              var modelName = _a.modelName;\n              return getStorename(namespaceName, modelName);\n            });\n            modelConstructor = this.getModelConstructorByModelName(namespaceName, srcModelName);\n\n            if (connectionStoreNames.length === 0) {\n              return [2\n              /*return*/\n              , records.map(function (record) {\n                return _this.modelInstanceCreator(modelConstructor, record);\n              })];\n            }\n\n            tx = this.db.transaction(__spread(connectionStoreNames), 'readonly');\n            _e.label = 1;\n\n          case 1:\n            _e.trys.push([1, 38, 39, 44]);\n\n            relations_1 = __asyncValues(relations);\n            _e.label = 2;\n\n          case 2:\n            return [4\n            /*yield*/\n            , relations_1.next()];\n\n          case 3:\n            if (!(relations_1_1 = _e.sent(), !relations_1_1.done)) return [3\n            /*break*/\n            , 37];\n            relation = relations_1_1.value;\n            fieldName = relation.fieldName, modelName = relation.modelName, targetName = relation.targetName, targetNames = relation.targetNames;\n            storeName = getStorename(namespaceName, modelName);\n            store = tx.objectStore(storeName);\n            modelConstructor_1 = this.getModelConstructorByModelName(namespaceName, modelName);\n            _d = relation.relationType;\n\n            switch (_d) {\n              case 'HAS_ONE':\n                return [3\n                /*break*/\n                , 4];\n\n              case 'BELONGS_TO':\n                return [3\n                /*break*/\n                , 19];\n\n              case 'HAS_MANY':\n                return [3\n                /*break*/\n                , 34];\n            }\n\n            return [3\n            /*break*/\n            , 35];\n\n          case 4:\n            _e.trys.push([4, 12, 13, 18]);\n\n            records_1 = __asyncValues(records);\n            _e.label = 5;\n\n          case 5:\n            return [4\n            /*yield*/\n            , records_1.next()];\n\n          case 6:\n            if (!(records_1_1 = _e.sent(), !records_1_1.done)) return [3\n            /*break*/\n            , 11];\n            recordItem = records_1_1.value;\n            if (!(targetNames === null || targetNames === void 0 ? void 0 : targetNames.length)) return [3\n            /*break*/\n            , 8];\n            getByFields = [];\n            allPresent = void 0; // iterate through all targetnames to make sure they are all present in the recordItem\n\n            allPresent = targetNames.every(function (targetName) {\n              return recordItem[targetName] != null;\n            });\n\n            if (!allPresent) {\n              return [3\n              /*break*/\n              , 11];\n            }\n\n            getByFields = targetNames;\n            keys = getByFields.map(function (getByField) {\n              return recordItem[getByField];\n            });\n            return [4\n            /*yield*/\n            , this._get(store, keys)];\n\n          case 7:\n            connectionRecord = _e.sent();\n            recordItem[fieldName] = connectionRecord && this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n            return [3\n            /*break*/\n            , 10];\n\n          case 8:\n            getByfield = recordItem[targetName] ? targetName : fieldName; // We break here, because the recordItem does not have 'team', the `getByField`\n            // extract the keys on the related model.\n\n            if (!recordItem[getByfield]) return [3\n            /*break*/\n            , 11];\n            key = [recordItem[getByfield]];\n            return [4\n            /*yield*/\n            , this._get(store, key)];\n\n          case 9:\n            connectionRecord = _e.sent();\n            recordItem[fieldName] = connectionRecord && this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n            _e.label = 10;\n\n          case 10:\n            return [3\n            /*break*/\n            , 5];\n\n          case 11:\n            return [3\n            /*break*/\n            , 18];\n\n          case 12:\n            e_4_1 = _e.sent();\n            e_4 = {\n              error: e_4_1\n            };\n            return [3\n            /*break*/\n            , 18];\n\n          case 13:\n            _e.trys.push([13,, 16, 17]);\n\n            if (!(records_1_1 && !records_1_1.done && (_b = records_1.return))) return [3\n            /*break*/\n            , 15];\n            return [4\n            /*yield*/\n            , _b.call(records_1)];\n\n          case 14:\n            _e.sent();\n\n            _e.label = 15;\n\n          case 15:\n            return [3\n            /*break*/\n            , 17];\n\n          case 16:\n            if (e_4) throw e_4.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 17:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 18:\n            return [3\n            /*break*/\n            , 36];\n\n          case 19:\n            _e.trys.push([19, 27, 28, 33]);\n\n            records_2 = __asyncValues(records);\n            _e.label = 20;\n\n          case 20:\n            return [4\n            /*yield*/\n            , records_2.next()];\n\n          case 21:\n            if (!(records_2_1 = _e.sent(), !records_2_1.done)) return [3\n            /*break*/\n            , 26];\n            recordItem = records_2_1.value;\n            if (!(targetNames === null || targetNames === void 0 ? void 0 : targetNames.length)) return [3\n            /*break*/\n            , 23];\n            allPresent = void 0; // iterate through all targetnames to make sure they are all present in the recordItem\n\n            allPresent = targetNames.every(function (targetName) {\n              return recordItem[targetName] != null;\n            }); // If not present, there is not yet a connected record\n\n            if (!allPresent) {\n              return [3\n              /*break*/\n              , 26];\n            }\n\n            keys = targetNames.filter(function (targetName) {\n              var _a;\n\n              return (_a = recordItem[targetName]) !== null && _a !== void 0 ? _a : false;\n            }).map(function (targetName) {\n              return recordItem[targetName];\n            });\n            return [4\n            /*yield*/\n            , this._get(store, keys)];\n\n          case 22:\n            connectionRecord = _e.sent();\n            recordItem[fieldName] = connectionRecord && this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n            targetNames === null || targetNames === void 0 ? void 0 : targetNames.map(function (targetName) {\n              delete recordItem[targetName];\n            });\n            return [3\n            /*break*/\n            , 25];\n\n          case 23:\n            if (!recordItem[targetName]) return [3\n            /*break*/\n            , 25];\n            key = [recordItem[targetName]];\n            return [4\n            /*yield*/\n            , this._get(store, key)];\n\n          case 24:\n            connectionRecord = _e.sent();\n            recordItem[fieldName] = connectionRecord && this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n            delete recordItem[targetName];\n            _e.label = 25;\n\n          case 25:\n            return [3\n            /*break*/\n            , 20];\n\n          case 26:\n            return [3\n            /*break*/\n            , 33];\n\n          case 27:\n            e_5_1 = _e.sent();\n            e_5 = {\n              error: e_5_1\n            };\n            return [3\n            /*break*/\n            , 33];\n\n          case 28:\n            _e.trys.push([28,, 31, 32]);\n\n            if (!(records_2_1 && !records_2_1.done && (_c = records_2.return))) return [3\n            /*break*/\n            , 30];\n            return [4\n            /*yield*/\n            , _c.call(records_2)];\n\n          case 29:\n            _e.sent();\n\n            _e.label = 30;\n\n          case 30:\n            return [3\n            /*break*/\n            , 32];\n\n          case 31:\n            if (e_5) throw e_5.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 32:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 33:\n            return [3\n            /*break*/\n            , 36];\n\n          case 34:\n            // TODO: Lazy loading\n            return [3\n            /*break*/\n            , 36];\n\n          case 35:\n            exhaustiveCheck(relation.relationType);\n            return [3\n            /*break*/\n            , 36];\n\n          case 36:\n            return [3\n            /*break*/\n            , 2];\n\n          case 37:\n            return [3\n            /*break*/\n            , 44];\n\n          case 38:\n            e_3_1 = _e.sent();\n            e_3 = {\n              error: e_3_1\n            };\n            return [3\n            /*break*/\n            , 44];\n\n          case 39:\n            _e.trys.push([39,, 42, 43]);\n\n            if (!(relations_1_1 && !relations_1_1.done && (_a = relations_1.return))) return [3\n            /*break*/\n            , 41];\n            return [4\n            /*yield*/\n            , _a.call(relations_1)];\n\n          case 40:\n            _e.sent();\n\n            _e.label = 41;\n\n          case 41:\n            return [3\n            /*break*/\n            , 43];\n\n          case 42:\n            if (e_3) throw e_3.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 43:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 44:\n            return [2\n            /*return*/\n            , records.map(function (record) {\n              return _this.modelInstanceCreator(modelConstructor, record);\n            })];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.query = function (modelConstructor, predicate, pagination) {\n    return __awaiter(this, void 0, void 0, function () {\n      var storeName, namespaceName, predicates, keyPath, queryByKey, hasSort, hasPagination, records;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.checkPrivate()];\n\n          case 1:\n            _a.sent();\n\n            storeName = this.getStorenameForModel(modelConstructor);\n            namespaceName = this.namespaceResolver(modelConstructor);\n            predicates = predicate && ModelPredicateCreator.getPredicates(predicate);\n            keyPath = getIndexKeys(this.schema.namespaces[namespaceName], modelConstructor.name);\n            queryByKey = predicates && this.keyValueFromPredicate(predicates, keyPath);\n            hasSort = pagination && pagination.sort;\n            hasPagination = pagination && pagination.limit;\n            return [4\n            /*yield*/\n            , function () {\n              return __awaiter(_this, void 0, void 0, function () {\n                var record, filtered, all;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      if (!queryByKey) return [3\n                      /*break*/\n                      , 2];\n                      return [4\n                      /*yield*/\n                      , this.getByKey(storeName, queryByKey)];\n\n                    case 1:\n                      record = _a.sent();\n                      return [2\n                      /*return*/\n                      , record ? [record] : []];\n\n                    case 2:\n                      if (!predicates) return [3\n                      /*break*/\n                      , 4];\n                      return [4\n                      /*yield*/\n                      , this.filterOnPredicate(storeName, predicates)];\n\n                    case 3:\n                      filtered = _a.sent();\n                      return [2\n                      /*return*/\n                      , this.inMemoryPagination(filtered, pagination)];\n\n                    case 4:\n                      if (!hasSort) return [3\n                      /*break*/\n                      , 6];\n                      return [4\n                      /*yield*/\n                      , this.getAll(storeName)];\n\n                    case 5:\n                      all = _a.sent();\n                      return [2\n                      /*return*/\n                      , this.inMemoryPagination(all, pagination)];\n\n                    case 6:\n                      if (hasPagination) {\n                        return [2\n                        /*return*/\n                        , this.enginePagination(storeName, pagination)];\n                      }\n\n                      return [2\n                      /*return*/\n                      , this.getAll(storeName)];\n                  }\n                });\n              });\n            }()];\n\n          case 2:\n            records = _a.sent();\n            return [4\n            /*yield*/\n            , this.load(namespaceName, modelConstructor.name, records)];\n\n          case 3:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.getByKey = function (storeName, keyValue) {\n    return __awaiter(this, void 0, void 0, function () {\n      var record;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._get(storeName, keyValue)];\n\n          case 1:\n            record = _a.sent();\n            return [2\n            /*return*/\n            , record];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.getAll = function (storeName) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.db.getAll(storeName)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.keyValueFromPredicate = function (predicates, keyPath) {\n    var e_6, _a;\n\n    var predicateObjs = predicates.predicates;\n\n    if (predicateObjs.length !== keyPath.length) {\n      return;\n    }\n\n    var keyValues = [];\n\n    var _loop_1 = function (key) {\n      var predicateObj = predicateObjs.find(function (p) {\n        return isPredicateObj(p) && p.field === key && p.operator === 'eq';\n      });\n      predicateObj && keyValues.push(predicateObj.operand);\n    };\n\n    try {\n      for (var keyPath_1 = __values(keyPath), keyPath_1_1 = keyPath_1.next(); !keyPath_1_1.done; keyPath_1_1 = keyPath_1.next()) {\n        var key = keyPath_1_1.value;\n\n        _loop_1(key);\n      }\n    } catch (e_6_1) {\n      e_6 = {\n        error: e_6_1\n      };\n    } finally {\n      try {\n        if (keyPath_1_1 && !keyPath_1_1.done && (_a = keyPath_1.return)) _a.call(keyPath_1);\n      } finally {\n        if (e_6) throw e_6.error;\n      }\n    }\n\n    return keyValues.length === keyPath.length ? keyValues : undefined;\n  };\n\n  IndexedDBAdapter.prototype.filterOnPredicate = function (storeName, predicates) {\n    return __awaiter(this, void 0, void 0, function () {\n      var predicateObjs, type, all, filtered;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            predicateObjs = predicates.predicates, type = predicates.type;\n            return [4\n            /*yield*/\n            , this.getAll(storeName)];\n\n          case 1:\n            all = _a.sent();\n            filtered = predicateObjs ? all.filter(function (m) {\n              return validatePredicate(m, type, predicateObjs);\n            }) : all;\n            return [2\n            /*return*/\n            , filtered];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.inMemoryPagination = function (records, pagination) {\n    if (pagination && records.length > 1) {\n      if (pagination.sort) {\n        var sortPredicates = ModelSortPredicateCreator.getPredicates(pagination.sort);\n\n        if (sortPredicates.length) {\n          var compareFn = sortCompareFunction(sortPredicates);\n          records.sort(compareFn);\n        }\n      }\n\n      var _a = pagination.page,\n          page = _a === void 0 ? 0 : _a,\n          _b = pagination.limit,\n          limit = _b === void 0 ? 0 : _b;\n      var start = Math.max(0, page * limit) || 0;\n      var end = limit > 0 ? start + limit : records.length;\n      return records.slice(start, end);\n    }\n\n    return records;\n  };\n\n  IndexedDBAdapter.prototype.enginePagination = function (storeName, pagination) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result, _a, page, _b, limit, initialRecord, cursor, pageResults, hasLimit;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            if (!pagination) return [3\n            /*break*/\n            , 7];\n            _a = pagination.page, page = _a === void 0 ? 0 : _a, _b = pagination.limit, limit = _b === void 0 ? 0 : _b;\n            initialRecord = Math.max(0, page * limit) || 0;\n            return [4\n            /*yield*/\n            , this.db.transaction(storeName).objectStore(storeName).openCursor()];\n\n          case 1:\n            cursor = _c.sent();\n            if (!(cursor && initialRecord > 0)) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , cursor.advance(initialRecord)];\n\n          case 2:\n            _c.sent();\n\n            _c.label = 3;\n\n          case 3:\n            pageResults = [];\n            hasLimit = typeof limit === 'number' && limit > 0;\n            _c.label = 4;\n\n          case 4:\n            if (!(cursor && cursor.value)) return [3\n            /*break*/\n            , 6];\n            pageResults.push(cursor.value);\n\n            if (hasLimit && pageResults.length === limit) {\n              return [3\n              /*break*/\n              , 6];\n            }\n\n            return [4\n            /*yield*/\n            , cursor.continue()];\n\n          case 5:\n            cursor = _c.sent();\n            return [3\n            /*break*/\n            , 4];\n\n          case 6:\n            result = pageResults;\n            return [3\n            /*break*/\n            , 9];\n\n          case 7:\n            return [4\n            /*yield*/\n            , this.db.getAll(storeName)];\n\n          case 8:\n            result = _c.sent();\n            _c.label = 9;\n\n          case 9:\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.queryOne = function (modelConstructor, firstOrLast) {\n    if (firstOrLast === void 0) {\n      firstOrLast = QueryOne.FIRST;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var storeName, cursor, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.checkPrivate()];\n\n          case 1:\n            _a.sent();\n\n            storeName = this.getStorenameForModel(modelConstructor);\n            return [4\n            /*yield*/\n            , this.db.transaction([storeName], 'readonly').objectStore(storeName).openCursor(undefined, firstOrLast === QueryOne.FIRST ? 'next' : 'prev')];\n\n          case 2:\n            cursor = _a.sent();\n            result = cursor ? cursor.value : undefined;\n            return [2\n            /*return*/\n            , result && this.modelInstanceCreator(modelConstructor, result)];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.delete = function (modelOrModelConstructor, condition) {\n    return __awaiter(this, void 0, void 0, function () {\n      var deleteQueue, modelConstructor, nameSpace, storeName, models, relations, deletedModels, deletedModels, model, modelConstructor, namespaceName, storeName, tx, store, keyValues, fromDB, msg, predicates, predicateObjs, type, isValid, msg, relations, relations, deletedModels;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.checkPrivate()];\n\n          case 1:\n            _a.sent();\n\n            deleteQueue = [];\n            if (!isModelConstructor(modelOrModelConstructor)) return [3\n            /*break*/\n            , 9];\n            modelConstructor = modelOrModelConstructor;\n            nameSpace = this.namespaceResolver(modelConstructor);\n            storeName = this.getStorenameForModel(modelConstructor);\n            return [4\n            /*yield*/\n            , this.query(modelConstructor, condition)];\n\n          case 2:\n            models = _a.sent();\n            relations = this.schema.namespaces[nameSpace].relationships[modelConstructor.name].relationTypes;\n            if (!(condition !== undefined)) return [3\n            /*break*/\n            , 5];\n            return [4\n            /*yield*/\n            , this.deleteTraverse(relations, models, modelConstructor.name, nameSpace, deleteQueue)];\n\n          case 3:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.deleteItem(deleteQueue)];\n\n          case 4:\n            _a.sent();\n\n            deletedModels = deleteQueue.reduce(function (acc, _a) {\n              var items = _a.items;\n              return acc.concat(items);\n            }, []);\n            return [2\n            /*return*/\n            , [models, deletedModels]];\n\n          case 5:\n            return [4\n            /*yield*/\n            , this.deleteTraverse(relations, models, modelConstructor.name, nameSpace, deleteQueue)];\n\n          case 6:\n            _a.sent(); // Delete all\n\n\n            return [4\n            /*yield*/\n            , this.db.transaction([storeName], 'readwrite').objectStore(storeName).clear()];\n\n          case 7:\n            // Delete all\n            _a.sent();\n\n            deletedModels = deleteQueue.reduce(function (acc, _a) {\n              var items = _a.items;\n              return acc.concat(items);\n            }, []);\n            return [2\n            /*return*/\n            , [models, deletedModels]];\n\n          case 8:\n            return [3\n            /*break*/\n            , 17];\n\n          case 9:\n            model = modelOrModelConstructor;\n            modelConstructor = Object.getPrototypeOf(model).constructor;\n            namespaceName = this.namespaceResolver(modelConstructor);\n            storeName = this.getStorenameForModel(modelConstructor);\n            if (!condition) return [3\n            /*break*/\n            , 13];\n            tx = this.db.transaction([storeName], 'readwrite');\n            store = tx.objectStore(storeName);\n            keyValues = this.getIndexKeyValuesFromModel(model);\n            return [4\n            /*yield*/\n            , this._get(store, keyValues)];\n\n          case 10:\n            fromDB = _a.sent();\n\n            if (fromDB === undefined) {\n              msg = 'Model instance not found in storage';\n              logger.warn(msg, {\n                model: model\n              });\n              return [2\n              /*return*/\n              , [[model], []]];\n            }\n\n            predicates = ModelPredicateCreator.getPredicates(condition);\n            predicateObjs = predicates.predicates, type = predicates.type;\n            isValid = validatePredicate(fromDB, type, predicateObjs);\n\n            if (!isValid) {\n              msg = 'Conditional update failed';\n              logger.error(msg, {\n                model: fromDB,\n                condition: predicateObjs\n              });\n              throw new Error(msg);\n            }\n\n            return [4\n            /*yield*/\n            , tx.done];\n\n          case 11:\n            _a.sent();\n\n            relations = this.schema.namespaces[namespaceName].relationships[modelConstructor.name].relationTypes;\n            return [4\n            /*yield*/\n            , this.deleteTraverse(relations, [model], modelConstructor.name, namespaceName, deleteQueue)];\n\n          case 12:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 15];\n\n          case 13:\n            relations = this.schema.namespaces[namespaceName].relationships[modelConstructor.name].relationTypes;\n            return [4\n            /*yield*/\n            , this.deleteTraverse(relations, [model], modelConstructor.name, namespaceName, deleteQueue)];\n\n          case 14:\n            _a.sent();\n\n            _a.label = 15;\n\n          case 15:\n            return [4\n            /*yield*/\n            , this.deleteItem(deleteQueue)];\n\n          case 16:\n            _a.sent();\n\n            deletedModels = deleteQueue.reduce(function (acc, _a) {\n              var items = _a.items;\n              return acc.concat(items);\n            }, []);\n            return [2\n            /*return*/\n            , [[model], deletedModels]];\n\n          case 17:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.deleteItem = function (deleteQueue) {\n    var deleteQueue_1, deleteQueue_1_1;\n\n    var e_7, _a, e_8, _b;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var connectionStoreNames, tx, deleteItem, storeName, items, store, items_1, items_1_1, item, key, keyValues, itemKey, e_8_1, e_7_1;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            connectionStoreNames = deleteQueue.map(function (_a) {\n              var storeName = _a.storeName;\n              return storeName;\n            });\n            tx = this.db.transaction(__spread(connectionStoreNames), 'readwrite');\n            _c.label = 1;\n\n          case 1:\n            _c.trys.push([1, 22, 23, 28]);\n\n            deleteQueue_1 = __asyncValues(deleteQueue);\n            _c.label = 2;\n\n          case 2:\n            return [4\n            /*yield*/\n            , deleteQueue_1.next()];\n\n          case 3:\n            if (!(deleteQueue_1_1 = _c.sent(), !deleteQueue_1_1.done)) return [3\n            /*break*/\n            , 21];\n            deleteItem = deleteQueue_1_1.value;\n            storeName = deleteItem.storeName, items = deleteItem.items;\n            store = tx.objectStore(storeName);\n            _c.label = 4;\n\n          case 4:\n            _c.trys.push([4, 14, 15, 20]);\n\n            items_1 = __asyncValues(items);\n            _c.label = 5;\n\n          case 5:\n            return [4\n            /*yield*/\n            , items_1.next()];\n\n          case 6:\n            if (!(items_1_1 = _c.sent(), !items_1_1.done)) return [3\n            /*break*/\n            , 13];\n            item = items_1_1.value;\n            if (!item) return [3\n            /*break*/\n            , 12];\n            key = void 0;\n            if (!(typeof item === 'object')) return [3\n            /*break*/\n            , 8];\n            keyValues = this.getIndexKeyValuesFromModel(item);\n            return [4\n            /*yield*/\n            , store.index('byPk').getKey(this.canonicalKeyPath(keyValues))];\n\n          case 7:\n            key = _c.sent();\n            return [3\n            /*break*/\n            , 10];\n\n          case 8:\n            itemKey = item.toString();\n            return [4\n            /*yield*/\n            , store.index('byPk').getKey(itemKey)];\n\n          case 9:\n            key = _c.sent();\n            _c.label = 10;\n\n          case 10:\n            if (!(key !== undefined)) return [3\n            /*break*/\n            , 12];\n            return [4\n            /*yield*/\n            , store.delete(key)];\n\n          case 11:\n            _c.sent();\n\n            _c.label = 12;\n\n          case 12:\n            return [3\n            /*break*/\n            , 5];\n\n          case 13:\n            return [3\n            /*break*/\n            , 20];\n\n          case 14:\n            e_8_1 = _c.sent();\n            e_8 = {\n              error: e_8_1\n            };\n            return [3\n            /*break*/\n            , 20];\n\n          case 15:\n            _c.trys.push([15,, 18, 19]);\n\n            if (!(items_1_1 && !items_1_1.done && (_b = items_1.return))) return [3\n            /*break*/\n            , 17];\n            return [4\n            /*yield*/\n            , _b.call(items_1)];\n\n          case 16:\n            _c.sent();\n\n            _c.label = 17;\n\n          case 17:\n            return [3\n            /*break*/\n            , 19];\n\n          case 18:\n            if (e_8) throw e_8.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 19:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 20:\n            return [3\n            /*break*/\n            , 2];\n\n          case 21:\n            return [3\n            /*break*/\n            , 28];\n\n          case 22:\n            e_7_1 = _c.sent();\n            e_7 = {\n              error: e_7_1\n            };\n            return [3\n            /*break*/\n            , 28];\n\n          case 23:\n            _c.trys.push([23,, 26, 27]);\n\n            if (!(deleteQueue_1_1 && !deleteQueue_1_1.done && (_a = deleteQueue_1.return))) return [3\n            /*break*/\n            , 25];\n            return [4\n            /*yield*/\n            , _a.call(deleteQueue_1)];\n\n          case 24:\n            _c.sent();\n\n            _c.label = 25;\n\n          case 25:\n            return [3\n            /*break*/\n            , 27];\n\n          case 26:\n            if (e_7) throw e_7.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 27:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 28:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.deleteTraverse = function (relations, models, srcModel, nameSpace, deleteQueue) {\n    var relations_2, relations_2_1, models_1, models_1_1, models_2, models_2_1;\n\n    var e_9, _a, e_10, _b, e_11, _c;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var rel, relationType, modelName, targetName, targetNames, associatedWith, storeName, _d, model, hasOneIndex, values, recordToDelete, index, values, value, recordToDelete, e_10_1, model, index, keyValues, childrenArray, e_11_1, e_9_1;\n\n      var _this = this;\n\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            _e.trys.push([0, 38, 39, 44]);\n\n            relations_2 = __asyncValues(relations);\n            _e.label = 1;\n\n          case 1:\n            return [4\n            /*yield*/\n            , relations_2.next()];\n\n          case 2:\n            if (!(relations_2_1 = _e.sent(), !relations_2_1.done)) return [3\n            /*break*/\n            , 37];\n            rel = relations_2_1.value;\n            relationType = rel.relationType, modelName = rel.modelName, targetName = rel.targetName, targetNames = rel.targetNames, associatedWith = rel.associatedWith;\n            storeName = getStorename(nameSpace, modelName);\n            _d = relationType;\n\n            switch (_d) {\n              case 'HAS_ONE':\n                return [3\n                /*break*/\n                , 3];\n\n              case 'HAS_MANY':\n                return [3\n                /*break*/\n                , 20];\n\n              case 'BELONGS_TO':\n                return [3\n                /*break*/\n                , 34];\n            }\n\n            return [3\n            /*break*/\n            , 35];\n\n          case 3:\n            _e.trys.push([3, 13, 14, 19]);\n\n            models_1 = __asyncValues(models);\n            _e.label = 4;\n\n          case 4:\n            return [4\n            /*yield*/\n            , models_1.next()];\n\n          case 5:\n            if (!(models_1_1 = _e.sent(), !models_1_1.done)) return [3\n            /*break*/\n            , 12];\n            model = models_1_1.value;\n            hasOneIndex = 'byPk';\n            if (!(targetNames === null || targetNames === void 0 ? void 0 : targetNames.length)) return [3\n            /*break*/\n            , 8];\n            values = targetNames.filter(function (targetName) {\n              var _a;\n\n              return (_a = model[targetName]) !== null && _a !== void 0 ? _a : false;\n            }).map(function (targetName) {\n              return model[targetName];\n            });\n            if (values.length === 0) return [3\n            /*break*/\n            , 12];\n            return [4\n            /*yield*/\n            , this.db.transaction(storeName, 'readwrite').objectStore(storeName).index(hasOneIndex).get(this.canonicalKeyPath(values))];\n\n          case 6:\n            recordToDelete = _e.sent();\n            return [4\n            /*yield*/\n            , this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, recordToDelete ? [recordToDelete] : [], modelName, nameSpace, deleteQueue)];\n\n          case 7:\n            _e.sent();\n\n            return [3\n            /*break*/\n            , 12];\n\n          case 8:\n            index = void 0;\n            values = void 0;\n\n            if (targetName && targetName in model) {\n              index = hasOneIndex;\n              value = model[targetName];\n              if (!value) return [3\n              /*break*/\n              , 12];\n              values = [value];\n            } else {\n              // backwards compatability for older versions of codegen that did not emit targetName for HAS_ONE relations\n              // TODO: can we deprecate this? it's been ~2 years since codegen started including targetName for HAS_ONE\n              // If we deprecate, we'll need to re-gen the MIPR in __tests__/schema.ts > newSchema\n              // otherwise some unit tests will fail\n              index = getIndex(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, srcModel);\n              values = this.getIndexKeyValuesFromModel(model);\n            }\n\n            if (!values || !index) return [3\n            /*break*/\n            , 12];\n            return [4\n            /*yield*/\n            , this.db.transaction(storeName, 'readwrite').objectStore(storeName).index(index).get(this.canonicalKeyPath(values))];\n\n          case 9:\n            recordToDelete = _e.sent();\n            return [4\n            /*yield*/\n            , this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, recordToDelete ? [recordToDelete] : [], modelName, nameSpace, deleteQueue)];\n\n          case 10:\n            _e.sent();\n\n            _e.label = 11;\n\n          case 11:\n            return [3\n            /*break*/\n            , 4];\n\n          case 12:\n            return [3\n            /*break*/\n            , 19];\n\n          case 13:\n            e_10_1 = _e.sent();\n            e_10 = {\n              error: e_10_1\n            };\n            return [3\n            /*break*/\n            , 19];\n\n          case 14:\n            _e.trys.push([14,, 17, 18]);\n\n            if (!(models_1_1 && !models_1_1.done && (_b = models_1.return))) return [3\n            /*break*/\n            , 16];\n            return [4\n            /*yield*/\n            , _b.call(models_1)];\n\n          case 15:\n            _e.sent();\n\n            _e.label = 16;\n\n          case 16:\n            return [3\n            /*break*/\n            , 18];\n\n          case 17:\n            if (e_10) throw e_10.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 18:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 19:\n            return [3\n            /*break*/\n            , 36];\n\n          case 20:\n            _e.trys.push([20, 27, 28, 33]);\n\n            models_2 = __asyncValues(models);\n            _e.label = 21;\n\n          case 21:\n            return [4\n            /*yield*/\n            , models_2.next()];\n\n          case 22:\n            if (!(models_2_1 = _e.sent(), !models_2_1.done)) return [3\n            /*break*/\n            , 26];\n            model = models_2_1.value;\n            index = // explicit bi-directional @hasMany and @manyToMany\n            getIndex(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, srcModel) || // uni and/or implicit @hasMany\n            getIndexFromAssociation(this.schema.namespaces[nameSpace].relationships[modelName].indexes, associatedWith);\n            keyValues = this.getIndexKeyValuesFromModel(model);\n            return [4\n            /*yield*/\n            , this.db.transaction(storeName, 'readwrite').objectStore(storeName).index(index).getAll(this.canonicalKeyPath(keyValues))];\n\n          case 23:\n            childrenArray = _e.sent();\n            return [4\n            /*yield*/\n            , this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, childrenArray, modelName, nameSpace, deleteQueue)];\n\n          case 24:\n            _e.sent();\n\n            _e.label = 25;\n\n          case 25:\n            return [3\n            /*break*/\n            , 21];\n\n          case 26:\n            return [3\n            /*break*/\n            , 33];\n\n          case 27:\n            e_11_1 = _e.sent();\n            e_11 = {\n              error: e_11_1\n            };\n            return [3\n            /*break*/\n            , 33];\n\n          case 28:\n            _e.trys.push([28,, 31, 32]);\n\n            if (!(models_2_1 && !models_2_1.done && (_c = models_2.return))) return [3\n            /*break*/\n            , 30];\n            return [4\n            /*yield*/\n            , _c.call(models_2)];\n\n          case 29:\n            _e.sent();\n\n            _e.label = 30;\n\n          case 30:\n            return [3\n            /*break*/\n            , 32];\n\n          case 31:\n            if (e_11) throw e_11.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 32:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 33:\n            return [3\n            /*break*/\n            , 36];\n\n          case 34:\n            // Intentionally blank\n            return [3\n            /*break*/\n            , 36];\n\n          case 35:\n            exhaustiveCheck(relationType);\n            return [3\n            /*break*/\n            , 36];\n\n          case 36:\n            return [3\n            /*break*/\n            , 1];\n\n          case 37:\n            return [3\n            /*break*/\n            , 44];\n\n          case 38:\n            e_9_1 = _e.sent();\n            e_9 = {\n              error: e_9_1\n            };\n            return [3\n            /*break*/\n            , 44];\n\n          case 39:\n            _e.trys.push([39,, 42, 43]);\n\n            if (!(relations_2_1 && !relations_2_1.done && (_a = relations_2.return))) return [3\n            /*break*/\n            , 41];\n            return [4\n            /*yield*/\n            , _a.call(relations_2)];\n\n          case 40:\n            _e.sent();\n\n            _e.label = 41;\n\n          case 41:\n            return [3\n            /*break*/\n            , 43];\n\n          case 42:\n            if (e_9) throw e_9.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 43:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 44:\n            deleteQueue.push({\n              storeName: getStorename(nameSpace, srcModel),\n              items: models.map(function (record) {\n                return _this.modelInstanceCreator(_this.getModelConstructorByModelName(nameSpace, srcModel), record);\n              })\n            });\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.clear = function () {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.checkPrivate()];\n\n          case 1:\n            _b.sent();\n\n            (_a = this.db) === null || _a === void 0 ? void 0 : _a.close();\n            return [4\n            /*yield*/\n            , idb.deleteDB(this.dbName)];\n\n          case 2:\n            _b.sent();\n\n            this.db = undefined;\n            this.initPromise = undefined;\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.batchSave = function (modelConstructor, items) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result, storeName, txn, store, _loop_2, this_1, items_2, items_2_1, item, e_12_1;\n\n      var e_12, _a;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (items.length === 0) {\n              return [2\n              /*return*/\n              , []];\n            }\n\n            return [4\n            /*yield*/\n            , this.checkPrivate()];\n\n          case 1:\n            _b.sent();\n\n            result = [];\n            storeName = this.getStorenameForModel(modelConstructor);\n            txn = this.db.transaction(storeName, 'readwrite');\n            store = txn.store;\n\n            _loop_2 = function (item) {\n              var namespaceName, modelName, model, connectedModels, keyValues, _deleted, index, key, instance;\n\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    namespaceName = this_1.namespaceResolver(modelConstructor);\n                    modelName = modelConstructor.name;\n                    model = this_1.modelInstanceCreator(modelConstructor, item);\n                    connectedModels = traverseModel(modelName, model, this_1.schema.namespaces[namespaceName], this_1.modelInstanceCreator, this_1.getModelConstructorByModelName);\n                    keyValues = this_1.getIndexKeyValuesFromModel(model);\n                    _deleted = item._deleted;\n                    index = store.index('byPk');\n                    return [4\n                    /*yield*/\n                    , index.getKey(this_1.canonicalKeyPath(keyValues))];\n\n                  case 1:\n                    key = _a.sent();\n                    if (!!_deleted) return [3\n                    /*break*/\n                    , 3];\n                    instance = connectedModels.find(function (_a) {\n                      var instance = _a.instance;\n\n                      var instanceKeyValues = _this.getIndexKeyValuesFromModel(instance);\n\n                      return keysEqual(instanceKeyValues, keyValues);\n                    }).instance;\n                    result.push([instance, key ? OpType.UPDATE : OpType.INSERT]);\n                    return [4\n                    /*yield*/\n                    , store.put(instance, key)];\n\n                  case 2:\n                    _a.sent();\n\n                    return [3\n                    /*break*/\n                    , 5];\n\n                  case 3:\n                    result.push([item, OpType.DELETE]);\n                    if (!key) return [3\n                    /*break*/\n                    , 5];\n                    return [4\n                    /*yield*/\n                    , store.delete(key)];\n\n                  case 4:\n                    _a.sent();\n\n                    _a.label = 5;\n\n                  case 5:\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            };\n\n            this_1 = this;\n            _b.label = 2;\n\n          case 2:\n            _b.trys.push([2, 7, 8, 9]);\n\n            items_2 = __values(items), items_2_1 = items_2.next();\n            _b.label = 3;\n\n          case 3:\n            if (!!items_2_1.done) return [3\n            /*break*/\n            , 6];\n            item = items_2_1.value;\n            return [5\n            /*yield**/\n            , _loop_2(item)];\n\n          case 4:\n            _b.sent();\n\n            _b.label = 5;\n\n          case 5:\n            items_2_1 = items_2.next();\n            return [3\n            /*break*/\n            , 3];\n\n          case 6:\n            return [3\n            /*break*/\n            , 9];\n\n          case 7:\n            e_12_1 = _b.sent();\n            e_12 = {\n              error: e_12_1\n            };\n            return [3\n            /*break*/\n            , 9];\n\n          case 8:\n            try {\n              if (items_2_1 && !items_2_1.done && (_a = items_2.return)) _a.call(items_2);\n            } finally {\n              if (e_12) throw e_12.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 9:\n            return [4\n            /*yield*/\n            , txn.done];\n\n          case 10:\n            _b.sent();\n\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.createObjectStoreForModel = function (db, namespaceName, storeName, modelName) {\n    var store = db.createObjectStore(storeName, {\n      autoIncrement: true\n    });\n    var indexes = this.schema.namespaces[namespaceName].relationships[modelName].indexes;\n    indexes.forEach(function (_a) {\n      var _b = __read(_a, 3),\n          idxName = _b[0],\n          keyPath = _b[1],\n          options = _b[2];\n\n      store.createIndex(idxName, keyPath, options);\n    });\n    return store;\n  };\n\n  return IndexedDBAdapter;\n}();\n\nexport default new IndexedDBAdapter();","map":{"version":3,"sources":["../../../src/storage/adapter/IndexedDBAdapter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __asyncValues = (this && this.__asyncValues) || function (o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport * as idb from 'idb';\nimport { ModelPredicateCreator, ModelSortPredicateCreator, } from '../../predicates';\nimport { isPredicateObj, OpType, QueryOne, } from '../../types';\nimport { exhaustiveCheck, getIndex, getIndexFromAssociation, isModelConstructor, isPrivateMode, traverseModel, validatePredicate, sortCompareFunction, keysEqual, getStorename, getIndexKeys, extractPrimaryKeyValues, isSafariCompatabilityMode, } from '../../util';\nvar logger = new Logger('DataStore');\nvar DB_NAME = 'amplify-datastore';\nvar IndexedDBAdapter = /** @class */ (function () {\n    function IndexedDBAdapter() {\n        var _this = this;\n        this.dbName = DB_NAME;\n        this.safariCompatabilityMode = false;\n        /**\n         * Checks the given path against the browser's IndexedDB implementation for\n         * necessary compatibility transformations, applying those transforms if needed.\n         *\n         * @param `keyArr` strings to compatibilize for browser-indexeddb index operations\n         * @returns An array or string, depending on and given key,\n         * that is ensured to be compatible with the IndexedDB implementation's nuances.\n         */\n        this.canonicalKeyPath = function (keyArr) {\n            if (_this.safariCompatabilityMode) {\n                return keyArr.length > 1 ? keyArr : keyArr[0];\n            }\n            return keyArr;\n        };\n    }\n    IndexedDBAdapter.prototype.getStorenameForModel = function (modelConstructor) {\n        var namespace = this.namespaceResolver(modelConstructor);\n        var modelName = modelConstructor.name;\n        return getStorename(namespace, modelName);\n    };\n    // Retrieves primary key values from a model\n    IndexedDBAdapter.prototype.getIndexKeyValuesFromModel = function (model) {\n        var modelConstructor = Object.getPrototypeOf(model)\n            .constructor;\n        var namespaceName = this.namespaceResolver(modelConstructor);\n        var keys = getIndexKeys(this.schema.namespaces[namespaceName], modelConstructor.name);\n        return extractPrimaryKeyValues(model, keys);\n    };\n    IndexedDBAdapter.prototype.checkPrivate = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var isPrivate;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, isPrivateMode().then(function (isPrivate) {\n                            return isPrivate;\n                        })];\n                    case 1:\n                        isPrivate = _a.sent();\n                        if (isPrivate) {\n                            logger.error(\"IndexedDB not supported in this browser's private mode\");\n                            return [2 /*return*/, Promise.reject(\"IndexedDB not supported in this browser's private mode\")];\n                        }\n                        else {\n                            return [2 /*return*/, Promise.resolve()];\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Whether the browser's implementation of IndexedDB is coercing single-field\n     * indexes to a scalar key.\n     *\n     * If this returns `true`, we need to treat indexes containing a single field\n     * as scalars.\n     *\n     * See PR description for reference:\n     * https://github.com/aws-amplify/amplify-js/pull/10527\n     */\n    IndexedDBAdapter.prototype.setSafariCompatabilityMode = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _a = this;\n                        return [4 /*yield*/, isSafariCompatabilityMode()];\n                    case 1:\n                        _a.safariCompatabilityMode = _b.sent();\n                        if (this.safariCompatabilityMode === true) {\n                            logger.debug('IndexedDB Adapter is running in Safari Compatability Mode');\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    IndexedDBAdapter.prototype.getNamespaceAndModelFromStorename = function (storeName) {\n        var _a = __read(storeName.split('_')), namespaceName = _a[0], modelNameArr = _a.slice(1);\n        return {\n            namespaceName: namespaceName,\n            modelName: modelNameArr.join('_'),\n        };\n    };\n    IndexedDBAdapter.prototype.setUp = function (theSchema, namespaceResolver, modelInstanceCreator, getModelConstructorByModelName, sessionId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var VERSION, _a, error_1;\n            var _this = this;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this.checkPrivate()];\n                    case 1:\n                        _b.sent();\n                        return [4 /*yield*/, this.setSafariCompatabilityMode()];\n                    case 2:\n                        _b.sent();\n                        if (!!this.initPromise) return [3 /*break*/, 3];\n                        this.initPromise = new Promise(function (res, rej) {\n                            _this.resolve = res;\n                            _this.reject = rej;\n                        });\n                        return [3 /*break*/, 5];\n                    case 3: return [4 /*yield*/, this.initPromise];\n                    case 4:\n                        _b.sent();\n                        _b.label = 5;\n                    case 5:\n                        if (sessionId) {\n                            this.dbName = DB_NAME + \"-\" + sessionId;\n                        }\n                        this.schema = theSchema;\n                        this.namespaceResolver = namespaceResolver;\n                        this.modelInstanceCreator = modelInstanceCreator;\n                        this.getModelConstructorByModelName = getModelConstructorByModelName;\n                        _b.label = 6;\n                    case 6:\n                        _b.trys.push([6, 9, , 10]);\n                        if (!!this.db) return [3 /*break*/, 8];\n                        VERSION = 3;\n                        _a = this;\n                        return [4 /*yield*/, idb.openDB(this.dbName, VERSION, {\n                                upgrade: function (db, oldVersion, newVersion, txn) { return __awaiter(_this, void 0, void 0, function () {\n                                    var _a, _b, storeName, origStore, tmpName, _c, namespaceName, modelName, newStore, cursor, count, e_1_1, error_2;\n                                    var e_1, _d;\n                                    var _this = this;\n                                    return __generator(this, function (_e) {\n                                        switch (_e.label) {\n                                            case 0:\n                                                if (oldVersion === 0) {\n                                                    Object.keys(theSchema.namespaces).forEach(function (namespaceName) {\n                                                        var namespace = theSchema.namespaces[namespaceName];\n                                                        Object.keys(namespace.models).forEach(function (modelName) {\n                                                            var storeName = getStorename(namespaceName, modelName);\n                                                            _this.createObjectStoreForModel(db, namespaceName, storeName, modelName);\n                                                        });\n                                                    });\n                                                    return [2 /*return*/];\n                                                }\n                                                if (!((oldVersion === 1 || oldVersion === 2) && newVersion === 3)) return [3 /*break*/, 16];\n                                                _e.label = 1;\n                                            case 1:\n                                                _e.trys.push([1, 14, , 15]);\n                                                _e.label = 2;\n                                            case 2:\n                                                _e.trys.push([2, 11, 12, 13]);\n                                                _a = __values(txn.objectStoreNames), _b = _a.next();\n                                                _e.label = 3;\n                                            case 3:\n                                                if (!!_b.done) return [3 /*break*/, 10];\n                                                storeName = _b.value;\n                                                origStore = txn.objectStore(storeName);\n                                                tmpName = \"tmp_\" + storeName;\n                                                origStore.name = tmpName;\n                                                _c = this.getNamespaceAndModelFromStorename(storeName), namespaceName = _c.namespaceName, modelName = _c.modelName;\n                                                newStore = this.createObjectStoreForModel(db, namespaceName, storeName, modelName);\n                                                return [4 /*yield*/, origStore.openCursor()];\n                                            case 4:\n                                                cursor = _e.sent();\n                                                count = 0;\n                                                _e.label = 5;\n                                            case 5:\n                                                if (!(cursor && cursor.value)) return [3 /*break*/, 8];\n                                                // we don't pass key, since they are all new entries in the new store\n                                                return [4 /*yield*/, newStore.put(cursor.value)];\n                                            case 6:\n                                                // we don't pass key, since they are all new entries in the new store\n                                                _e.sent();\n                                                return [4 /*yield*/, cursor.continue()];\n                                            case 7:\n                                                cursor = _e.sent();\n                                                count++;\n                                                return [3 /*break*/, 5];\n                                            case 8:\n                                                // delete original\n                                                db.deleteObjectStore(tmpName);\n                                                logger.debug(count + \" \" + storeName + \" records migrated\");\n                                                _e.label = 9;\n                                            case 9:\n                                                _b = _a.next();\n                                                return [3 /*break*/, 3];\n                                            case 10: return [3 /*break*/, 13];\n                                            case 11:\n                                                e_1_1 = _e.sent();\n                                                e_1 = { error: e_1_1 };\n                                                return [3 /*break*/, 13];\n                                            case 12:\n                                                try {\n                                                    if (_b && !_b.done && (_d = _a.return)) _d.call(_a);\n                                                }\n                                                finally { if (e_1) throw e_1.error; }\n                                                return [7 /*endfinally*/];\n                                            case 13:\n                                                // add new models created after IndexedDB, but before migration\n                                                // this case may happen when a user has not opened an app for\n                                                // some time and a new model is added during that time\n                                                Object.keys(theSchema.namespaces).forEach(function (namespaceName) {\n                                                    var namespace = theSchema.namespaces[namespaceName];\n                                                    var objectStoreNames = new Set(txn.objectStoreNames);\n                                                    Object.keys(namespace.models)\n                                                        .map(function (modelName) {\n                                                        return [\n                                                            modelName,\n                                                            getStorename(namespaceName, modelName),\n                                                        ];\n                                                    })\n                                                        .filter(function (_a) {\n                                                        var _b = __read(_a, 2), storeName = _b[1];\n                                                        return !objectStoreNames.has(storeName);\n                                                    })\n                                                        .forEach(function (_a) {\n                                                        var _b = __read(_a, 2), modelName = _b[0], storeName = _b[1];\n                                                        _this.createObjectStoreForModel(db, namespaceName, storeName, modelName);\n                                                    });\n                                                });\n                                                return [3 /*break*/, 15];\n                                            case 14:\n                                                error_2 = _e.sent();\n                                                logger.error('Error migrating IndexedDB data', error_2);\n                                                txn.abort();\n                                                throw error_2;\n                                            case 15: return [2 /*return*/];\n                                            case 16: return [2 /*return*/];\n                                        }\n                                    });\n                                }); },\n                            })];\n                    case 7:\n                        _a.db = _b.sent();\n                        this.resolve();\n                        _b.label = 8;\n                    case 8: return [3 /*break*/, 10];\n                    case 9:\n                        error_1 = _b.sent();\n                        this.reject(error_1);\n                        return [3 /*break*/, 10];\n                    case 10: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    IndexedDBAdapter.prototype._get = function (storeOrStoreName, keyArr) {\n        return __awaiter(this, void 0, void 0, function () {\n            var index, storeName, store, result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (typeof storeOrStoreName === 'string') {\n                            storeName = storeOrStoreName;\n                            index = this.db.transaction(storeName, 'readonly').store.index('byPk');\n                        }\n                        else {\n                            store = storeOrStoreName;\n                            index = store.index('byPk');\n                        }\n                        return [4 /*yield*/, index.get(this.canonicalKeyPath(keyArr))];\n                    case 1:\n                        result = _a.sent();\n                        return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    IndexedDBAdapter.prototype.save = function (model, condition) {\n        var e_2, _a;\n        return __awaiter(this, void 0, void 0, function () {\n            var modelConstructor, storeName, namespaceName, connectedModels, set, connectionStoreNames, tx, store, keyValues, fromDB, predicates, predicateObjs, type, isValid, msg, result, connectionStoreNames_1, connectionStoreNames_1_1, resItem, storeName_1, item, instance, keys, store_1, itemKeyValues, fromDB_1, opType, modelKeyValues, key, e_2_1;\n            var _this = this;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this.checkPrivate()];\n                    case 1:\n                        _b.sent();\n                        modelConstructor = Object.getPrototypeOf(model)\n                            .constructor;\n                        storeName = this.getStorenameForModel(modelConstructor);\n                        namespaceName = this.namespaceResolver(modelConstructor);\n                        connectedModels = traverseModel(modelConstructor.name, model, this.schema.namespaces[namespaceName], this.modelInstanceCreator, this.getModelConstructorByModelName);\n                        set = new Set();\n                        connectionStoreNames = Object.values(connectedModels).map(function (_a) {\n                            var modelName = _a.modelName, item = _a.item, instance = _a.instance;\n                            var storeName = getStorename(namespaceName, modelName);\n                            set.add(storeName);\n                            var keys = getIndexKeys(_this.schema.namespaces[namespaceName], modelName);\n                            return { storeName: storeName, item: item, instance: instance, keys: keys };\n                        });\n                        tx = this.db.transaction(__spread([storeName], Array.from(set.values())), 'readwrite');\n                        store = tx.objectStore(storeName);\n                        keyValues = this.getIndexKeyValuesFromModel(model);\n                        return [4 /*yield*/, this._get(store, keyValues)];\n                    case 2:\n                        fromDB = _b.sent();\n                        if (condition && fromDB) {\n                            predicates = ModelPredicateCreator.getPredicates(condition);\n                            predicateObjs = predicates.predicates, type = predicates.type;\n                            isValid = validatePredicate(fromDB, type, predicateObjs);\n                            if (!isValid) {\n                                msg = 'Conditional update failed';\n                                logger.error(msg, { model: fromDB, condition: predicateObjs });\n                                throw new Error(msg);\n                            }\n                        }\n                        result = [];\n                        _b.label = 3;\n                    case 3:\n                        _b.trys.push([3, 11, 12, 17]);\n                        connectionStoreNames_1 = __asyncValues(connectionStoreNames);\n                        _b.label = 4;\n                    case 4: return [4 /*yield*/, connectionStoreNames_1.next()];\n                    case 5:\n                        if (!(connectionStoreNames_1_1 = _b.sent(), !connectionStoreNames_1_1.done)) return [3 /*break*/, 10];\n                        resItem = connectionStoreNames_1_1.value;\n                        storeName_1 = resItem.storeName, item = resItem.item, instance = resItem.instance, keys = resItem.keys;\n                        store_1 = tx.objectStore(storeName_1);\n                        itemKeyValues = keys.map(function (key) {\n                            var value = item[key];\n                            return value;\n                        });\n                        return [4 /*yield*/, this._get(store_1, itemKeyValues)];\n                    case 6:\n                        fromDB_1 = _b.sent();\n                        opType = fromDB_1 === undefined ? OpType.INSERT : OpType.UPDATE;\n                        modelKeyValues = this.getIndexKeyValuesFromModel(model);\n                        if (!(keysEqual(itemKeyValues, modelKeyValues) ||\n                            opType === OpType.INSERT)) return [3 /*break*/, 9];\n                        return [4 /*yield*/, store_1\n                                .index('byPk')\n                                .getKey(this.canonicalKeyPath(itemKeyValues))];\n                    case 7:\n                        key = _b.sent();\n                        return [4 /*yield*/, store_1.put(item, key)];\n                    case 8:\n                        _b.sent();\n                        result.push([instance, opType]);\n                        _b.label = 9;\n                    case 9: return [3 /*break*/, 4];\n                    case 10: return [3 /*break*/, 17];\n                    case 11:\n                        e_2_1 = _b.sent();\n                        e_2 = { error: e_2_1 };\n                        return [3 /*break*/, 17];\n                    case 12:\n                        _b.trys.push([12, , 15, 16]);\n                        if (!(connectionStoreNames_1_1 && !connectionStoreNames_1_1.done && (_a = connectionStoreNames_1.return))) return [3 /*break*/, 14];\n                        return [4 /*yield*/, _a.call(connectionStoreNames_1)];\n                    case 13:\n                        _b.sent();\n                        _b.label = 14;\n                    case 14: return [3 /*break*/, 16];\n                    case 15:\n                        if (e_2) throw e_2.error;\n                        return [7 /*endfinally*/];\n                    case 16: return [7 /*endfinally*/];\n                    case 17: return [4 /*yield*/, tx.done];\n                    case 18:\n                        _b.sent();\n                        return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    IndexedDBAdapter.prototype.load = function (namespaceName, srcModelName, records) {\n        var records_1, records_1_1, records_2, records_2_1;\n        var e_3, _a, e_4, _b, e_5, _c;\n        return __awaiter(this, void 0, void 0, function () {\n            var namespace, relations, connectionStoreNames, modelConstructor, tx, relations_1, relations_1_1, relation, fieldName, modelName, targetName, targetNames, storeName, store, modelConstructor_1, _d, recordItem, getByFields, allPresent, keys, connectionRecord, getByfield, key, connectionRecord, e_4_1, recordItem, allPresent, keys, connectionRecord, key, connectionRecord, e_5_1, e_3_1;\n            var _this = this;\n            return __generator(this, function (_e) {\n                switch (_e.label) {\n                    case 0:\n                        namespace = this.schema.namespaces[namespaceName];\n                        relations = namespace.relationships[srcModelName].relationTypes;\n                        connectionStoreNames = relations.map(function (_a) {\n                            var modelName = _a.modelName;\n                            return getStorename(namespaceName, modelName);\n                        });\n                        modelConstructor = this.getModelConstructorByModelName(namespaceName, srcModelName);\n                        if (connectionStoreNames.length === 0) {\n                            return [2 /*return*/, records.map(function (record) {\n                                    return _this.modelInstanceCreator(modelConstructor, record);\n                                })];\n                        }\n                        tx = this.db.transaction(__spread(connectionStoreNames), 'readonly');\n                        _e.label = 1;\n                    case 1:\n                        _e.trys.push([1, 38, 39, 44]);\n                        relations_1 = __asyncValues(relations);\n                        _e.label = 2;\n                    case 2: return [4 /*yield*/, relations_1.next()];\n                    case 3:\n                        if (!(relations_1_1 = _e.sent(), !relations_1_1.done)) return [3 /*break*/, 37];\n                        relation = relations_1_1.value;\n                        fieldName = relation.fieldName, modelName = relation.modelName, targetName = relation.targetName, targetNames = relation.targetNames;\n                        storeName = getStorename(namespaceName, modelName);\n                        store = tx.objectStore(storeName);\n                        modelConstructor_1 = this.getModelConstructorByModelName(namespaceName, modelName);\n                        _d = relation.relationType;\n                        switch (_d) {\n                            case 'HAS_ONE': return [3 /*break*/, 4];\n                            case 'BELONGS_TO': return [3 /*break*/, 19];\n                            case 'HAS_MANY': return [3 /*break*/, 34];\n                        }\n                        return [3 /*break*/, 35];\n                    case 4:\n                        _e.trys.push([4, 12, 13, 18]);\n                        records_1 = __asyncValues(records);\n                        _e.label = 5;\n                    case 5: return [4 /*yield*/, records_1.next()];\n                    case 6:\n                        if (!(records_1_1 = _e.sent(), !records_1_1.done)) return [3 /*break*/, 11];\n                        recordItem = records_1_1.value;\n                        if (!(targetNames === null || targetNames === void 0 ? void 0 : targetNames.length)) return [3 /*break*/, 8];\n                        getByFields = [];\n                        allPresent = void 0;\n                        // iterate through all targetnames to make sure they are all present in the recordItem\n                        allPresent = targetNames.every(function (targetName) {\n                            return recordItem[targetName] != null;\n                        });\n                        if (!allPresent) {\n                            return [3 /*break*/, 11];\n                        }\n                        getByFields = targetNames;\n                        keys = getByFields.map(function (getByField) { return recordItem[getByField]; });\n                        return [4 /*yield*/, this._get(store, keys)];\n                    case 7:\n                        connectionRecord = _e.sent();\n                        recordItem[fieldName] =\n                            connectionRecord &&\n                                this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n                        return [3 /*break*/, 10];\n                    case 8:\n                        getByfield = recordItem[targetName]\n                            ? targetName\n                            : fieldName;\n                        // We break here, because the recordItem does not have 'team', the `getByField`\n                        // extract the keys on the related model.\n                        if (!recordItem[getByfield])\n                            return [3 /*break*/, 11];\n                        key = [recordItem[getByfield]];\n                        return [4 /*yield*/, this._get(store, key)];\n                    case 9:\n                        connectionRecord = _e.sent();\n                        recordItem[fieldName] =\n                            connectionRecord &&\n                                this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n                        _e.label = 10;\n                    case 10: return [3 /*break*/, 5];\n                    case 11: return [3 /*break*/, 18];\n                    case 12:\n                        e_4_1 = _e.sent();\n                        e_4 = { error: e_4_1 };\n                        return [3 /*break*/, 18];\n                    case 13:\n                        _e.trys.push([13, , 16, 17]);\n                        if (!(records_1_1 && !records_1_1.done && (_b = records_1.return))) return [3 /*break*/, 15];\n                        return [4 /*yield*/, _b.call(records_1)];\n                    case 14:\n                        _e.sent();\n                        _e.label = 15;\n                    case 15: return [3 /*break*/, 17];\n                    case 16:\n                        if (e_4) throw e_4.error;\n                        return [7 /*endfinally*/];\n                    case 17: return [7 /*endfinally*/];\n                    case 18: return [3 /*break*/, 36];\n                    case 19:\n                        _e.trys.push([19, 27, 28, 33]);\n                        records_2 = __asyncValues(records);\n                        _e.label = 20;\n                    case 20: return [4 /*yield*/, records_2.next()];\n                    case 21:\n                        if (!(records_2_1 = _e.sent(), !records_2_1.done)) return [3 /*break*/, 26];\n                        recordItem = records_2_1.value;\n                        if (!(targetNames === null || targetNames === void 0 ? void 0 : targetNames.length)) return [3 /*break*/, 23];\n                        allPresent = void 0;\n                        // iterate through all targetnames to make sure they are all present in the recordItem\n                        allPresent = targetNames.every(function (targetName) {\n                            return recordItem[targetName] != null;\n                        });\n                        // If not present, there is not yet a connected record\n                        if (!allPresent) {\n                            return [3 /*break*/, 26];\n                        }\n                        keys = targetNames\n                            .filter(function (targetName) { var _a; return (_a = recordItem[targetName]) !== null && _a !== void 0 ? _a : false; })\n                            .map(function (targetName) { return recordItem[targetName]; });\n                        return [4 /*yield*/, this._get(store, keys)];\n                    case 22:\n                        connectionRecord = _e.sent();\n                        recordItem[fieldName] =\n                            connectionRecord &&\n                                this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n                        targetNames === null || targetNames === void 0 ? void 0 : targetNames.map(function (targetName) {\n                            delete recordItem[targetName];\n                        });\n                        return [3 /*break*/, 25];\n                    case 23:\n                        if (!recordItem[targetName]) return [3 /*break*/, 25];\n                        key = [recordItem[targetName]];\n                        return [4 /*yield*/, this._get(store, key)];\n                    case 24:\n                        connectionRecord = _e.sent();\n                        recordItem[fieldName] =\n                            connectionRecord &&\n                                this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n                        delete recordItem[targetName];\n                        _e.label = 25;\n                    case 25: return [3 /*break*/, 20];\n                    case 26: return [3 /*break*/, 33];\n                    case 27:\n                        e_5_1 = _e.sent();\n                        e_5 = { error: e_5_1 };\n                        return [3 /*break*/, 33];\n                    case 28:\n                        _e.trys.push([28, , 31, 32]);\n                        if (!(records_2_1 && !records_2_1.done && (_c = records_2.return))) return [3 /*break*/, 30];\n                        return [4 /*yield*/, _c.call(records_2)];\n                    case 29:\n                        _e.sent();\n                        _e.label = 30;\n                    case 30: return [3 /*break*/, 32];\n                    case 31:\n                        if (e_5) throw e_5.error;\n                        return [7 /*endfinally*/];\n                    case 32: return [7 /*endfinally*/];\n                    case 33: return [3 /*break*/, 36];\n                    case 34: \n                    // TODO: Lazy loading\n                    return [3 /*break*/, 36];\n                    case 35:\n                        exhaustiveCheck(relation.relationType);\n                        return [3 /*break*/, 36];\n                    case 36: return [3 /*break*/, 2];\n                    case 37: return [3 /*break*/, 44];\n                    case 38:\n                        e_3_1 = _e.sent();\n                        e_3 = { error: e_3_1 };\n                        return [3 /*break*/, 44];\n                    case 39:\n                        _e.trys.push([39, , 42, 43]);\n                        if (!(relations_1_1 && !relations_1_1.done && (_a = relations_1.return))) return [3 /*break*/, 41];\n                        return [4 /*yield*/, _a.call(relations_1)];\n                    case 40:\n                        _e.sent();\n                        _e.label = 41;\n                    case 41: return [3 /*break*/, 43];\n                    case 42:\n                        if (e_3) throw e_3.error;\n                        return [7 /*endfinally*/];\n                    case 43: return [7 /*endfinally*/];\n                    case 44: return [2 /*return*/, records.map(function (record) {\n                            return _this.modelInstanceCreator(modelConstructor, record);\n                        })];\n                }\n            });\n        });\n    };\n    IndexedDBAdapter.prototype.query = function (modelConstructor, predicate, pagination) {\n        return __awaiter(this, void 0, void 0, function () {\n            var storeName, namespaceName, predicates, keyPath, queryByKey, hasSort, hasPagination, records;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.checkPrivate()];\n                    case 1:\n                        _a.sent();\n                        storeName = this.getStorenameForModel(modelConstructor);\n                        namespaceName = this.namespaceResolver(modelConstructor);\n                        predicates = predicate && ModelPredicateCreator.getPredicates(predicate);\n                        keyPath = getIndexKeys(this.schema.namespaces[namespaceName], modelConstructor.name);\n                        queryByKey = predicates && this.keyValueFromPredicate(predicates, keyPath);\n                        hasSort = pagination && pagination.sort;\n                        hasPagination = pagination && pagination.limit;\n                        return [4 /*yield*/, (function () { return __awaiter(_this, void 0, void 0, function () {\n                                var record, filtered, all;\n                                return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                        case 0:\n                                            if (!queryByKey) return [3 /*break*/, 2];\n                                            return [4 /*yield*/, this.getByKey(storeName, queryByKey)];\n                                        case 1:\n                                            record = _a.sent();\n                                            return [2 /*return*/, record ? [record] : []];\n                                        case 2:\n                                            if (!predicates) return [3 /*break*/, 4];\n                                            return [4 /*yield*/, this.filterOnPredicate(storeName, predicates)];\n                                        case 3:\n                                            filtered = _a.sent();\n                                            return [2 /*return*/, this.inMemoryPagination(filtered, pagination)];\n                                        case 4:\n                                            if (!hasSort) return [3 /*break*/, 6];\n                                            return [4 /*yield*/, this.getAll(storeName)];\n                                        case 5:\n                                            all = _a.sent();\n                                            return [2 /*return*/, this.inMemoryPagination(all, pagination)];\n                                        case 6:\n                                            if (hasPagination) {\n                                                return [2 /*return*/, this.enginePagination(storeName, pagination)];\n                                            }\n                                            return [2 /*return*/, this.getAll(storeName)];\n                                    }\n                                });\n                            }); })()];\n                    case 2:\n                        records = _a.sent();\n                        return [4 /*yield*/, this.load(namespaceName, modelConstructor.name, records)];\n                    case 3: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    IndexedDBAdapter.prototype.getByKey = function (storeName, keyValue) {\n        return __awaiter(this, void 0, void 0, function () {\n            var record;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._get(storeName, keyValue)];\n                    case 1:\n                        record = _a.sent();\n                        return [2 /*return*/, record];\n                }\n            });\n        });\n    };\n    IndexedDBAdapter.prototype.getAll = function (storeName) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.db.getAll(storeName)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    IndexedDBAdapter.prototype.keyValueFromPredicate = function (predicates, keyPath) {\n        var e_6, _a;\n        var predicateObjs = predicates.predicates;\n        if (predicateObjs.length !== keyPath.length) {\n            return;\n        }\n        var keyValues = [];\n        var _loop_1 = function (key) {\n            var predicateObj = predicateObjs.find(function (p) { return isPredicateObj(p) && p.field === key && p.operator === 'eq'; });\n            predicateObj && keyValues.push(predicateObj.operand);\n        };\n        try {\n            for (var keyPath_1 = __values(keyPath), keyPath_1_1 = keyPath_1.next(); !keyPath_1_1.done; keyPath_1_1 = keyPath_1.next()) {\n                var key = keyPath_1_1.value;\n                _loop_1(key);\n            }\n        }\n        catch (e_6_1) { e_6 = { error: e_6_1 }; }\n        finally {\n            try {\n                if (keyPath_1_1 && !keyPath_1_1.done && (_a = keyPath_1.return)) _a.call(keyPath_1);\n            }\n            finally { if (e_6) throw e_6.error; }\n        }\n        return keyValues.length === keyPath.length ? keyValues : undefined;\n    };\n    IndexedDBAdapter.prototype.filterOnPredicate = function (storeName, predicates) {\n        return __awaiter(this, void 0, void 0, function () {\n            var predicateObjs, type, all, filtered;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        predicateObjs = predicates.predicates, type = predicates.type;\n                        return [4 /*yield*/, this.getAll(storeName)];\n                    case 1:\n                        all = _a.sent();\n                        filtered = predicateObjs\n                            ? all.filter(function (m) { return validatePredicate(m, type, predicateObjs); })\n                            : all;\n                        return [2 /*return*/, filtered];\n                }\n            });\n        });\n    };\n    IndexedDBAdapter.prototype.inMemoryPagination = function (records, pagination) {\n        if (pagination && records.length > 1) {\n            if (pagination.sort) {\n                var sortPredicates = ModelSortPredicateCreator.getPredicates(pagination.sort);\n                if (sortPredicates.length) {\n                    var compareFn = sortCompareFunction(sortPredicates);\n                    records.sort(compareFn);\n                }\n            }\n            var _a = pagination.page, page = _a === void 0 ? 0 : _a, _b = pagination.limit, limit = _b === void 0 ? 0 : _b;\n            var start = Math.max(0, page * limit) || 0;\n            var end = limit > 0 ? start + limit : records.length;\n            return records.slice(start, end);\n        }\n        return records;\n    };\n    IndexedDBAdapter.prototype.enginePagination = function (storeName, pagination) {\n        return __awaiter(this, void 0, void 0, function () {\n            var result, _a, page, _b, limit, initialRecord, cursor, pageResults, hasLimit;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        if (!pagination) return [3 /*break*/, 7];\n                        _a = pagination.page, page = _a === void 0 ? 0 : _a, _b = pagination.limit, limit = _b === void 0 ? 0 : _b;\n                        initialRecord = Math.max(0, page * limit) || 0;\n                        return [4 /*yield*/, this.db\n                                .transaction(storeName)\n                                .objectStore(storeName)\n                                .openCursor()];\n                    case 1:\n                        cursor = _c.sent();\n                        if (!(cursor && initialRecord > 0)) return [3 /*break*/, 3];\n                        return [4 /*yield*/, cursor.advance(initialRecord)];\n                    case 2:\n                        _c.sent();\n                        _c.label = 3;\n                    case 3:\n                        pageResults = [];\n                        hasLimit = typeof limit === 'number' && limit > 0;\n                        _c.label = 4;\n                    case 4:\n                        if (!(cursor && cursor.value)) return [3 /*break*/, 6];\n                        pageResults.push(cursor.value);\n                        if (hasLimit && pageResults.length === limit) {\n                            return [3 /*break*/, 6];\n                        }\n                        return [4 /*yield*/, cursor.continue()];\n                    case 5:\n                        cursor = _c.sent();\n                        return [3 /*break*/, 4];\n                    case 6:\n                        result = pageResults;\n                        return [3 /*break*/, 9];\n                    case 7: return [4 /*yield*/, this.db.getAll(storeName)];\n                    case 8:\n                        result = (_c.sent());\n                        _c.label = 9;\n                    case 9: return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    IndexedDBAdapter.prototype.queryOne = function (modelConstructor, firstOrLast) {\n        if (firstOrLast === void 0) { firstOrLast = QueryOne.FIRST; }\n        return __awaiter(this, void 0, void 0, function () {\n            var storeName, cursor, result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.checkPrivate()];\n                    case 1:\n                        _a.sent();\n                        storeName = this.getStorenameForModel(modelConstructor);\n                        return [4 /*yield*/, this.db\n                                .transaction([storeName], 'readonly')\n                                .objectStore(storeName)\n                                .openCursor(undefined, firstOrLast === QueryOne.FIRST ? 'next' : 'prev')];\n                    case 2:\n                        cursor = _a.sent();\n                        result = cursor ? cursor.value : undefined;\n                        return [2 /*return*/, result && this.modelInstanceCreator(modelConstructor, result)];\n                }\n            });\n        });\n    };\n    IndexedDBAdapter.prototype.delete = function (modelOrModelConstructor, condition) {\n        return __awaiter(this, void 0, void 0, function () {\n            var deleteQueue, modelConstructor, nameSpace, storeName, models, relations, deletedModels, deletedModels, model, modelConstructor, namespaceName, storeName, tx, store, keyValues, fromDB, msg, predicates, predicateObjs, type, isValid, msg, relations, relations, deletedModels;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.checkPrivate()];\n                    case 1:\n                        _a.sent();\n                        deleteQueue = [];\n                        if (!isModelConstructor(modelOrModelConstructor)) return [3 /*break*/, 9];\n                        modelConstructor = modelOrModelConstructor;\n                        nameSpace = this.namespaceResolver(modelConstructor);\n                        storeName = this.getStorenameForModel(modelConstructor);\n                        return [4 /*yield*/, this.query(modelConstructor, condition)];\n                    case 2:\n                        models = _a.sent();\n                        relations = this.schema.namespaces[nameSpace].relationships[modelConstructor.name]\n                            .relationTypes;\n                        if (!(condition !== undefined)) return [3 /*break*/, 5];\n                        return [4 /*yield*/, this.deleteTraverse(relations, models, modelConstructor.name, nameSpace, deleteQueue)];\n                    case 3:\n                        _a.sent();\n                        return [4 /*yield*/, this.deleteItem(deleteQueue)];\n                    case 4:\n                        _a.sent();\n                        deletedModels = deleteQueue.reduce(function (acc, _a) {\n                            var items = _a.items;\n                            return acc.concat(items);\n                        }, []);\n                        return [2 /*return*/, [models, deletedModels]];\n                    case 5: return [4 /*yield*/, this.deleteTraverse(relations, models, modelConstructor.name, nameSpace, deleteQueue)];\n                    case 6:\n                        _a.sent();\n                        // Delete all\n                        return [4 /*yield*/, this.db\n                                .transaction([storeName], 'readwrite')\n                                .objectStore(storeName)\n                                .clear()];\n                    case 7:\n                        // Delete all\n                        _a.sent();\n                        deletedModels = deleteQueue.reduce(function (acc, _a) {\n                            var items = _a.items;\n                            return acc.concat(items);\n                        }, []);\n                        return [2 /*return*/, [models, deletedModels]];\n                    case 8: return [3 /*break*/, 17];\n                    case 9:\n                        model = modelOrModelConstructor;\n                        modelConstructor = Object.getPrototypeOf(model)\n                            .constructor;\n                        namespaceName = this.namespaceResolver(modelConstructor);\n                        storeName = this.getStorenameForModel(modelConstructor);\n                        if (!condition) return [3 /*break*/, 13];\n                        tx = this.db.transaction([storeName], 'readwrite');\n                        store = tx.objectStore(storeName);\n                        keyValues = this.getIndexKeyValuesFromModel(model);\n                        return [4 /*yield*/, this._get(store, keyValues)];\n                    case 10:\n                        fromDB = _a.sent();\n                        if (fromDB === undefined) {\n                            msg = 'Model instance not found in storage';\n                            logger.warn(msg, { model: model });\n                            return [2 /*return*/, [[model], []]];\n                        }\n                        predicates = ModelPredicateCreator.getPredicates(condition);\n                        predicateObjs = predicates.predicates, type = predicates.type;\n                        isValid = validatePredicate(fromDB, type, predicateObjs);\n                        if (!isValid) {\n                            msg = 'Conditional update failed';\n                            logger.error(msg, { model: fromDB, condition: predicateObjs });\n                            throw new Error(msg);\n                        }\n                        return [4 /*yield*/, tx.done];\n                    case 11:\n                        _a.sent();\n                        relations = this.schema.namespaces[namespaceName].relationships[modelConstructor.name].relationTypes;\n                        return [4 /*yield*/, this.deleteTraverse(relations, [model], modelConstructor.name, namespaceName, deleteQueue)];\n                    case 12:\n                        _a.sent();\n                        return [3 /*break*/, 15];\n                    case 13:\n                        relations = this.schema.namespaces[namespaceName].relationships[modelConstructor.name].relationTypes;\n                        return [4 /*yield*/, this.deleteTraverse(relations, [model], modelConstructor.name, namespaceName, deleteQueue)];\n                    case 14:\n                        _a.sent();\n                        _a.label = 15;\n                    case 15: return [4 /*yield*/, this.deleteItem(deleteQueue)];\n                    case 16:\n                        _a.sent();\n                        deletedModels = deleteQueue.reduce(function (acc, _a) {\n                            var items = _a.items;\n                            return acc.concat(items);\n                        }, []);\n                        return [2 /*return*/, [[model], deletedModels]];\n                    case 17: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    IndexedDBAdapter.prototype.deleteItem = function (deleteQueue) {\n        var deleteQueue_1, deleteQueue_1_1;\n        var e_7, _a, e_8, _b;\n        return __awaiter(this, void 0, void 0, function () {\n            var connectionStoreNames, tx, deleteItem, storeName, items, store, items_1, items_1_1, item, key, keyValues, itemKey, e_8_1, e_7_1;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        connectionStoreNames = deleteQueue.map(function (_a) {\n                            var storeName = _a.storeName;\n                            return storeName;\n                        });\n                        tx = this.db.transaction(__spread(connectionStoreNames), 'readwrite');\n                        _c.label = 1;\n                    case 1:\n                        _c.trys.push([1, 22, 23, 28]);\n                        deleteQueue_1 = __asyncValues(deleteQueue);\n                        _c.label = 2;\n                    case 2: return [4 /*yield*/, deleteQueue_1.next()];\n                    case 3:\n                        if (!(deleteQueue_1_1 = _c.sent(), !deleteQueue_1_1.done)) return [3 /*break*/, 21];\n                        deleteItem = deleteQueue_1_1.value;\n                        storeName = deleteItem.storeName, items = deleteItem.items;\n                        store = tx.objectStore(storeName);\n                        _c.label = 4;\n                    case 4:\n                        _c.trys.push([4, 14, 15, 20]);\n                        items_1 = __asyncValues(items);\n                        _c.label = 5;\n                    case 5: return [4 /*yield*/, items_1.next()];\n                    case 6:\n                        if (!(items_1_1 = _c.sent(), !items_1_1.done)) return [3 /*break*/, 13];\n                        item = items_1_1.value;\n                        if (!item) return [3 /*break*/, 12];\n                        key = void 0;\n                        if (!(typeof item === 'object')) return [3 /*break*/, 8];\n                        keyValues = this.getIndexKeyValuesFromModel(item);\n                        return [4 /*yield*/, store\n                                .index('byPk')\n                                .getKey(this.canonicalKeyPath(keyValues))];\n                    case 7:\n                        key = _c.sent();\n                        return [3 /*break*/, 10];\n                    case 8:\n                        itemKey = item.toString();\n                        return [4 /*yield*/, store.index('byPk').getKey(itemKey)];\n                    case 9:\n                        key = _c.sent();\n                        _c.label = 10;\n                    case 10:\n                        if (!(key !== undefined)) return [3 /*break*/, 12];\n                        return [4 /*yield*/, store.delete(key)];\n                    case 11:\n                        _c.sent();\n                        _c.label = 12;\n                    case 12: return [3 /*break*/, 5];\n                    case 13: return [3 /*break*/, 20];\n                    case 14:\n                        e_8_1 = _c.sent();\n                        e_8 = { error: e_8_1 };\n                        return [3 /*break*/, 20];\n                    case 15:\n                        _c.trys.push([15, , 18, 19]);\n                        if (!(items_1_1 && !items_1_1.done && (_b = items_1.return))) return [3 /*break*/, 17];\n                        return [4 /*yield*/, _b.call(items_1)];\n                    case 16:\n                        _c.sent();\n                        _c.label = 17;\n                    case 17: return [3 /*break*/, 19];\n                    case 18:\n                        if (e_8) throw e_8.error;\n                        return [7 /*endfinally*/];\n                    case 19: return [7 /*endfinally*/];\n                    case 20: return [3 /*break*/, 2];\n                    case 21: return [3 /*break*/, 28];\n                    case 22:\n                        e_7_1 = _c.sent();\n                        e_7 = { error: e_7_1 };\n                        return [3 /*break*/, 28];\n                    case 23:\n                        _c.trys.push([23, , 26, 27]);\n                        if (!(deleteQueue_1_1 && !deleteQueue_1_1.done && (_a = deleteQueue_1.return))) return [3 /*break*/, 25];\n                        return [4 /*yield*/, _a.call(deleteQueue_1)];\n                    case 24:\n                        _c.sent();\n                        _c.label = 25;\n                    case 25: return [3 /*break*/, 27];\n                    case 26:\n                        if (e_7) throw e_7.error;\n                        return [7 /*endfinally*/];\n                    case 27: return [7 /*endfinally*/];\n                    case 28: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    IndexedDBAdapter.prototype.deleteTraverse = function (relations, models, srcModel, nameSpace, deleteQueue) {\n        var relations_2, relations_2_1, models_1, models_1_1, models_2, models_2_1;\n        var e_9, _a, e_10, _b, e_11, _c;\n        return __awaiter(this, void 0, void 0, function () {\n            var rel, relationType, modelName, targetName, targetNames, associatedWith, storeName, _d, model, hasOneIndex, values, recordToDelete, index, values, value, recordToDelete, e_10_1, model, index, keyValues, childrenArray, e_11_1, e_9_1;\n            var _this = this;\n            return __generator(this, function (_e) {\n                switch (_e.label) {\n                    case 0:\n                        _e.trys.push([0, 38, 39, 44]);\n                        relations_2 = __asyncValues(relations);\n                        _e.label = 1;\n                    case 1: return [4 /*yield*/, relations_2.next()];\n                    case 2:\n                        if (!(relations_2_1 = _e.sent(), !relations_2_1.done)) return [3 /*break*/, 37];\n                        rel = relations_2_1.value;\n                        relationType = rel.relationType, modelName = rel.modelName, targetName = rel.targetName, targetNames = rel.targetNames, associatedWith = rel.associatedWith;\n                        storeName = getStorename(nameSpace, modelName);\n                        _d = relationType;\n                        switch (_d) {\n                            case 'HAS_ONE': return [3 /*break*/, 3];\n                            case 'HAS_MANY': return [3 /*break*/, 20];\n                            case 'BELONGS_TO': return [3 /*break*/, 34];\n                        }\n                        return [3 /*break*/, 35];\n                    case 3:\n                        _e.trys.push([3, 13, 14, 19]);\n                        models_1 = __asyncValues(models);\n                        _e.label = 4;\n                    case 4: return [4 /*yield*/, models_1.next()];\n                    case 5:\n                        if (!(models_1_1 = _e.sent(), !models_1_1.done)) return [3 /*break*/, 12];\n                        model = models_1_1.value;\n                        hasOneIndex = 'byPk';\n                        if (!(targetNames === null || targetNames === void 0 ? void 0 : targetNames.length)) return [3 /*break*/, 8];\n                        values = targetNames\n                            .filter(function (targetName) { var _a; return (_a = model[targetName]) !== null && _a !== void 0 ? _a : false; })\n                            .map(function (targetName) { return model[targetName]; });\n                        if (values.length === 0)\n                            return [3 /*break*/, 12];\n                        return [4 /*yield*/, this.db\n                                .transaction(storeName, 'readwrite')\n                                .objectStore(storeName)\n                                .index(hasOneIndex)\n                                .get(this.canonicalKeyPath(values))];\n                    case 6:\n                        recordToDelete = (_e.sent());\n                        return [4 /*yield*/, this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName]\n                                .relationTypes, recordToDelete ? [recordToDelete] : [], modelName, nameSpace, deleteQueue)];\n                    case 7:\n                        _e.sent();\n                        return [3 /*break*/, 12];\n                    case 8:\n                        index = void 0;\n                        values = void 0;\n                        if (targetName && targetName in model) {\n                            index = hasOneIndex;\n                            value = model[targetName];\n                            if (!value)\n                                return [3 /*break*/, 12];\n                            values = [value];\n                        }\n                        else {\n                            // backwards compatability for older versions of codegen that did not emit targetName for HAS_ONE relations\n                            // TODO: can we deprecate this? it's been ~2 years since codegen started including targetName for HAS_ONE\n                            // If we deprecate, we'll need to re-gen the MIPR in __tests__/schema.ts > newSchema\n                            // otherwise some unit tests will fail\n                            index = getIndex(this.schema.namespaces[nameSpace].relationships[modelName]\n                                .relationTypes, srcModel);\n                            values = this.getIndexKeyValuesFromModel(model);\n                        }\n                        if (!values || !index)\n                            return [3 /*break*/, 12];\n                        return [4 /*yield*/, this.db\n                                .transaction(storeName, 'readwrite')\n                                .objectStore(storeName)\n                                .index(index)\n                                .get(this.canonicalKeyPath(values))];\n                    case 9:\n                        recordToDelete = (_e.sent());\n                        return [4 /*yield*/, this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName]\n                                .relationTypes, recordToDelete ? [recordToDelete] : [], modelName, nameSpace, deleteQueue)];\n                    case 10:\n                        _e.sent();\n                        _e.label = 11;\n                    case 11: return [3 /*break*/, 4];\n                    case 12: return [3 /*break*/, 19];\n                    case 13:\n                        e_10_1 = _e.sent();\n                        e_10 = { error: e_10_1 };\n                        return [3 /*break*/, 19];\n                    case 14:\n                        _e.trys.push([14, , 17, 18]);\n                        if (!(models_1_1 && !models_1_1.done && (_b = models_1.return))) return [3 /*break*/, 16];\n                        return [4 /*yield*/, _b.call(models_1)];\n                    case 15:\n                        _e.sent();\n                        _e.label = 16;\n                    case 16: return [3 /*break*/, 18];\n                    case 17:\n                        if (e_10) throw e_10.error;\n                        return [7 /*endfinally*/];\n                    case 18: return [7 /*endfinally*/];\n                    case 19: return [3 /*break*/, 36];\n                    case 20:\n                        _e.trys.push([20, 27, 28, 33]);\n                        models_2 = __asyncValues(models);\n                        _e.label = 21;\n                    case 21: return [4 /*yield*/, models_2.next()];\n                    case 22:\n                        if (!(models_2_1 = _e.sent(), !models_2_1.done)) return [3 /*break*/, 26];\n                        model = models_2_1.value;\n                        index = \n                        // explicit bi-directional @hasMany and @manyToMany\n                        getIndex(this.schema.namespaces[nameSpace].relationships[modelName]\n                            .relationTypes, srcModel) ||\n                            // uni and/or implicit @hasMany\n                            getIndexFromAssociation(this.schema.namespaces[nameSpace].relationships[modelName]\n                                .indexes, associatedWith);\n                        keyValues = this.getIndexKeyValuesFromModel(model);\n                        return [4 /*yield*/, this.db\n                                .transaction(storeName, 'readwrite')\n                                .objectStore(storeName)\n                                .index(index)\n                                .getAll(this.canonicalKeyPath(keyValues))];\n                    case 23:\n                        childrenArray = _e.sent();\n                        return [4 /*yield*/, this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName]\n                                .relationTypes, childrenArray, modelName, nameSpace, deleteQueue)];\n                    case 24:\n                        _e.sent();\n                        _e.label = 25;\n                    case 25: return [3 /*break*/, 21];\n                    case 26: return [3 /*break*/, 33];\n                    case 27:\n                        e_11_1 = _e.sent();\n                        e_11 = { error: e_11_1 };\n                        return [3 /*break*/, 33];\n                    case 28:\n                        _e.trys.push([28, , 31, 32]);\n                        if (!(models_2_1 && !models_2_1.done && (_c = models_2.return))) return [3 /*break*/, 30];\n                        return [4 /*yield*/, _c.call(models_2)];\n                    case 29:\n                        _e.sent();\n                        _e.label = 30;\n                    case 30: return [3 /*break*/, 32];\n                    case 31:\n                        if (e_11) throw e_11.error;\n                        return [7 /*endfinally*/];\n                    case 32: return [7 /*endfinally*/];\n                    case 33: return [3 /*break*/, 36];\n                    case 34: \n                    // Intentionally blank\n                    return [3 /*break*/, 36];\n                    case 35:\n                        exhaustiveCheck(relationType);\n                        return [3 /*break*/, 36];\n                    case 36: return [3 /*break*/, 1];\n                    case 37: return [3 /*break*/, 44];\n                    case 38:\n                        e_9_1 = _e.sent();\n                        e_9 = { error: e_9_1 };\n                        return [3 /*break*/, 44];\n                    case 39:\n                        _e.trys.push([39, , 42, 43]);\n                        if (!(relations_2_1 && !relations_2_1.done && (_a = relations_2.return))) return [3 /*break*/, 41];\n                        return [4 /*yield*/, _a.call(relations_2)];\n                    case 40:\n                        _e.sent();\n                        _e.label = 41;\n                    case 41: return [3 /*break*/, 43];\n                    case 42:\n                        if (e_9) throw e_9.error;\n                        return [7 /*endfinally*/];\n                    case 43: return [7 /*endfinally*/];\n                    case 44:\n                        deleteQueue.push({\n                            storeName: getStorename(nameSpace, srcModel),\n                            items: models.map(function (record) {\n                                return _this.modelInstanceCreator(_this.getModelConstructorByModelName(nameSpace, srcModel), record);\n                            }),\n                        });\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    IndexedDBAdapter.prototype.clear = function () {\n        var _a;\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this.checkPrivate()];\n                    case 1:\n                        _b.sent();\n                        (_a = this.db) === null || _a === void 0 ? void 0 : _a.close();\n                        return [4 /*yield*/, idb.deleteDB(this.dbName)];\n                    case 2:\n                        _b.sent();\n                        this.db = undefined;\n                        this.initPromise = undefined;\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    IndexedDBAdapter.prototype.batchSave = function (modelConstructor, items) {\n        return __awaiter(this, void 0, void 0, function () {\n            var result, storeName, txn, store, _loop_2, this_1, items_2, items_2_1, item, e_12_1;\n            var e_12, _a;\n            var _this = this;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (items.length === 0) {\n                            return [2 /*return*/, []];\n                        }\n                        return [4 /*yield*/, this.checkPrivate()];\n                    case 1:\n                        _b.sent();\n                        result = [];\n                        storeName = this.getStorenameForModel(modelConstructor);\n                        txn = this.db.transaction(storeName, 'readwrite');\n                        store = txn.store;\n                        _loop_2 = function (item) {\n                            var namespaceName, modelName, model, connectedModels, keyValues, _deleted, index, key, instance;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        namespaceName = this_1.namespaceResolver(modelConstructor);\n                                        modelName = modelConstructor.name;\n                                        model = this_1.modelInstanceCreator(modelConstructor, item);\n                                        connectedModels = traverseModel(modelName, model, this_1.schema.namespaces[namespaceName], this_1.modelInstanceCreator, this_1.getModelConstructorByModelName);\n                                        keyValues = this_1.getIndexKeyValuesFromModel(model);\n                                        _deleted = item._deleted;\n                                        index = store.index('byPk');\n                                        return [4 /*yield*/, index.getKey(this_1.canonicalKeyPath(keyValues))];\n                                    case 1:\n                                        key = _a.sent();\n                                        if (!!_deleted) return [3 /*break*/, 3];\n                                        instance = connectedModels.find(function (_a) {\n                                            var instance = _a.instance;\n                                            var instanceKeyValues = _this.getIndexKeyValuesFromModel(instance);\n                                            return keysEqual(instanceKeyValues, keyValues);\n                                        }).instance;\n                                        result.push([\n                                            instance,\n                                            key ? OpType.UPDATE : OpType.INSERT,\n                                        ]);\n                                        return [4 /*yield*/, store.put(instance, key)];\n                                    case 2:\n                                        _a.sent();\n                                        return [3 /*break*/, 5];\n                                    case 3:\n                                        result.push([item, OpType.DELETE]);\n                                        if (!key) return [3 /*break*/, 5];\n                                        return [4 /*yield*/, store.delete(key)];\n                                    case 4:\n                                        _a.sent();\n                                        _a.label = 5;\n                                    case 5: return [2 /*return*/];\n                                }\n                            });\n                        };\n                        this_1 = this;\n                        _b.label = 2;\n                    case 2:\n                        _b.trys.push([2, 7, 8, 9]);\n                        items_2 = __values(items), items_2_1 = items_2.next();\n                        _b.label = 3;\n                    case 3:\n                        if (!!items_2_1.done) return [3 /*break*/, 6];\n                        item = items_2_1.value;\n                        return [5 /*yield**/, _loop_2(item)];\n                    case 4:\n                        _b.sent();\n                        _b.label = 5;\n                    case 5:\n                        items_2_1 = items_2.next();\n                        return [3 /*break*/, 3];\n                    case 6: return [3 /*break*/, 9];\n                    case 7:\n                        e_12_1 = _b.sent();\n                        e_12 = { error: e_12_1 };\n                        return [3 /*break*/, 9];\n                    case 8:\n                        try {\n                            if (items_2_1 && !items_2_1.done && (_a = items_2.return)) _a.call(items_2);\n                        }\n                        finally { if (e_12) throw e_12.error; }\n                        return [7 /*endfinally*/];\n                    case 9: return [4 /*yield*/, txn.done];\n                    case 10:\n                        _b.sent();\n                        return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    IndexedDBAdapter.prototype.createObjectStoreForModel = function (db, namespaceName, storeName, modelName) {\n        var store = db.createObjectStore(storeName, {\n            autoIncrement: true,\n        });\n        var indexes = this.schema.namespaces[namespaceName].relationships[modelName].indexes;\n        indexes.forEach(function (_a) {\n            var _b = __read(_a, 3), idxName = _b[0], keyPath = _b[1], options = _b[2];\n            store.createIndex(idxName, keyPath, options);\n        });\n        return store;\n    };\n    return IndexedDBAdapter;\n}());\nexport default new IndexedDBAdapter();\n//# sourceMappingURL=IndexedDBAdapter.js.map"]},"metadata":{},"sourceType":"module"}