{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __asyncValues = this && this.__asyncValues || function (o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator],\n      i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () {\n    return this;\n  }, i);\n\n  function verb(n) {\n    i[n] = o[n] && function (v) {\n      return new Promise(function (resolve, reject) {\n        v = o[n](v), settle(resolve, reject, v.done, v.value);\n      });\n    };\n  }\n\n  function settle(resolve, reject, d, v) {\n    Promise.resolve(v).then(function (v) {\n      resolve({\n        value: v,\n        done: d\n      });\n    }, reject);\n  }\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport AsyncStorageDatabase from './AsyncStorageDatabase';\nimport { ModelPredicateCreator, ModelSortPredicateCreator } from '../../predicates';\nimport { isPredicateObj, OpType, QueryOne } from '../../types';\nimport { DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR, exhaustiveCheck, getIndex, getIndexFromAssociation, isModelConstructor, traverseModel, validatePredicate, sortCompareFunction, keysEqual, getStorename, getIndexKeys, extractPrimaryKeyValues, IDENTIFIER_KEY_SEPARATOR } from '../../util';\nvar logger = new Logger('DataStore');\n\nvar AsyncStorageAdapter =\n/** @class */\nfunction () {\n  function AsyncStorageAdapter() {}\n\n  AsyncStorageAdapter.prototype.getStorenameForModel = function (modelConstructor) {\n    var namespace = this.namespaceResolver(modelConstructor);\n    var modelName = modelConstructor.name;\n    return getStorename(namespace, modelName);\n  }; // Retrieves primary key values from a model\n\n\n  AsyncStorageAdapter.prototype.getIndexKeyValuesFromModel = function (model) {\n    var modelConstructor = Object.getPrototypeOf(model).constructor;\n    var namespaceName = this.namespaceResolver(modelConstructor);\n    var keys = getIndexKeys(this.schema.namespaces[namespaceName], modelConstructor.name);\n    return extractPrimaryKeyValues(model, keys);\n  }; // Retrieves concatenated primary key values from a model\n\n\n  AsyncStorageAdapter.prototype.getIndexKeyValuesPath = function (model) {\n    return this.getIndexKeyValuesFromModel(model).join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n  };\n\n  AsyncStorageAdapter.prototype.setUp = function (theSchema, namespaceResolver, modelInstanceCreator, getModelConstructorByModelName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var error_1;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!!this.initPromise) return [3\n            /*break*/\n            , 1];\n            this.initPromise = new Promise(function (res, rej) {\n              _this.resolve = res;\n              _this.reject = rej;\n            });\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.initPromise];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n\n          case 3:\n            this.schema = theSchema;\n            this.namespaceResolver = namespaceResolver;\n            this.modelInstanceCreator = modelInstanceCreator;\n            this.getModelConstructorByModelName = getModelConstructorByModelName;\n            _a.label = 4;\n\n          case 4:\n            _a.trys.push([4, 7,, 8]);\n\n            if (!!this.db) return [3\n            /*break*/\n            , 6];\n            this.db = new AsyncStorageDatabase();\n            return [4\n            /*yield*/\n            , this.db.init()];\n\n          case 5:\n            _a.sent();\n\n            this.resolve();\n            _a.label = 6;\n\n          case 6:\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            error_1 = _a.sent();\n            this.reject(error_1);\n            return [3\n            /*break*/\n            , 8];\n\n          case 8:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AsyncStorageAdapter.prototype.save = function (model, condition) {\n    var e_1, _a;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var modelConstructor, storeName, namespaceName, connectedModels, set, connectionStoreNames, keyValuesPath, fromDB, predicates, predicateObjs, type, isValid, msg, result, connectionStoreNames_1, connectionStoreNames_1_1, resItem, storeName_1, item, instance, keys, itemKeyValues, itemKeyValuesPath, fromDB_1, opType, modelKeyValues, e_1_1;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            modelConstructor = Object.getPrototypeOf(model).constructor;\n            storeName = this.getStorenameForModel(modelConstructor);\n            namespaceName = this.namespaceResolver(modelConstructor);\n            connectedModels = traverseModel(modelConstructor.name, model, this.schema.namespaces[namespaceName], this.modelInstanceCreator, this.getModelConstructorByModelName);\n            set = new Set();\n            connectionStoreNames = Object.values(connectedModels).map(function (_a) {\n              var modelName = _a.modelName,\n                  item = _a.item,\n                  instance = _a.instance;\n              var storeName = getStorename(namespaceName, modelName);\n              set.add(storeName);\n              var keys = getIndexKeys(_this.schema.namespaces[namespaceName], modelName);\n              return {\n                storeName: storeName,\n                item: item,\n                instance: instance,\n                keys: keys\n              };\n            });\n            keyValuesPath = this.getIndexKeyValuesPath(model);\n            return [4\n            /*yield*/\n            , this.db.get(keyValuesPath, storeName)];\n\n          case 1:\n            fromDB = _b.sent();\n\n            if (condition && fromDB) {\n              predicates = ModelPredicateCreator.getPredicates(condition);\n              predicateObjs = predicates.predicates, type = predicates.type;\n              isValid = validatePredicate(fromDB, type, predicateObjs);\n\n              if (!isValid) {\n                msg = 'Conditional update failed';\n                logger.error(msg, {\n                  model: fromDB,\n                  condition: predicateObjs\n                });\n                throw new Error(msg);\n              }\n            }\n\n            result = [];\n            _b.label = 2;\n\n          case 2:\n            _b.trys.push([2, 9, 10, 15]);\n\n            connectionStoreNames_1 = __asyncValues(connectionStoreNames);\n            _b.label = 3;\n\n          case 3:\n            return [4\n            /*yield*/\n            , connectionStoreNames_1.next()];\n\n          case 4:\n            if (!(connectionStoreNames_1_1 = _b.sent(), !connectionStoreNames_1_1.done)) return [3\n            /*break*/\n            , 8];\n            resItem = connectionStoreNames_1_1.value;\n            storeName_1 = resItem.storeName, item = resItem.item, instance = resItem.instance, keys = resItem.keys;\n            itemKeyValues = keys.map(function (key) {\n              return item[key];\n            });\n            itemKeyValuesPath = itemKeyValues.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n            return [4\n            /*yield*/\n            , this.db.get(itemKeyValuesPath, storeName_1)];\n\n          case 5:\n            fromDB_1 = _b.sent();\n            opType = fromDB_1 ? OpType.UPDATE : OpType.INSERT;\n            modelKeyValues = this.getIndexKeyValuesFromModel(model);\n            if (!(keysEqual(itemKeyValues, modelKeyValues) || opType === OpType.INSERT)) return [3\n            /*break*/\n            , 7];\n            return [4\n            /*yield*/\n            , this.db.save(item, storeName_1, keys, itemKeyValuesPath)];\n\n          case 6:\n            _b.sent();\n\n            result.push([instance, opType]);\n            _b.label = 7;\n\n          case 7:\n            return [3\n            /*break*/\n            , 3];\n\n          case 8:\n            return [3\n            /*break*/\n            , 15];\n\n          case 9:\n            e_1_1 = _b.sent();\n            e_1 = {\n              error: e_1_1\n            };\n            return [3\n            /*break*/\n            , 15];\n\n          case 10:\n            _b.trys.push([10,, 13, 14]);\n\n            if (!(connectionStoreNames_1_1 && !connectionStoreNames_1_1.done && (_a = connectionStoreNames_1.return))) return [3\n            /*break*/\n            , 12];\n            return [4\n            /*yield*/\n            , _a.call(connectionStoreNames_1)];\n\n          case 11:\n            _b.sent();\n\n            _b.label = 12;\n\n          case 12:\n            return [3\n            /*break*/\n            , 14];\n\n          case 13:\n            if (e_1) throw e_1.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 14:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 15:\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n\n  AsyncStorageAdapter.prototype.load = function (namespaceName, srcModelName, records) {\n    var records_1, records_1_1, records_2, records_2_1;\n\n    var e_2, _a, e_3, _b, e_4, _c;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var namespace, relations, connectionStoreNames, modelConstructor, relations_1, relations_1_1, relation, fieldName, modelName, targetName, targetNames, relationType, storeName, modelConstructor_1, _d, recordItem, getByFields, allPresent, keys, connectionRecord, getByfield, key, connectionRecord, e_3_1, recordItem, allPresent, keys, connectionRecord, key, connectionRecord, e_4_1, e_2_1;\n\n      var _this = this;\n\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            namespace = this.schema.namespaces[namespaceName];\n            relations = namespace.relationships[srcModelName].relationTypes;\n            connectionStoreNames = relations.map(function (_a) {\n              var modelName = _a.modelName;\n              return getStorename(namespaceName, modelName);\n            });\n            modelConstructor = this.getModelConstructorByModelName(namespaceName, srcModelName);\n\n            if (connectionStoreNames.length === 0) {\n              return [2\n              /*return*/\n              , records.map(function (record) {\n                return _this.modelInstanceCreator(modelConstructor, record);\n              })];\n            }\n\n            _e.label = 1;\n\n          case 1:\n            _e.trys.push([1, 38, 39, 44]);\n\n            relations_1 = __asyncValues(relations);\n            _e.label = 2;\n\n          case 2:\n            return [4\n            /*yield*/\n            , relations_1.next()];\n\n          case 3:\n            if (!(relations_1_1 = _e.sent(), !relations_1_1.done)) return [3\n            /*break*/\n            , 37];\n            relation = relations_1_1.value;\n            fieldName = relation.fieldName, modelName = relation.modelName, targetName = relation.targetName, targetNames = relation.targetNames, relationType = relation.relationType;\n            storeName = getStorename(namespaceName, modelName);\n            modelConstructor_1 = this.getModelConstructorByModelName(namespaceName, modelName);\n            _d = relationType;\n\n            switch (_d) {\n              case 'HAS_ONE':\n                return [3\n                /*break*/\n                , 4];\n\n              case 'BELONGS_TO':\n                return [3\n                /*break*/\n                , 19];\n\n              case 'HAS_MANY':\n                return [3\n                /*break*/\n                , 34];\n            }\n\n            return [3\n            /*break*/\n            , 35];\n\n          case 4:\n            _e.trys.push([4, 12, 13, 18]);\n\n            records_1 = __asyncValues(records);\n            _e.label = 5;\n\n          case 5:\n            return [4\n            /*yield*/\n            , records_1.next()];\n\n          case 6:\n            if (!(records_1_1 = _e.sent(), !records_1_1.done)) return [3\n            /*break*/\n            , 11];\n            recordItem = records_1_1.value;\n            if (!(targetNames === null || targetNames === void 0 ? void 0 : targetNames.length)) return [3\n            /*break*/\n            , 8];\n            getByFields = [];\n            allPresent = void 0; // iterate through all targetnames to make sure they are all present in the recordItem\n\n            allPresent = targetNames.every(function (targetName) {\n              return recordItem[targetName] != null;\n            });\n\n            if (!allPresent) {\n              return [3\n              /*break*/\n              , 11];\n            }\n\n            getByFields = targetNames;\n            keys = getByFields.map(function (getByField) {\n              return recordItem[getByField];\n            }).join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n            return [4\n            /*yield*/\n            , this.db.get(keys, storeName)];\n\n          case 7:\n            connectionRecord = _e.sent();\n            recordItem[fieldName] = connectionRecord && this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n            return [3\n            /*break*/\n            , 10];\n\n          case 8:\n            getByfield = recordItem[targetName] ? targetName : fieldName;\n            if (!recordItem[getByfield]) return [3\n            /*break*/\n            , 11];\n            key = recordItem[getByfield];\n            return [4\n            /*yield*/\n            , this.db.get(key, storeName)];\n\n          case 9:\n            connectionRecord = _e.sent();\n            recordItem[fieldName] = connectionRecord && this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n            _e.label = 10;\n\n          case 10:\n            return [3\n            /*break*/\n            , 5];\n\n          case 11:\n            return [3\n            /*break*/\n            , 18];\n\n          case 12:\n            e_3_1 = _e.sent();\n            e_3 = {\n              error: e_3_1\n            };\n            return [3\n            /*break*/\n            , 18];\n\n          case 13:\n            _e.trys.push([13,, 16, 17]);\n\n            if (!(records_1_1 && !records_1_1.done && (_b = records_1.return))) return [3\n            /*break*/\n            , 15];\n            return [4\n            /*yield*/\n            , _b.call(records_1)];\n\n          case 14:\n            _e.sent();\n\n            _e.label = 15;\n\n          case 15:\n            return [3\n            /*break*/\n            , 17];\n\n          case 16:\n            if (e_3) throw e_3.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 17:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 18:\n            return [3\n            /*break*/\n            , 36];\n\n          case 19:\n            _e.trys.push([19, 27, 28, 33]);\n\n            records_2 = __asyncValues(records);\n            _e.label = 20;\n\n          case 20:\n            return [4\n            /*yield*/\n            , records_2.next()];\n\n          case 21:\n            if (!(records_2_1 = _e.sent(), !records_2_1.done)) return [3\n            /*break*/\n            , 26];\n            recordItem = records_2_1.value;\n            if (!(targetNames === null || targetNames === void 0 ? void 0 : targetNames.length)) return [3\n            /*break*/\n            , 23];\n            allPresent = void 0; // iterate through all targetnames to make sure they are all present in the recordItem\n\n            allPresent = targetNames.every(function (targetName) {\n              return recordItem[targetName] != null;\n            }); // If not present, there is not yet a connected record\n\n            if (!allPresent) {\n              return [3\n              /*break*/\n              , 26];\n            }\n\n            keys = targetNames.map(function (targetName) {\n              return recordItem[targetName];\n            }).join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n            return [4\n            /*yield*/\n            , this.db.get(keys, storeName)];\n\n          case 22:\n            connectionRecord = _e.sent();\n            recordItem[fieldName] = connectionRecord && this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n            targetNames === null || targetNames === void 0 ? void 0 : targetNames.map(function (targetName) {\n              delete recordItem[targetName];\n            });\n            return [3\n            /*break*/\n            , 25];\n\n          case 23:\n            if (!recordItem[targetName]) return [3\n            /*break*/\n            , 25];\n            key = recordItem[targetName];\n            return [4\n            /*yield*/\n            , this.db.get(key, storeName)];\n\n          case 24:\n            connectionRecord = _e.sent();\n            recordItem[fieldName] = connectionRecord && this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n            delete recordItem[targetName];\n            _e.label = 25;\n\n          case 25:\n            return [3\n            /*break*/\n            , 20];\n\n          case 26:\n            return [3\n            /*break*/\n            , 33];\n\n          case 27:\n            e_4_1 = _e.sent();\n            e_4 = {\n              error: e_4_1\n            };\n            return [3\n            /*break*/\n            , 33];\n\n          case 28:\n            _e.trys.push([28,, 31, 32]);\n\n            if (!(records_2_1 && !records_2_1.done && (_c = records_2.return))) return [3\n            /*break*/\n            , 30];\n            return [4\n            /*yield*/\n            , _c.call(records_2)];\n\n          case 29:\n            _e.sent();\n\n            _e.label = 30;\n\n          case 30:\n            return [3\n            /*break*/\n            , 32];\n\n          case 31:\n            if (e_4) throw e_4.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 32:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 33:\n            return [3\n            /*break*/\n            , 36];\n\n          case 34:\n            // TODO: Lazy loading\n            return [3\n            /*break*/\n            , 36];\n\n          case 35:\n            exhaustiveCheck(relationType);\n            return [3\n            /*break*/\n            , 36];\n\n          case 36:\n            return [3\n            /*break*/\n            , 2];\n\n          case 37:\n            return [3\n            /*break*/\n            , 44];\n\n          case 38:\n            e_2_1 = _e.sent();\n            e_2 = {\n              error: e_2_1\n            };\n            return [3\n            /*break*/\n            , 44];\n\n          case 39:\n            _e.trys.push([39,, 42, 43]);\n\n            if (!(relations_1_1 && !relations_1_1.done && (_a = relations_1.return))) return [3\n            /*break*/\n            , 41];\n            return [4\n            /*yield*/\n            , _a.call(relations_1)];\n\n          case 40:\n            _e.sent();\n\n            _e.label = 41;\n\n          case 41:\n            return [3\n            /*break*/\n            , 43];\n\n          case 42:\n            if (e_2) throw e_2.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 43:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 44:\n            return [2\n            /*return*/\n            , records.map(function (record) {\n              return _this.modelInstanceCreator(modelConstructor, record);\n            })];\n        }\n      });\n    });\n  };\n\n  AsyncStorageAdapter.prototype.query = function (modelConstructor, predicate, pagination) {\n    return __awaiter(this, void 0, void 0, function () {\n      var storeName, namespaceName, predicates, keys, queryByKey, hasSort, hasPagination, records;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            storeName = this.getStorenameForModel(modelConstructor);\n            namespaceName = this.namespaceResolver(modelConstructor);\n            predicates = predicate && ModelPredicateCreator.getPredicates(predicate);\n            keys = getIndexKeys(this.schema.namespaces[namespaceName], modelConstructor.name);\n            queryByKey = predicates && this.keyValueFromPredicate(predicates, keys);\n            hasSort = pagination && pagination.sort;\n            hasPagination = pagination && pagination.limit;\n            return [4\n            /*yield*/\n            , function () {\n              return __awaiter(_this, void 0, void 0, function () {\n                var record, filtered, all;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      if (!queryByKey) return [3\n                      /*break*/\n                      , 2];\n                      return [4\n                      /*yield*/\n                      , this.getByKey(storeName, queryByKey)];\n\n                    case 1:\n                      record = _a.sent();\n                      return [2\n                      /*return*/\n                      , record ? [record] : []];\n\n                    case 2:\n                      if (!predicates) return [3\n                      /*break*/\n                      , 4];\n                      return [4\n                      /*yield*/\n                      , this.filterOnPredicate(storeName, predicates)];\n\n                    case 3:\n                      filtered = _a.sent();\n                      return [2\n                      /*return*/\n                      , this.inMemoryPagination(filtered, pagination)];\n\n                    case 4:\n                      if (!(hasSort || hasPagination)) return [3\n                      /*break*/\n                      , 6];\n                      return [4\n                      /*yield*/\n                      , this.getAll(storeName)];\n\n                    case 5:\n                      all = _a.sent();\n                      return [2\n                      /*return*/\n                      , this.inMemoryPagination(all, pagination)];\n\n                    case 6:\n                      return [2\n                      /*return*/\n                      , this.getAll(storeName)];\n                  }\n                });\n              });\n            }()];\n\n          case 1:\n            records = _a.sent();\n            return [4\n            /*yield*/\n            , this.load(namespaceName, modelConstructor.name, records)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  AsyncStorageAdapter.prototype.getByKey = function (storeName, keyValuePath) {\n    return __awaiter(this, void 0, void 0, function () {\n      var record;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.db.get(keyValuePath, storeName)];\n\n          case 1:\n            record = _a.sent();\n            return [2\n            /*return*/\n            , record];\n        }\n      });\n    });\n  };\n\n  AsyncStorageAdapter.prototype.getAll = function (storeName) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.db.getAll(storeName)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  AsyncStorageAdapter.prototype.keyValueFromPredicate = function (predicates, keys) {\n    var e_5, _a;\n\n    var predicateObjs = predicates.predicates;\n\n    if (predicateObjs.length !== keys.length) {\n      return;\n    }\n\n    var keyValues = [];\n\n    var _loop_1 = function (key) {\n      var predicateObj = predicateObjs.find(function (p) {\n        return isPredicateObj(p) && p.field === key && p.operator === 'eq';\n      });\n      predicateObj && keyValues.push(predicateObj.operand);\n    };\n\n    try {\n      for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {\n        var key = keys_1_1.value;\n\n        _loop_1(key);\n      }\n    } catch (e_5_1) {\n      e_5 = {\n        error: e_5_1\n      };\n    } finally {\n      try {\n        if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);\n      } finally {\n        if (e_5) throw e_5.error;\n      }\n    }\n\n    return keyValues.length === keys.length ? keyValues.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR) : undefined;\n  };\n\n  AsyncStorageAdapter.prototype.filterOnPredicate = function (storeName, predicates) {\n    return __awaiter(this, void 0, void 0, function () {\n      var predicateObjs, type, all, filtered;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            predicateObjs = predicates.predicates, type = predicates.type;\n            return [4\n            /*yield*/\n            , this.getAll(storeName)];\n\n          case 1:\n            all = _a.sent();\n            filtered = predicateObjs ? all.filter(function (m) {\n              return validatePredicate(m, type, predicateObjs);\n            }) : all;\n            return [2\n            /*return*/\n            , filtered];\n        }\n      });\n    });\n  };\n\n  AsyncStorageAdapter.prototype.inMemoryPagination = function (records, pagination) {\n    if (pagination && records.length > 1) {\n      if (pagination.sort) {\n        var sortPredicates = ModelSortPredicateCreator.getPredicates(pagination.sort);\n\n        if (sortPredicates.length) {\n          var compareFn = sortCompareFunction(sortPredicates);\n          records.sort(compareFn);\n        }\n      }\n\n      var _a = pagination.page,\n          page = _a === void 0 ? 0 : _a,\n          _b = pagination.limit,\n          limit = _b === void 0 ? 0 : _b;\n      var start = Math.max(0, page * limit) || 0;\n      var end = limit > 0 ? start + limit : records.length;\n      return records.slice(start, end);\n    }\n\n    return records;\n  };\n\n  AsyncStorageAdapter.prototype.queryOne = function (modelConstructor, firstOrLast) {\n    if (firstOrLast === void 0) {\n      firstOrLast = QueryOne.FIRST;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var storeName, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            storeName = this.getStorenameForModel(modelConstructor);\n            return [4\n            /*yield*/\n            , this.db.getOne(firstOrLast, storeName)];\n\n          case 1:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , result && this.modelInstanceCreator(modelConstructor, result)];\n        }\n      });\n    });\n  };\n\n  AsyncStorageAdapter.prototype.delete = function (modelOrModelConstructor, condition) {\n    return __awaiter(this, void 0, void 0, function () {\n      var deleteQueue, modelConstructor, nameSpace, models, relations, deletedModels, deletedModels, model, modelConstructor, namespaceName, storeName, keyValuePath, fromDB, msg, predicates, predicateObjs, type, isValid, msg, relations, relations, deletedModels;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            deleteQueue = [];\n            if (!isModelConstructor(modelOrModelConstructor)) return [3\n            /*break*/\n            , 8];\n            modelConstructor = modelOrModelConstructor;\n            nameSpace = this.namespaceResolver(modelConstructor);\n            return [4\n            /*yield*/\n            , this.query(modelConstructor, condition)];\n\n          case 1:\n            models = _a.sent();\n            relations = this.schema.namespaces[nameSpace].relationships[modelConstructor.name].relationTypes;\n            if (!(condition !== undefined)) return [3\n            /*break*/\n            , 4];\n            return [4\n            /*yield*/\n            , this.deleteTraverse(relations, models, modelConstructor.name, nameSpace, deleteQueue)];\n\n          case 2:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.deleteItem(deleteQueue)];\n\n          case 3:\n            _a.sent();\n\n            deletedModels = deleteQueue.reduce(function (acc, _a) {\n              var items = _a.items;\n              return acc.concat(items);\n            }, []);\n            return [2\n            /*return*/\n            , [models, deletedModels]];\n\n          case 4:\n            return [4\n            /*yield*/\n            , this.deleteTraverse(relations, models, modelConstructor.name, nameSpace, deleteQueue)];\n\n          case 5:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.deleteItem(deleteQueue)];\n\n          case 6:\n            _a.sent();\n\n            deletedModels = deleteQueue.reduce(function (acc, _a) {\n              var items = _a.items;\n              return acc.concat(items);\n            }, []);\n            return [2\n            /*return*/\n            , [models, deletedModels]];\n\n          case 7:\n            return [3\n            /*break*/\n            , 15];\n\n          case 8:\n            model = modelOrModelConstructor;\n            modelConstructor = Object.getPrototypeOf(model).constructor;\n            namespaceName = this.namespaceResolver(modelConstructor);\n            storeName = this.getStorenameForModel(modelConstructor);\n            if (!condition) return [3\n            /*break*/\n            , 11];\n            keyValuePath = this.getIndexKeyValuesPath(model);\n            return [4\n            /*yield*/\n            , this.db.get(keyValuePath, storeName)];\n\n          case 9:\n            fromDB = _a.sent();\n\n            if (fromDB === undefined) {\n              msg = 'Model instance not found in storage';\n              logger.warn(msg, {\n                model: model\n              });\n              return [2\n              /*return*/\n              , [[model], []]];\n            }\n\n            predicates = ModelPredicateCreator.getPredicates(condition);\n            predicateObjs = predicates.predicates, type = predicates.type;\n            isValid = validatePredicate(fromDB, type, predicateObjs);\n\n            if (!isValid) {\n              msg = 'Conditional update failed';\n              logger.error(msg, {\n                model: fromDB,\n                condition: predicateObjs\n              });\n              throw new Error(msg);\n            }\n\n            relations = this.schema.namespaces[namespaceName].relationships[modelConstructor.name].relationTypes;\n            return [4\n            /*yield*/\n            , this.deleteTraverse(relations, [model], modelConstructor.name, namespaceName, deleteQueue)];\n\n          case 10:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 13];\n\n          case 11:\n            relations = this.schema.namespaces[namespaceName].relationships[modelConstructor.name].relationTypes;\n            return [4\n            /*yield*/\n            , this.deleteTraverse(relations, [model], modelConstructor.name, namespaceName, deleteQueue)];\n\n          case 12:\n            _a.sent();\n\n            _a.label = 13;\n\n          case 13:\n            return [4\n            /*yield*/\n            , this.deleteItem(deleteQueue)];\n\n          case 14:\n            _a.sent();\n\n            deletedModels = deleteQueue.reduce(function (acc, _a) {\n              var items = _a.items;\n              return acc.concat(items);\n            }, []);\n            return [2\n            /*return*/\n            , [[model], deletedModels]];\n\n          case 15:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AsyncStorageAdapter.prototype.deleteItem = function (deleteQueue) {\n    var deleteQueue_1, deleteQueue_1_1;\n\n    var e_6, _a, e_7, _b;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var deleteItem, storeName, items, items_1, items_1_1, item, keyValuesPath, e_7_1, e_6_1;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _c.trys.push([0, 17, 18, 23]);\n\n            deleteQueue_1 = __asyncValues(deleteQueue);\n            _c.label = 1;\n\n          case 1:\n            return [4\n            /*yield*/\n            , deleteQueue_1.next()];\n\n          case 2:\n            if (!(deleteQueue_1_1 = _c.sent(), !deleteQueue_1_1.done)) return [3\n            /*break*/\n            , 16];\n            deleteItem = deleteQueue_1_1.value;\n            storeName = deleteItem.storeName, items = deleteItem.items;\n            _c.label = 3;\n\n          case 3:\n            _c.trys.push([3, 9, 10, 15]);\n\n            items_1 = __asyncValues(items);\n            _c.label = 4;\n\n          case 4:\n            return [4\n            /*yield*/\n            , items_1.next()];\n\n          case 5:\n            if (!(items_1_1 = _c.sent(), !items_1_1.done)) return [3\n            /*break*/\n            , 8];\n            item = items_1_1.value;\n            if (!item) return [3\n            /*break*/\n            , 7];\n            if (!(typeof item === 'object')) return [3\n            /*break*/\n            , 7];\n            keyValuesPath = this.getIndexKeyValuesPath(item);\n            return [4\n            /*yield*/\n            , this.db.delete(keyValuesPath, storeName)];\n\n          case 6:\n            _c.sent();\n\n            _c.label = 7;\n\n          case 7:\n            return [3\n            /*break*/\n            , 4];\n\n          case 8:\n            return [3\n            /*break*/\n            , 15];\n\n          case 9:\n            e_7_1 = _c.sent();\n            e_7 = {\n              error: e_7_1\n            };\n            return [3\n            /*break*/\n            , 15];\n\n          case 10:\n            _c.trys.push([10,, 13, 14]);\n\n            if (!(items_1_1 && !items_1_1.done && (_b = items_1.return))) return [3\n            /*break*/\n            , 12];\n            return [4\n            /*yield*/\n            , _b.call(items_1)];\n\n          case 11:\n            _c.sent();\n\n            _c.label = 12;\n\n          case 12:\n            return [3\n            /*break*/\n            , 14];\n\n          case 13:\n            if (e_7) throw e_7.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 14:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 15:\n            return [3\n            /*break*/\n            , 1];\n\n          case 16:\n            return [3\n            /*break*/\n            , 23];\n\n          case 17:\n            e_6_1 = _c.sent();\n            e_6 = {\n              error: e_6_1\n            };\n            return [3\n            /*break*/\n            , 23];\n\n          case 18:\n            _c.trys.push([18,, 21, 22]);\n\n            if (!(deleteQueue_1_1 && !deleteQueue_1_1.done && (_a = deleteQueue_1.return))) return [3\n            /*break*/\n            , 20];\n            return [4\n            /*yield*/\n            , _a.call(deleteQueue_1)];\n\n          case 19:\n            _c.sent();\n\n            _c.label = 20;\n\n          case 20:\n            return [3\n            /*break*/\n            , 22];\n\n          case 21:\n            if (e_6) throw e_6.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 22:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 23:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Populates the delete Queue with all the items to delete\n   * @param relations\n   * @param models\n   * @param srcModel\n   * @param nameSpace\n   * @param deleteQueue\n   */\n\n\n  AsyncStorageAdapter.prototype.deleteTraverse = function (relations, models, srcModel, nameSpace, deleteQueue) {\n    var relations_2, relations_2_1, models_1, models_1_1, models_2, models_2_1;\n\n    var e_8, _a, e_9, _b, e_10, _c;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var rel, relationType, modelName, targetName, targetNames, associatedWith, storeName, index, _d, model, hasOneIndex_1, hasConnectedModelFields, keyValuesPath, values_1, isUnidirectionalConnection, allRecords, recordToDelete, hasOneIndex_2, hasOneCustomField, keyValuesPath, value_1, allRecords, recordToDelete, e_9_1, model, keyValues, allRecords, indices, childrenArray, e_10_1, e_8_1;\n\n      var _this = this;\n\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            _e.trys.push([0, 38, 39, 44]);\n\n            relations_2 = __asyncValues(relations);\n            _e.label = 1;\n\n          case 1:\n            return [4\n            /*yield*/\n            , relations_2.next()];\n\n          case 2:\n            if (!(relations_2_1 = _e.sent(), !relations_2_1.done)) return [3\n            /*break*/\n            , 37];\n            rel = relations_2_1.value;\n            relationType = rel.relationType, modelName = rel.modelName, targetName = rel.targetName, targetNames = rel.targetNames, associatedWith = rel.associatedWith;\n            storeName = getStorename(nameSpace, modelName);\n            index = getIndex(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, srcModel) || // if we were unable to find an index via relationTypes\n            // i.e. for keyName connections, attempt to find one by the\n            // associatedWith property\n            getIndexFromAssociation(this.schema.namespaces[nameSpace].relationships[modelName].indexes, rel.associatedWith);\n            _d = relationType;\n\n            switch (_d) {\n              case 'HAS_ONE':\n                return [3\n                /*break*/\n                , 3];\n\n              case 'HAS_MANY':\n                return [3\n                /*break*/\n                , 20];\n\n              case 'BELONGS_TO':\n                return [3\n                /*break*/\n                , 34];\n            }\n\n            return [3\n            /*break*/\n            , 35];\n\n          case 3:\n            _e.trys.push([3, 13, 14, 19]);\n\n            models_1 = __asyncValues(models);\n            _e.label = 4;\n\n          case 4:\n            return [4\n            /*yield*/\n            , models_1.next()];\n\n          case 5:\n            if (!(models_1_1 = _e.sent(), !models_1_1.done)) return [3\n            /*break*/\n            , 12];\n            model = models_1_1.value;\n            if (!(targetNames && (targetNames === null || targetNames === void 0 ? void 0 : targetNames.length))) return [3\n            /*break*/\n            , 8];\n\n            if (index) {\n              hasOneIndex_1 = index.split(IDENTIFIER_KEY_SEPARATOR);\n            } else if (associatedWith) {\n              if (Array.isArray(associatedWith)) {\n                hasOneIndex_1 = associatedWith;\n              } else {\n                hasOneIndex_1 = [associatedWith];\n              }\n            }\n\n            hasConnectedModelFields = targetNames.every(function (targetName) {\n              return model.hasOwnProperty(targetName);\n            });\n            keyValuesPath = this.getIndexKeyValuesPath(model);\n            isUnidirectionalConnection = hasOneIndex_1 === associatedWith;\n\n            if (hasConnectedModelFields && isUnidirectionalConnection) {\n              // Values will be that of the child model\n              values_1 = targetNames.filter(function (targetName) {\n                var _a;\n\n                return (_a = model[targetName]) !== null && _a !== void 0 ? _a : false;\n              }).map(function (targetName) {\n                return model[targetName];\n              });\n            } else {\n              // values will be that of the parent model\n              values_1 = keyValuesPath.split(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n            }\n\n            if (values_1.length === 0) return [3\n            /*break*/\n            , 12];\n            return [4\n            /*yield*/\n            , this.db.getAll(storeName)];\n\n          case 6:\n            allRecords = _e.sent();\n            recordToDelete = void 0; // values === targetNames\n\n            if (hasConnectedModelFields) {\n              /**\n               * Retrieve record by finding the record where all\n               * targetNames are present on the connected model.\n               *\n               */\n              // recordToDelete = allRecords.filter(childItem =>\n              // \tvalues.every(value => childItem[value] != null)\n              // ) as T[];\n              recordToDelete = allRecords.filter(function (childItem) {\n                return hasOneIndex_1.every(function (index) {\n                  return values_1.includes(childItem[index]);\n                });\n              });\n            } else {\n              // values === keyValuePath\n              recordToDelete = allRecords.filter(function (childItem) {\n                return childItem[hasOneIndex_1] === values_1;\n              });\n            }\n\n            return [4\n            /*yield*/\n            , this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, recordToDelete, modelName, nameSpace, deleteQueue)];\n\n          case 7:\n            _e.sent();\n\n            return [3\n            /*break*/\n            , 11];\n\n          case 8:\n            hasOneIndex_2 = index || associatedWith;\n            hasOneCustomField = targetName in model;\n            keyValuesPath = this.getIndexKeyValuesPath(model);\n            value_1 = hasOneCustomField ? model[targetName] : keyValuesPath;\n            if (!value_1) return [3\n            /*break*/\n            , 12];\n            return [4\n            /*yield*/\n            , this.db.getAll(storeName)];\n\n          case 9:\n            allRecords = _e.sent();\n            recordToDelete = allRecords.filter(function (childItem) {\n              return childItem[hasOneIndex_2] === value_1;\n            });\n            return [4\n            /*yield*/\n            , this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, recordToDelete, modelName, nameSpace, deleteQueue)];\n\n          case 10:\n            _e.sent();\n\n            _e.label = 11;\n\n          case 11:\n            return [3\n            /*break*/\n            , 4];\n\n          case 12:\n            return [3\n            /*break*/\n            , 19];\n\n          case 13:\n            e_9_1 = _e.sent();\n            e_9 = {\n              error: e_9_1\n            };\n            return [3\n            /*break*/\n            , 19];\n\n          case 14:\n            _e.trys.push([14,, 17, 18]);\n\n            if (!(models_1_1 && !models_1_1.done && (_b = models_1.return))) return [3\n            /*break*/\n            , 16];\n            return [4\n            /*yield*/\n            , _b.call(models_1)];\n\n          case 15:\n            _e.sent();\n\n            _e.label = 16;\n\n          case 16:\n            return [3\n            /*break*/\n            , 18];\n\n          case 17:\n            if (e_9) throw e_9.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 18:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 19:\n            return [3\n            /*break*/\n            , 36];\n\n          case 20:\n            _e.trys.push([20, 27, 28, 33]);\n\n            models_2 = __asyncValues(models);\n            _e.label = 21;\n\n          case 21:\n            return [4\n            /*yield*/\n            , models_2.next()];\n\n          case 22:\n            if (!(models_2_1 = _e.sent(), !models_2_1.done)) return [3\n            /*break*/\n            , 26];\n            model = models_2_1.value;\n            keyValues = this.getIndexKeyValuesFromModel(model);\n            return [4\n            /*yield*/\n            , this.db.getAll(storeName)];\n\n          case 23:\n            allRecords = _e.sent();\n            indices = index.split(IDENTIFIER_KEY_SEPARATOR);\n            childrenArray = allRecords.filter(function (childItem) {\n              return indices.every(function (index) {\n                return keyValues.includes(childItem[index]);\n              });\n            });\n            return [4\n            /*yield*/\n            , this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, childrenArray, modelName, nameSpace, deleteQueue)];\n\n          case 24:\n            _e.sent();\n\n            _e.label = 25;\n\n          case 25:\n            return [3\n            /*break*/\n            , 21];\n\n          case 26:\n            return [3\n            /*break*/\n            , 33];\n\n          case 27:\n            e_10_1 = _e.sent();\n            e_10 = {\n              error: e_10_1\n            };\n            return [3\n            /*break*/\n            , 33];\n\n          case 28:\n            _e.trys.push([28,, 31, 32]);\n\n            if (!(models_2_1 && !models_2_1.done && (_c = models_2.return))) return [3\n            /*break*/\n            , 30];\n            return [4\n            /*yield*/\n            , _c.call(models_2)];\n\n          case 29:\n            _e.sent();\n\n            _e.label = 30;\n\n          case 30:\n            return [3\n            /*break*/\n            , 32];\n\n          case 31:\n            if (e_10) throw e_10.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 32:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 33:\n            return [3\n            /*break*/\n            , 36];\n\n          case 34:\n            // Intentionally blank\n            return [3\n            /*break*/\n            , 36];\n\n          case 35:\n            exhaustiveCheck(relationType);\n            return [3\n            /*break*/\n            , 36];\n\n          case 36:\n            return [3\n            /*break*/\n            , 1];\n\n          case 37:\n            return [3\n            /*break*/\n            , 44];\n\n          case 38:\n            e_8_1 = _e.sent();\n            e_8 = {\n              error: e_8_1\n            };\n            return [3\n            /*break*/\n            , 44];\n\n          case 39:\n            _e.trys.push([39,, 42, 43]);\n\n            if (!(relations_2_1 && !relations_2_1.done && (_a = relations_2.return))) return [3\n            /*break*/\n            , 41];\n            return [4\n            /*yield*/\n            , _a.call(relations_2)];\n\n          case 40:\n            _e.sent();\n\n            _e.label = 41;\n\n          case 41:\n            return [3\n            /*break*/\n            , 43];\n\n          case 42:\n            if (e_8) throw e_8.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 43:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 44:\n            deleteQueue.push({\n              storeName: getStorename(nameSpace, srcModel),\n              items: models.map(function (record) {\n                return _this.modelInstanceCreator(_this.getModelConstructorByModelName(nameSpace, srcModel), record);\n              })\n            });\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AsyncStorageAdapter.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.db.clear()];\n\n          case 1:\n            _a.sent();\n\n            this.db = undefined;\n            this.initPromise = undefined;\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AsyncStorageAdapter.prototype.batchSave = function (modelConstructor, items) {\n    return __awaiter(this, void 0, void 0, function () {\n      var modelName, namespaceName, storeName, keys, batch, _loop_2, this_1, items_2, items_2_1, item;\n\n      var e_11, _a;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            modelName = modelConstructor.name;\n            namespaceName = this.namespaceResolver(modelConstructor);\n            storeName = getStorename(namespaceName, modelName);\n            keys = getIndexKeys(this.schema.namespaces[namespaceName], modelName);\n            batch = [];\n\n            _loop_2 = function (item) {\n              var model = this_1.modelInstanceCreator(modelConstructor, item);\n              var connectedModels = traverseModel(modelName, model, this_1.schema.namespaces[namespaceName], this_1.modelInstanceCreator, this_1.getModelConstructorByModelName);\n              var keyValuesPath = this_1.getIndexKeyValuesPath(model);\n              var instance = connectedModels.find(function (_a) {\n                var instance = _a.instance;\n\n                var instanceKeyValuesPath = _this.getIndexKeyValuesPath(instance);\n\n                return keysEqual([instanceKeyValuesPath], [keyValuesPath]);\n              }).instance;\n              batch.push(instance);\n            };\n\n            this_1 = this;\n\n            try {\n              for (items_2 = __values(items), items_2_1 = items_2.next(); !items_2_1.done; items_2_1 = items_2.next()) {\n                item = items_2_1.value;\n\n                _loop_2(item);\n              }\n            } catch (e_11_1) {\n              e_11 = {\n                error: e_11_1\n              };\n            } finally {\n              try {\n                if (items_2_1 && !items_2_1.done && (_a = items_2.return)) _a.call(items_2);\n              } finally {\n                if (e_11) throw e_11.error;\n              }\n            }\n\n            return [4\n            /*yield*/\n            , this.db.batchSave(storeName, batch, keys)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _b.sent()];\n        }\n      });\n    });\n  };\n\n  return AsyncStorageAdapter;\n}();\n\nexport { AsyncStorageAdapter };\nexport default new AsyncStorageAdapter();","map":{"version":3,"sources":["../../../src/storage/adapter/AsyncStorageAdapter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __asyncValues = (this && this.__asyncValues) || function (o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport AsyncStorageDatabase from './AsyncStorageDatabase';\nimport { ModelPredicateCreator, ModelSortPredicateCreator, } from '../../predicates';\nimport { isPredicateObj, OpType, QueryOne, } from '../../types';\nimport { DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR, exhaustiveCheck, getIndex, getIndexFromAssociation, isModelConstructor, traverseModel, validatePredicate, sortCompareFunction, keysEqual, getStorename, getIndexKeys, extractPrimaryKeyValues, IDENTIFIER_KEY_SEPARATOR, } from '../../util';\nvar logger = new Logger('DataStore');\nvar AsyncStorageAdapter = /** @class */ (function () {\n    function AsyncStorageAdapter() {\n    }\n    AsyncStorageAdapter.prototype.getStorenameForModel = function (modelConstructor) {\n        var namespace = this.namespaceResolver(modelConstructor);\n        var modelName = modelConstructor.name;\n        return getStorename(namespace, modelName);\n    };\n    // Retrieves primary key values from a model\n    AsyncStorageAdapter.prototype.getIndexKeyValuesFromModel = function (model) {\n        var modelConstructor = Object.getPrototypeOf(model)\n            .constructor;\n        var namespaceName = this.namespaceResolver(modelConstructor);\n        var keys = getIndexKeys(this.schema.namespaces[namespaceName], modelConstructor.name);\n        return extractPrimaryKeyValues(model, keys);\n    };\n    // Retrieves concatenated primary key values from a model\n    AsyncStorageAdapter.prototype.getIndexKeyValuesPath = function (model) {\n        return this.getIndexKeyValuesFromModel(model).join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n    };\n    AsyncStorageAdapter.prototype.setUp = function (theSchema, namespaceResolver, modelInstanceCreator, getModelConstructorByModelName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var error_1;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!!this.initPromise) return [3 /*break*/, 1];\n                        this.initPromise = new Promise(function (res, rej) {\n                            _this.resolve = res;\n                            _this.reject = rej;\n                        });\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.initPromise];\n                    case 2:\n                        _a.sent();\n                        return [2 /*return*/];\n                    case 3:\n                        this.schema = theSchema;\n                        this.namespaceResolver = namespaceResolver;\n                        this.modelInstanceCreator = modelInstanceCreator;\n                        this.getModelConstructorByModelName = getModelConstructorByModelName;\n                        _a.label = 4;\n                    case 4:\n                        _a.trys.push([4, 7, , 8]);\n                        if (!!this.db) return [3 /*break*/, 6];\n                        this.db = new AsyncStorageDatabase();\n                        return [4 /*yield*/, this.db.init()];\n                    case 5:\n                        _a.sent();\n                        this.resolve();\n                        _a.label = 6;\n                    case 6: return [3 /*break*/, 8];\n                    case 7:\n                        error_1 = _a.sent();\n                        this.reject(error_1);\n                        return [3 /*break*/, 8];\n                    case 8: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AsyncStorageAdapter.prototype.save = function (model, condition) {\n        var e_1, _a;\n        return __awaiter(this, void 0, void 0, function () {\n            var modelConstructor, storeName, namespaceName, connectedModels, set, connectionStoreNames, keyValuesPath, fromDB, predicates, predicateObjs, type, isValid, msg, result, connectionStoreNames_1, connectionStoreNames_1_1, resItem, storeName_1, item, instance, keys, itemKeyValues, itemKeyValuesPath, fromDB_1, opType, modelKeyValues, e_1_1;\n            var _this = this;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        modelConstructor = Object.getPrototypeOf(model)\n                            .constructor;\n                        storeName = this.getStorenameForModel(modelConstructor);\n                        namespaceName = this.namespaceResolver(modelConstructor);\n                        connectedModels = traverseModel(modelConstructor.name, model, this.schema.namespaces[namespaceName], this.modelInstanceCreator, this.getModelConstructorByModelName);\n                        set = new Set();\n                        connectionStoreNames = Object.values(connectedModels).map(function (_a) {\n                            var modelName = _a.modelName, item = _a.item, instance = _a.instance;\n                            var storeName = getStorename(namespaceName, modelName);\n                            set.add(storeName);\n                            var keys = getIndexKeys(_this.schema.namespaces[namespaceName], modelName);\n                            return { storeName: storeName, item: item, instance: instance, keys: keys };\n                        });\n                        keyValuesPath = this.getIndexKeyValuesPath(model);\n                        return [4 /*yield*/, this.db.get(keyValuesPath, storeName)];\n                    case 1:\n                        fromDB = _b.sent();\n                        if (condition && fromDB) {\n                            predicates = ModelPredicateCreator.getPredicates(condition);\n                            predicateObjs = predicates.predicates, type = predicates.type;\n                            isValid = validatePredicate(fromDB, type, predicateObjs);\n                            if (!isValid) {\n                                msg = 'Conditional update failed';\n                                logger.error(msg, { model: fromDB, condition: predicateObjs });\n                                throw new Error(msg);\n                            }\n                        }\n                        result = [];\n                        _b.label = 2;\n                    case 2:\n                        _b.trys.push([2, 9, 10, 15]);\n                        connectionStoreNames_1 = __asyncValues(connectionStoreNames);\n                        _b.label = 3;\n                    case 3: return [4 /*yield*/, connectionStoreNames_1.next()];\n                    case 4:\n                        if (!(connectionStoreNames_1_1 = _b.sent(), !connectionStoreNames_1_1.done)) return [3 /*break*/, 8];\n                        resItem = connectionStoreNames_1_1.value;\n                        storeName_1 = resItem.storeName, item = resItem.item, instance = resItem.instance, keys = resItem.keys;\n                        itemKeyValues = keys.map(function (key) { return item[key]; });\n                        itemKeyValuesPath = itemKeyValues.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n                        return [4 /*yield*/, this.db.get(itemKeyValuesPath, storeName_1)];\n                    case 5:\n                        fromDB_1 = _b.sent();\n                        opType = fromDB_1 ? OpType.UPDATE : OpType.INSERT;\n                        modelKeyValues = this.getIndexKeyValuesFromModel(model);\n                        if (!(keysEqual(itemKeyValues, modelKeyValues) ||\n                            opType === OpType.INSERT)) return [3 /*break*/, 7];\n                        return [4 /*yield*/, this.db.save(item, storeName_1, keys, itemKeyValuesPath)];\n                    case 6:\n                        _b.sent();\n                        result.push([instance, opType]);\n                        _b.label = 7;\n                    case 7: return [3 /*break*/, 3];\n                    case 8: return [3 /*break*/, 15];\n                    case 9:\n                        e_1_1 = _b.sent();\n                        e_1 = { error: e_1_1 };\n                        return [3 /*break*/, 15];\n                    case 10:\n                        _b.trys.push([10, , 13, 14]);\n                        if (!(connectionStoreNames_1_1 && !connectionStoreNames_1_1.done && (_a = connectionStoreNames_1.return))) return [3 /*break*/, 12];\n                        return [4 /*yield*/, _a.call(connectionStoreNames_1)];\n                    case 11:\n                        _b.sent();\n                        _b.label = 12;\n                    case 12: return [3 /*break*/, 14];\n                    case 13:\n                        if (e_1) throw e_1.error;\n                        return [7 /*endfinally*/];\n                    case 14: return [7 /*endfinally*/];\n                    case 15: return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    AsyncStorageAdapter.prototype.load = function (namespaceName, srcModelName, records) {\n        var records_1, records_1_1, records_2, records_2_1;\n        var e_2, _a, e_3, _b, e_4, _c;\n        return __awaiter(this, void 0, void 0, function () {\n            var namespace, relations, connectionStoreNames, modelConstructor, relations_1, relations_1_1, relation, fieldName, modelName, targetName, targetNames, relationType, storeName, modelConstructor_1, _d, recordItem, getByFields, allPresent, keys, connectionRecord, getByfield, key, connectionRecord, e_3_1, recordItem, allPresent, keys, connectionRecord, key, connectionRecord, e_4_1, e_2_1;\n            var _this = this;\n            return __generator(this, function (_e) {\n                switch (_e.label) {\n                    case 0:\n                        namespace = this.schema.namespaces[namespaceName];\n                        relations = namespace.relationships[srcModelName].relationTypes;\n                        connectionStoreNames = relations.map(function (_a) {\n                            var modelName = _a.modelName;\n                            return getStorename(namespaceName, modelName);\n                        });\n                        modelConstructor = this.getModelConstructorByModelName(namespaceName, srcModelName);\n                        if (connectionStoreNames.length === 0) {\n                            return [2 /*return*/, records.map(function (record) {\n                                    return _this.modelInstanceCreator(modelConstructor, record);\n                                })];\n                        }\n                        _e.label = 1;\n                    case 1:\n                        _e.trys.push([1, 38, 39, 44]);\n                        relations_1 = __asyncValues(relations);\n                        _e.label = 2;\n                    case 2: return [4 /*yield*/, relations_1.next()];\n                    case 3:\n                        if (!(relations_1_1 = _e.sent(), !relations_1_1.done)) return [3 /*break*/, 37];\n                        relation = relations_1_1.value;\n                        fieldName = relation.fieldName, modelName = relation.modelName, targetName = relation.targetName, targetNames = relation.targetNames, relationType = relation.relationType;\n                        storeName = getStorename(namespaceName, modelName);\n                        modelConstructor_1 = this.getModelConstructorByModelName(namespaceName, modelName);\n                        _d = relationType;\n                        switch (_d) {\n                            case 'HAS_ONE': return [3 /*break*/, 4];\n                            case 'BELONGS_TO': return [3 /*break*/, 19];\n                            case 'HAS_MANY': return [3 /*break*/, 34];\n                        }\n                        return [3 /*break*/, 35];\n                    case 4:\n                        _e.trys.push([4, 12, 13, 18]);\n                        records_1 = __asyncValues(records);\n                        _e.label = 5;\n                    case 5: return [4 /*yield*/, records_1.next()];\n                    case 6:\n                        if (!(records_1_1 = _e.sent(), !records_1_1.done)) return [3 /*break*/, 11];\n                        recordItem = records_1_1.value;\n                        if (!(targetNames === null || targetNames === void 0 ? void 0 : targetNames.length)) return [3 /*break*/, 8];\n                        getByFields = [];\n                        allPresent = void 0;\n                        // iterate through all targetnames to make sure they are all present in the recordItem\n                        allPresent = targetNames.every(function (targetName) {\n                            return recordItem[targetName] != null;\n                        });\n                        if (!allPresent) {\n                            return [3 /*break*/, 11];\n                        }\n                        getByFields = targetNames;\n                        keys = getByFields\n                            .map(function (getByField) { return recordItem[getByField]; })\n                            .join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n                        return [4 /*yield*/, this.db.get(keys, storeName)];\n                    case 7:\n                        connectionRecord = _e.sent();\n                        recordItem[fieldName] =\n                            connectionRecord &&\n                                this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n                        return [3 /*break*/, 10];\n                    case 8:\n                        getByfield = recordItem[targetName]\n                            ? targetName\n                            : fieldName;\n                        if (!recordItem[getByfield])\n                            return [3 /*break*/, 11];\n                        key = recordItem[getByfield];\n                        return [4 /*yield*/, this.db.get(key, storeName)];\n                    case 9:\n                        connectionRecord = _e.sent();\n                        recordItem[fieldName] =\n                            connectionRecord &&\n                                this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n                        _e.label = 10;\n                    case 10: return [3 /*break*/, 5];\n                    case 11: return [3 /*break*/, 18];\n                    case 12:\n                        e_3_1 = _e.sent();\n                        e_3 = { error: e_3_1 };\n                        return [3 /*break*/, 18];\n                    case 13:\n                        _e.trys.push([13, , 16, 17]);\n                        if (!(records_1_1 && !records_1_1.done && (_b = records_1.return))) return [3 /*break*/, 15];\n                        return [4 /*yield*/, _b.call(records_1)];\n                    case 14:\n                        _e.sent();\n                        _e.label = 15;\n                    case 15: return [3 /*break*/, 17];\n                    case 16:\n                        if (e_3) throw e_3.error;\n                        return [7 /*endfinally*/];\n                    case 17: return [7 /*endfinally*/];\n                    case 18: return [3 /*break*/, 36];\n                    case 19:\n                        _e.trys.push([19, 27, 28, 33]);\n                        records_2 = __asyncValues(records);\n                        _e.label = 20;\n                    case 20: return [4 /*yield*/, records_2.next()];\n                    case 21:\n                        if (!(records_2_1 = _e.sent(), !records_2_1.done)) return [3 /*break*/, 26];\n                        recordItem = records_2_1.value;\n                        if (!(targetNames === null || targetNames === void 0 ? void 0 : targetNames.length)) return [3 /*break*/, 23];\n                        allPresent = void 0;\n                        // iterate through all targetnames to make sure they are all present in the recordItem\n                        allPresent = targetNames.every(function (targetName) {\n                            return recordItem[targetName] != null;\n                        });\n                        // If not present, there is not yet a connected record\n                        if (!allPresent) {\n                            return [3 /*break*/, 26];\n                        }\n                        keys = targetNames\n                            .map(function (targetName) { return recordItem[targetName]; })\n                            .join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n                        return [4 /*yield*/, this.db.get(keys, storeName)];\n                    case 22:\n                        connectionRecord = _e.sent();\n                        recordItem[fieldName] =\n                            connectionRecord &&\n                                this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n                        targetNames === null || targetNames === void 0 ? void 0 : targetNames.map(function (targetName) {\n                            delete recordItem[targetName];\n                        });\n                        return [3 /*break*/, 25];\n                    case 23:\n                        if (!recordItem[targetName]) return [3 /*break*/, 25];\n                        key = recordItem[targetName];\n                        return [4 /*yield*/, this.db.get(key, storeName)];\n                    case 24:\n                        connectionRecord = _e.sent();\n                        recordItem[fieldName] =\n                            connectionRecord &&\n                                this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n                        delete recordItem[targetName];\n                        _e.label = 25;\n                    case 25: return [3 /*break*/, 20];\n                    case 26: return [3 /*break*/, 33];\n                    case 27:\n                        e_4_1 = _e.sent();\n                        e_4 = { error: e_4_1 };\n                        return [3 /*break*/, 33];\n                    case 28:\n                        _e.trys.push([28, , 31, 32]);\n                        if (!(records_2_1 && !records_2_1.done && (_c = records_2.return))) return [3 /*break*/, 30];\n                        return [4 /*yield*/, _c.call(records_2)];\n                    case 29:\n                        _e.sent();\n                        _e.label = 30;\n                    case 30: return [3 /*break*/, 32];\n                    case 31:\n                        if (e_4) throw e_4.error;\n                        return [7 /*endfinally*/];\n                    case 32: return [7 /*endfinally*/];\n                    case 33: return [3 /*break*/, 36];\n                    case 34: \n                    // TODO: Lazy loading\n                    return [3 /*break*/, 36];\n                    case 35:\n                        exhaustiveCheck(relationType);\n                        return [3 /*break*/, 36];\n                    case 36: return [3 /*break*/, 2];\n                    case 37: return [3 /*break*/, 44];\n                    case 38:\n                        e_2_1 = _e.sent();\n                        e_2 = { error: e_2_1 };\n                        return [3 /*break*/, 44];\n                    case 39:\n                        _e.trys.push([39, , 42, 43]);\n                        if (!(relations_1_1 && !relations_1_1.done && (_a = relations_1.return))) return [3 /*break*/, 41];\n                        return [4 /*yield*/, _a.call(relations_1)];\n                    case 40:\n                        _e.sent();\n                        _e.label = 41;\n                    case 41: return [3 /*break*/, 43];\n                    case 42:\n                        if (e_2) throw e_2.error;\n                        return [7 /*endfinally*/];\n                    case 43: return [7 /*endfinally*/];\n                    case 44: return [2 /*return*/, records.map(function (record) {\n                            return _this.modelInstanceCreator(modelConstructor, record);\n                        })];\n                }\n            });\n        });\n    };\n    AsyncStorageAdapter.prototype.query = function (modelConstructor, predicate, pagination) {\n        return __awaiter(this, void 0, void 0, function () {\n            var storeName, namespaceName, predicates, keys, queryByKey, hasSort, hasPagination, records;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        storeName = this.getStorenameForModel(modelConstructor);\n                        namespaceName = this.namespaceResolver(modelConstructor);\n                        predicates = predicate && ModelPredicateCreator.getPredicates(predicate);\n                        keys = getIndexKeys(this.schema.namespaces[namespaceName], modelConstructor.name);\n                        queryByKey = predicates && this.keyValueFromPredicate(predicates, keys);\n                        hasSort = pagination && pagination.sort;\n                        hasPagination = pagination && pagination.limit;\n                        return [4 /*yield*/, (function () { return __awaiter(_this, void 0, void 0, function () {\n                                var record, filtered, all;\n                                return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                        case 0:\n                                            if (!queryByKey) return [3 /*break*/, 2];\n                                            return [4 /*yield*/, this.getByKey(storeName, queryByKey)];\n                                        case 1:\n                                            record = _a.sent();\n                                            return [2 /*return*/, record ? [record] : []];\n                                        case 2:\n                                            if (!predicates) return [3 /*break*/, 4];\n                                            return [4 /*yield*/, this.filterOnPredicate(storeName, predicates)];\n                                        case 3:\n                                            filtered = _a.sent();\n                                            return [2 /*return*/, this.inMemoryPagination(filtered, pagination)];\n                                        case 4:\n                                            if (!(hasSort || hasPagination)) return [3 /*break*/, 6];\n                                            return [4 /*yield*/, this.getAll(storeName)];\n                                        case 5:\n                                            all = _a.sent();\n                                            return [2 /*return*/, this.inMemoryPagination(all, pagination)];\n                                        case 6: return [2 /*return*/, this.getAll(storeName)];\n                                    }\n                                });\n                            }); })()];\n                    case 1:\n                        records = _a.sent();\n                        return [4 /*yield*/, this.load(namespaceName, modelConstructor.name, records)];\n                    case 2: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    AsyncStorageAdapter.prototype.getByKey = function (storeName, keyValuePath) {\n        return __awaiter(this, void 0, void 0, function () {\n            var record;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.db.get(keyValuePath, storeName)];\n                    case 1:\n                        record = _a.sent();\n                        return [2 /*return*/, record];\n                }\n            });\n        });\n    };\n    AsyncStorageAdapter.prototype.getAll = function (storeName) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.db.getAll(storeName)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    AsyncStorageAdapter.prototype.keyValueFromPredicate = function (predicates, keys) {\n        var e_5, _a;\n        var predicateObjs = predicates.predicates;\n        if (predicateObjs.length !== keys.length) {\n            return;\n        }\n        var keyValues = [];\n        var _loop_1 = function (key) {\n            var predicateObj = predicateObjs.find(function (p) { return isPredicateObj(p) && p.field === key && p.operator === 'eq'; });\n            predicateObj && keyValues.push(predicateObj.operand);\n        };\n        try {\n            for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {\n                var key = keys_1_1.value;\n                _loop_1(key);\n            }\n        }\n        catch (e_5_1) { e_5 = { error: e_5_1 }; }\n        finally {\n            try {\n                if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);\n            }\n            finally { if (e_5) throw e_5.error; }\n        }\n        return keyValues.length === keys.length\n            ? keyValues.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR)\n            : undefined;\n    };\n    AsyncStorageAdapter.prototype.filterOnPredicate = function (storeName, predicates) {\n        return __awaiter(this, void 0, void 0, function () {\n            var predicateObjs, type, all, filtered;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        predicateObjs = predicates.predicates, type = predicates.type;\n                        return [4 /*yield*/, this.getAll(storeName)];\n                    case 1:\n                        all = _a.sent();\n                        filtered = predicateObjs\n                            ? all.filter(function (m) { return validatePredicate(m, type, predicateObjs); })\n                            : all;\n                        return [2 /*return*/, filtered];\n                }\n            });\n        });\n    };\n    AsyncStorageAdapter.prototype.inMemoryPagination = function (records, pagination) {\n        if (pagination && records.length > 1) {\n            if (pagination.sort) {\n                var sortPredicates = ModelSortPredicateCreator.getPredicates(pagination.sort);\n                if (sortPredicates.length) {\n                    var compareFn = sortCompareFunction(sortPredicates);\n                    records.sort(compareFn);\n                }\n            }\n            var _a = pagination.page, page = _a === void 0 ? 0 : _a, _b = pagination.limit, limit = _b === void 0 ? 0 : _b;\n            var start = Math.max(0, page * limit) || 0;\n            var end = limit > 0 ? start + limit : records.length;\n            return records.slice(start, end);\n        }\n        return records;\n    };\n    AsyncStorageAdapter.prototype.queryOne = function (modelConstructor, firstOrLast) {\n        if (firstOrLast === void 0) { firstOrLast = QueryOne.FIRST; }\n        return __awaiter(this, void 0, void 0, function () {\n            var storeName, result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        storeName = this.getStorenameForModel(modelConstructor);\n                        return [4 /*yield*/, this.db.getOne(firstOrLast, storeName)];\n                    case 1:\n                        result = _a.sent();\n                        return [2 /*return*/, result && this.modelInstanceCreator(modelConstructor, result)];\n                }\n            });\n        });\n    };\n    AsyncStorageAdapter.prototype.delete = function (modelOrModelConstructor, condition) {\n        return __awaiter(this, void 0, void 0, function () {\n            var deleteQueue, modelConstructor, nameSpace, models, relations, deletedModels, deletedModels, model, modelConstructor, namespaceName, storeName, keyValuePath, fromDB, msg, predicates, predicateObjs, type, isValid, msg, relations, relations, deletedModels;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        deleteQueue = [];\n                        if (!isModelConstructor(modelOrModelConstructor)) return [3 /*break*/, 8];\n                        modelConstructor = modelOrModelConstructor;\n                        nameSpace = this.namespaceResolver(modelConstructor);\n                        return [4 /*yield*/, this.query(modelConstructor, condition)];\n                    case 1:\n                        models = _a.sent();\n                        relations = this.schema.namespaces[nameSpace].relationships[modelConstructor.name]\n                            .relationTypes;\n                        if (!(condition !== undefined)) return [3 /*break*/, 4];\n                        return [4 /*yield*/, this.deleteTraverse(relations, models, modelConstructor.name, nameSpace, deleteQueue)];\n                    case 2:\n                        _a.sent();\n                        return [4 /*yield*/, this.deleteItem(deleteQueue)];\n                    case 3:\n                        _a.sent();\n                        deletedModels = deleteQueue.reduce(function (acc, _a) {\n                            var items = _a.items;\n                            return acc.concat(items);\n                        }, []);\n                        return [2 /*return*/, [models, deletedModels]];\n                    case 4: return [4 /*yield*/, this.deleteTraverse(relations, models, modelConstructor.name, nameSpace, deleteQueue)];\n                    case 5:\n                        _a.sent();\n                        return [4 /*yield*/, this.deleteItem(deleteQueue)];\n                    case 6:\n                        _a.sent();\n                        deletedModels = deleteQueue.reduce(function (acc, _a) {\n                            var items = _a.items;\n                            return acc.concat(items);\n                        }, []);\n                        return [2 /*return*/, [models, deletedModels]];\n                    case 7: return [3 /*break*/, 15];\n                    case 8:\n                        model = modelOrModelConstructor;\n                        modelConstructor = Object.getPrototypeOf(model)\n                            .constructor;\n                        namespaceName = this.namespaceResolver(modelConstructor);\n                        storeName = this.getStorenameForModel(modelConstructor);\n                        if (!condition) return [3 /*break*/, 11];\n                        keyValuePath = this.getIndexKeyValuesPath(model);\n                        return [4 /*yield*/, this.db.get(keyValuePath, storeName)];\n                    case 9:\n                        fromDB = _a.sent();\n                        if (fromDB === undefined) {\n                            msg = 'Model instance not found in storage';\n                            logger.warn(msg, { model: model });\n                            return [2 /*return*/, [[model], []]];\n                        }\n                        predicates = ModelPredicateCreator.getPredicates(condition);\n                        predicateObjs = predicates.predicates, type = predicates.type;\n                        isValid = validatePredicate(fromDB, type, predicateObjs);\n                        if (!isValid) {\n                            msg = 'Conditional update failed';\n                            logger.error(msg, { model: fromDB, condition: predicateObjs });\n                            throw new Error(msg);\n                        }\n                        relations = this.schema.namespaces[namespaceName].relationships[modelConstructor.name].relationTypes;\n                        return [4 /*yield*/, this.deleteTraverse(relations, [model], modelConstructor.name, namespaceName, deleteQueue)];\n                    case 10:\n                        _a.sent();\n                        return [3 /*break*/, 13];\n                    case 11:\n                        relations = this.schema.namespaces[namespaceName].relationships[modelConstructor.name].relationTypes;\n                        return [4 /*yield*/, this.deleteTraverse(relations, [model], modelConstructor.name, namespaceName, deleteQueue)];\n                    case 12:\n                        _a.sent();\n                        _a.label = 13;\n                    case 13: return [4 /*yield*/, this.deleteItem(deleteQueue)];\n                    case 14:\n                        _a.sent();\n                        deletedModels = deleteQueue.reduce(function (acc, _a) {\n                            var items = _a.items;\n                            return acc.concat(items);\n                        }, []);\n                        return [2 /*return*/, [[model], deletedModels]];\n                    case 15: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AsyncStorageAdapter.prototype.deleteItem = function (deleteQueue) {\n        var deleteQueue_1, deleteQueue_1_1;\n        var e_6, _a, e_7, _b;\n        return __awaiter(this, void 0, void 0, function () {\n            var deleteItem, storeName, items, items_1, items_1_1, item, keyValuesPath, e_7_1, e_6_1;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        _c.trys.push([0, 17, 18, 23]);\n                        deleteQueue_1 = __asyncValues(deleteQueue);\n                        _c.label = 1;\n                    case 1: return [4 /*yield*/, deleteQueue_1.next()];\n                    case 2:\n                        if (!(deleteQueue_1_1 = _c.sent(), !deleteQueue_1_1.done)) return [3 /*break*/, 16];\n                        deleteItem = deleteQueue_1_1.value;\n                        storeName = deleteItem.storeName, items = deleteItem.items;\n                        _c.label = 3;\n                    case 3:\n                        _c.trys.push([3, 9, 10, 15]);\n                        items_1 = __asyncValues(items);\n                        _c.label = 4;\n                    case 4: return [4 /*yield*/, items_1.next()];\n                    case 5:\n                        if (!(items_1_1 = _c.sent(), !items_1_1.done)) return [3 /*break*/, 8];\n                        item = items_1_1.value;\n                        if (!item) return [3 /*break*/, 7];\n                        if (!(typeof item === 'object')) return [3 /*break*/, 7];\n                        keyValuesPath = this.getIndexKeyValuesPath(item);\n                        return [4 /*yield*/, this.db.delete(keyValuesPath, storeName)];\n                    case 6:\n                        _c.sent();\n                        _c.label = 7;\n                    case 7: return [3 /*break*/, 4];\n                    case 8: return [3 /*break*/, 15];\n                    case 9:\n                        e_7_1 = _c.sent();\n                        e_7 = { error: e_7_1 };\n                        return [3 /*break*/, 15];\n                    case 10:\n                        _c.trys.push([10, , 13, 14]);\n                        if (!(items_1_1 && !items_1_1.done && (_b = items_1.return))) return [3 /*break*/, 12];\n                        return [4 /*yield*/, _b.call(items_1)];\n                    case 11:\n                        _c.sent();\n                        _c.label = 12;\n                    case 12: return [3 /*break*/, 14];\n                    case 13:\n                        if (e_7) throw e_7.error;\n                        return [7 /*endfinally*/];\n                    case 14: return [7 /*endfinally*/];\n                    case 15: return [3 /*break*/, 1];\n                    case 16: return [3 /*break*/, 23];\n                    case 17:\n                        e_6_1 = _c.sent();\n                        e_6 = { error: e_6_1 };\n                        return [3 /*break*/, 23];\n                    case 18:\n                        _c.trys.push([18, , 21, 22]);\n                        if (!(deleteQueue_1_1 && !deleteQueue_1_1.done && (_a = deleteQueue_1.return))) return [3 /*break*/, 20];\n                        return [4 /*yield*/, _a.call(deleteQueue_1)];\n                    case 19:\n                        _c.sent();\n                        _c.label = 20;\n                    case 20: return [3 /*break*/, 22];\n                    case 21:\n                        if (e_6) throw e_6.error;\n                        return [7 /*endfinally*/];\n                    case 22: return [7 /*endfinally*/];\n                    case 23: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Populates the delete Queue with all the items to delete\n     * @param relations\n     * @param models\n     * @param srcModel\n     * @param nameSpace\n     * @param deleteQueue\n     */\n    AsyncStorageAdapter.prototype.deleteTraverse = function (relations, models, srcModel, nameSpace, deleteQueue) {\n        var relations_2, relations_2_1, models_1, models_1_1, models_2, models_2_1;\n        var e_8, _a, e_9, _b, e_10, _c;\n        return __awaiter(this, void 0, void 0, function () {\n            var rel, relationType, modelName, targetName, targetNames, associatedWith, storeName, index, _d, model, hasOneIndex_1, hasConnectedModelFields, keyValuesPath, values_1, isUnidirectionalConnection, allRecords, recordToDelete, hasOneIndex_2, hasOneCustomField, keyValuesPath, value_1, allRecords, recordToDelete, e_9_1, model, keyValues, allRecords, indices, childrenArray, e_10_1, e_8_1;\n            var _this = this;\n            return __generator(this, function (_e) {\n                switch (_e.label) {\n                    case 0:\n                        _e.trys.push([0, 38, 39, 44]);\n                        relations_2 = __asyncValues(relations);\n                        _e.label = 1;\n                    case 1: return [4 /*yield*/, relations_2.next()];\n                    case 2:\n                        if (!(relations_2_1 = _e.sent(), !relations_2_1.done)) return [3 /*break*/, 37];\n                        rel = relations_2_1.value;\n                        relationType = rel.relationType, modelName = rel.modelName, targetName = rel.targetName, targetNames = rel.targetNames, associatedWith = rel.associatedWith;\n                        storeName = getStorename(nameSpace, modelName);\n                        index = getIndex(this.schema.namespaces[nameSpace].relationships[modelName]\n                            .relationTypes, srcModel) ||\n                            // if we were unable to find an index via relationTypes\n                            // i.e. for keyName connections, attempt to find one by the\n                            // associatedWith property\n                            getIndexFromAssociation(this.schema.namespaces[nameSpace].relationships[modelName].indexes, rel.associatedWith);\n                        _d = relationType;\n                        switch (_d) {\n                            case 'HAS_ONE': return [3 /*break*/, 3];\n                            case 'HAS_MANY': return [3 /*break*/, 20];\n                            case 'BELONGS_TO': return [3 /*break*/, 34];\n                        }\n                        return [3 /*break*/, 35];\n                    case 3:\n                        _e.trys.push([3, 13, 14, 19]);\n                        models_1 = __asyncValues(models);\n                        _e.label = 4;\n                    case 4: return [4 /*yield*/, models_1.next()];\n                    case 5:\n                        if (!(models_1_1 = _e.sent(), !models_1_1.done)) return [3 /*break*/, 12];\n                        model = models_1_1.value;\n                        if (!(targetNames && (targetNames === null || targetNames === void 0 ? void 0 : targetNames.length))) return [3 /*break*/, 8];\n                        if (index) {\n                            hasOneIndex_1 = index.split(IDENTIFIER_KEY_SEPARATOR);\n                        }\n                        else if (associatedWith) {\n                            if (Array.isArray(associatedWith)) {\n                                hasOneIndex_1 = associatedWith;\n                            }\n                            else {\n                                hasOneIndex_1 = [associatedWith];\n                            }\n                        }\n                        hasConnectedModelFields = targetNames.every(function (targetName) {\n                            return model.hasOwnProperty(targetName);\n                        });\n                        keyValuesPath = this.getIndexKeyValuesPath(model);\n                        isUnidirectionalConnection = hasOneIndex_1 === associatedWith;\n                        if (hasConnectedModelFields && isUnidirectionalConnection) {\n                            // Values will be that of the child model\n                            values_1 = targetNames\n                                .filter(function (targetName) { var _a; return (_a = model[targetName]) !== null && _a !== void 0 ? _a : false; })\n                                .map(function (targetName) { return model[targetName]; });\n                        }\n                        else {\n                            // values will be that of the parent model\n                            values_1 = keyValuesPath.split(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n                        }\n                        if (values_1.length === 0)\n                            return [3 /*break*/, 12];\n                        return [4 /*yield*/, this.db.getAll(storeName)];\n                    case 6:\n                        allRecords = _e.sent();\n                        recordToDelete = void 0;\n                        // values === targetNames\n                        if (hasConnectedModelFields) {\n                            /**\n                             * Retrieve record by finding the record where all\n                             * targetNames are present on the connected model.\n                             *\n                             */\n                            // recordToDelete = allRecords.filter(childItem =>\n                            // \tvalues.every(value => childItem[value] != null)\n                            // ) as T[];\n                            recordToDelete = allRecords.filter(function (childItem) {\n                                return hasOneIndex_1.every(function (index) { return values_1.includes(childItem[index]); });\n                            });\n                        }\n                        else {\n                            // values === keyValuePath\n                            recordToDelete = allRecords.filter(function (childItem) { return childItem[hasOneIndex_1] === values_1; });\n                        }\n                        return [4 /*yield*/, this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName]\n                                .relationTypes, recordToDelete, modelName, nameSpace, deleteQueue)];\n                    case 7:\n                        _e.sent();\n                        return [3 /*break*/, 11];\n                    case 8:\n                        hasOneIndex_2 = index || associatedWith;\n                        hasOneCustomField = targetName in model;\n                        keyValuesPath = this.getIndexKeyValuesPath(model);\n                        value_1 = hasOneCustomField\n                            ? model[targetName]\n                            : keyValuesPath;\n                        if (!value_1)\n                            return [3 /*break*/, 12];\n                        return [4 /*yield*/, this.db.getAll(storeName)];\n                    case 9:\n                        allRecords = _e.sent();\n                        recordToDelete = allRecords.filter(function (childItem) { return childItem[hasOneIndex_2] === value_1; });\n                        return [4 /*yield*/, this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName]\n                                .relationTypes, recordToDelete, modelName, nameSpace, deleteQueue)];\n                    case 10:\n                        _e.sent();\n                        _e.label = 11;\n                    case 11: return [3 /*break*/, 4];\n                    case 12: return [3 /*break*/, 19];\n                    case 13:\n                        e_9_1 = _e.sent();\n                        e_9 = { error: e_9_1 };\n                        return [3 /*break*/, 19];\n                    case 14:\n                        _e.trys.push([14, , 17, 18]);\n                        if (!(models_1_1 && !models_1_1.done && (_b = models_1.return))) return [3 /*break*/, 16];\n                        return [4 /*yield*/, _b.call(models_1)];\n                    case 15:\n                        _e.sent();\n                        _e.label = 16;\n                    case 16: return [3 /*break*/, 18];\n                    case 17:\n                        if (e_9) throw e_9.error;\n                        return [7 /*endfinally*/];\n                    case 18: return [7 /*endfinally*/];\n                    case 19: return [3 /*break*/, 36];\n                    case 20:\n                        _e.trys.push([20, 27, 28, 33]);\n                        models_2 = __asyncValues(models);\n                        _e.label = 21;\n                    case 21: return [4 /*yield*/, models_2.next()];\n                    case 22:\n                        if (!(models_2_1 = _e.sent(), !models_2_1.done)) return [3 /*break*/, 26];\n                        model = models_2_1.value;\n                        keyValues = this.getIndexKeyValuesFromModel(model);\n                        return [4 /*yield*/, this.db.getAll(storeName)];\n                    case 23:\n                        allRecords = _e.sent();\n                        indices = index.split(IDENTIFIER_KEY_SEPARATOR);\n                        childrenArray = allRecords.filter(function (childItem) {\n                            return indices.every(function (index) { return keyValues.includes(childItem[index]); });\n                        });\n                        return [4 /*yield*/, this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName]\n                                .relationTypes, childrenArray, modelName, nameSpace, deleteQueue)];\n                    case 24:\n                        _e.sent();\n                        _e.label = 25;\n                    case 25: return [3 /*break*/, 21];\n                    case 26: return [3 /*break*/, 33];\n                    case 27:\n                        e_10_1 = _e.sent();\n                        e_10 = { error: e_10_1 };\n                        return [3 /*break*/, 33];\n                    case 28:\n                        _e.trys.push([28, , 31, 32]);\n                        if (!(models_2_1 && !models_2_1.done && (_c = models_2.return))) return [3 /*break*/, 30];\n                        return [4 /*yield*/, _c.call(models_2)];\n                    case 29:\n                        _e.sent();\n                        _e.label = 30;\n                    case 30: return [3 /*break*/, 32];\n                    case 31:\n                        if (e_10) throw e_10.error;\n                        return [7 /*endfinally*/];\n                    case 32: return [7 /*endfinally*/];\n                    case 33: return [3 /*break*/, 36];\n                    case 34: \n                    // Intentionally blank\n                    return [3 /*break*/, 36];\n                    case 35:\n                        exhaustiveCheck(relationType);\n                        return [3 /*break*/, 36];\n                    case 36: return [3 /*break*/, 1];\n                    case 37: return [3 /*break*/, 44];\n                    case 38:\n                        e_8_1 = _e.sent();\n                        e_8 = { error: e_8_1 };\n                        return [3 /*break*/, 44];\n                    case 39:\n                        _e.trys.push([39, , 42, 43]);\n                        if (!(relations_2_1 && !relations_2_1.done && (_a = relations_2.return))) return [3 /*break*/, 41];\n                        return [4 /*yield*/, _a.call(relations_2)];\n                    case 40:\n                        _e.sent();\n                        _e.label = 41;\n                    case 41: return [3 /*break*/, 43];\n                    case 42:\n                        if (e_8) throw e_8.error;\n                        return [7 /*endfinally*/];\n                    case 43: return [7 /*endfinally*/];\n                    case 44:\n                        deleteQueue.push({\n                            storeName: getStorename(nameSpace, srcModel),\n                            items: models.map(function (record) {\n                                return _this.modelInstanceCreator(_this.getModelConstructorByModelName(nameSpace, srcModel), record);\n                            }),\n                        });\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AsyncStorageAdapter.prototype.clear = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.db.clear()];\n                    case 1:\n                        _a.sent();\n                        this.db = undefined;\n                        this.initPromise = undefined;\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AsyncStorageAdapter.prototype.batchSave = function (modelConstructor, items) {\n        return __awaiter(this, void 0, void 0, function () {\n            var modelName, namespaceName, storeName, keys, batch, _loop_2, this_1, items_2, items_2_1, item;\n            var e_11, _a;\n            var _this = this;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        modelName = modelConstructor.name;\n                        namespaceName = this.namespaceResolver(modelConstructor);\n                        storeName = getStorename(namespaceName, modelName);\n                        keys = getIndexKeys(this.schema.namespaces[namespaceName], modelName);\n                        batch = [];\n                        _loop_2 = function (item) {\n                            var model = this_1.modelInstanceCreator(modelConstructor, item);\n                            var connectedModels = traverseModel(modelName, model, this_1.schema.namespaces[namespaceName], this_1.modelInstanceCreator, this_1.getModelConstructorByModelName);\n                            var keyValuesPath = this_1.getIndexKeyValuesPath(model);\n                            var instance = connectedModels.find(function (_a) {\n                                var instance = _a.instance;\n                                var instanceKeyValuesPath = _this.getIndexKeyValuesPath(instance);\n                                return keysEqual([instanceKeyValuesPath], [keyValuesPath]);\n                            }).instance;\n                            batch.push(instance);\n                        };\n                        this_1 = this;\n                        try {\n                            for (items_2 = __values(items), items_2_1 = items_2.next(); !items_2_1.done; items_2_1 = items_2.next()) {\n                                item = items_2_1.value;\n                                _loop_2(item);\n                            }\n                        }\n                        catch (e_11_1) { e_11 = { error: e_11_1 }; }\n                        finally {\n                            try {\n                                if (items_2_1 && !items_2_1.done && (_a = items_2.return)) _a.call(items_2);\n                            }\n                            finally { if (e_11) throw e_11.error; }\n                        }\n                        return [4 /*yield*/, this.db.batchSave(storeName, batch, keys)];\n                    case 1: return [2 /*return*/, _b.sent()];\n                }\n            });\n        });\n    };\n    return AsyncStorageAdapter;\n}());\nexport { AsyncStorageAdapter };\nexport default new AsyncStorageAdapter();\n//# sourceMappingURL=AsyncStorageAdapter.js.map"]},"metadata":{},"sourceType":"module"}