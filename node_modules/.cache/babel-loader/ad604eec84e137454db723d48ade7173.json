{"ast":null,"code":"import flow from \"lodash-es/flow\";\nexport function aggregateExpressions(detections) {\n  return detections.map(detection => detection.expressions).map(expression => ({\n    positive: expression.surprised + expression.happy,\n    neutral: expression.neutral,\n    negative: expression.sad + expression.disgusted + expression.fearful + expression.angry\n  }));\n}\nexport function calculateExpressionScore(aggregatedExpressions) {\n  return aggregatedExpressions.length > 0 ? aggregatedExpressions.map(expression => expression.positive - expression.negative).reduce((acc, current) => acc + current, 0) / aggregatedExpressions.length : 0;\n}\nexport const aggregateAndCalculateExpressionScore = flow(aggregateExpressions, calculateExpressionScore);\nexport function aggregatePaulEkmanEmotions(detections) {\n  return detections.map(detection => detection.expressions);\n}\nexport function calculatePaulEkmanEmotionScore(aggregatedPaulEkmanEmotions) {\n  const meanEmotionFor = emotionName => {\n    return aggregatedPaulEkmanEmotions.length > 0 ? aggregatedPaulEkmanEmotions.reduce((acc, current) => acc + current[emotionName], 0) / aggregatedPaulEkmanEmotions.length : 0;\n  };\n\n  return {\n    happy: meanEmotionFor(\"happy\"),\n    surprised: meanEmotionFor(\"surprised\"),\n    neutral: meanEmotionFor(\"neutral\"),\n    sad: meanEmotionFor(\"sad\"),\n    angry: meanEmotionFor(\"angry\"),\n    disgusted: meanEmotionFor(\"disgusted\"),\n    fearful: meanEmotionFor(\"fearful\")\n  };\n}\nexport const aggregateAndCalculatePaulEkmanEmotionScore = flow(aggregatePaulEkmanEmotions, calculatePaulEkmanEmotionScore);","map":{"version":3,"sources":["/Users/sanjayar/Desktop/moody-main/src/meetings/audienceFaceExpressionUtils.ts"],"names":["flow","aggregateExpressions","detections","map","detection","expressions","expression","positive","surprised","happy","neutral","negative","sad","disgusted","fearful","angry","calculateExpressionScore","aggregatedExpressions","length","reduce","acc","current","aggregateAndCalculateExpressionScore","aggregatePaulEkmanEmotions","calculatePaulEkmanEmotionScore","aggregatedPaulEkmanEmotions","meanEmotionFor","emotionName","aggregateAndCalculatePaulEkmanEmotionScore"],"mappings":"AACA,OAAOA,IAAP,MAAiB,gBAAjB;AAkBA,OAAO,SAASC,oBAAT,CACLC,UADK,EAImB;AACxB,SAAOA,UAAU,CACdC,GADI,CACCC,SAAD,IAAeA,SAAS,CAACC,WADzB,EAEJF,GAFI,CAECG,UAAD,KAAkC;AACrCC,IAAAA,QAAQ,EAAED,UAAU,CAACE,SAAX,GAAuBF,UAAU,CAACG,KADP;AAErCC,IAAAA,OAAO,EAAEJ,UAAU,CAACI,OAFiB;AAGrCC,IAAAA,QAAQ,EACNL,UAAU,CAACM,GAAX,GACAN,UAAU,CAACO,SADX,GAEAP,UAAU,CAACQ,OAFX,GAGAR,UAAU,CAACS;AAPwB,GAAlC,CAFA,CAAP;AAWD;AAED,OAAO,SAASC,wBAAT,CACLC,qBADK,EAEG;AACR,SAAOA,qBAAqB,CAACC,MAAtB,GAA+B,CAA/B,GACHD,qBAAqB,CAClBd,GADH,CAEKG,UAAD,IACEA,UAAU,CAACC,QAAX,GAAsBD,UAAU,CAACK,QAHvC,EAKGQ,MALH,CAKU,CAACC,GAAD,EAAMC,OAAN,KAAkBD,GAAG,GAAGC,OALlC,EAK2C,CAL3C,IAMEJ,qBAAqB,CAACC,MAPrB,GAQH,CARJ;AASD;AAED,OAAO,MAAMI,oCAIF,GAAGtB,IAAI,CAACC,oBAAD,EAAuBe,wBAAvB,CAJX;AAMP,OAAO,SAASO,0BAAT,CACLrB,UADK,EAIe;AACpB,SAAOA,UAAU,CAACC,GAAX,CAAgBC,SAAD,IAAeA,SAAS,CAACC,WAAxC,CAAP;AACD;AAED,OAAO,SAASmB,8BAAT,CACLC,2BADK,EAEa;AAClB,QAAMC,cAAc,GAAIC,WAAD,IAAyC;AAC9D,WAAOF,2BAA2B,CAACP,MAA5B,GAAqC,CAArC,GACHO,2BAA2B,CAACN,MAA5B,CACE,CAACC,GAAD,EAAMC,OAAN,KAAkBD,GAAG,GAAGC,OAAO,CAACM,WAAD,CADjC,EAEE,CAFF,IAGIF,2BAA2B,CAACP,MAJ7B,GAKH,CALJ;AAMD,GAPD;;AASA,SAAO;AACLT,IAAAA,KAAK,EAAEiB,cAAc,CAAC,OAAD,CADhB;AAELlB,IAAAA,SAAS,EAAEkB,cAAc,CAAC,WAAD,CAFpB;AAGLhB,IAAAA,OAAO,EAAEgB,cAAc,CAAC,SAAD,CAHlB;AAILd,IAAAA,GAAG,EAAEc,cAAc,CAAC,KAAD,CAJd;AAKLX,IAAAA,KAAK,EAAEW,cAAc,CAAC,OAAD,CALhB;AAMLb,IAAAA,SAAS,EAAEa,cAAc,CAAC,WAAD,CANpB;AAOLZ,IAAAA,OAAO,EAAEY,cAAc,CAAC,SAAD;AAPlB,GAAP;AASD;AAED,OAAO,MAAME,0CAIQ,GAAG5B,IAAI,CAC1BuB,0BAD0B,EAE1BC,8BAF0B,CAJrB","sourcesContent":["import { FaceExpressions, WithFaceExpressions } from \"face-api.js\";\nimport flow from \"lodash-es/flow\";\n\nexport type PaulEkmanEmotion = {\n  happy: number;\n  surprised: number;\n  neutral: number;\n  sad: number;\n  disgusted: number;\n  fearful: number;\n  angry: number;\n};\n\nexport type AggregatedExpression = {\n  positive: number;\n  neutral: number;\n  negative: number;\n};\n\nexport function aggregateExpressions(\n  detections: WithFaceExpressions<{\n    expressions: FaceExpressions;\n  }>[]\n): AggregatedExpression[] {\n  return detections\n    .map((detection) => detection.expressions)\n    .map((expression: FaceExpressions) => ({\n      positive: expression.surprised + expression.happy,\n      neutral: expression.neutral,\n      negative:\n        expression.sad +\n        expression.disgusted +\n        expression.fearful +\n        expression.angry,\n    }));\n}\n\nexport function calculateExpressionScore(\n  aggregatedExpressions: AggregatedExpression[]\n): number {\n  return aggregatedExpressions.length > 0\n    ? aggregatedExpressions\n        .map(\n          (expression: AggregatedExpression) =>\n            expression.positive - expression.negative\n        )\n        .reduce((acc, current) => acc + current, 0) /\n        aggregatedExpressions.length\n    : 0;\n}\n\nexport const aggregateAndCalculateExpressionScore: (\n  detections: WithFaceExpressions<{\n    expressions: FaceExpressions;\n  }>[]\n) => number = flow(aggregateExpressions, calculateExpressionScore);\n\nexport function aggregatePaulEkmanEmotions(\n  detections: WithFaceExpressions<{\n    expressions: FaceExpressions;\n  }>[]\n): PaulEkmanEmotion[] {\n  return detections.map((detection) => detection.expressions);\n}\n\nexport function calculatePaulEkmanEmotionScore(\n  aggregatedPaulEkmanEmotions: PaulEkmanEmotion[]\n): PaulEkmanEmotion {\n  const meanEmotionFor = (emotionName: keyof PaulEkmanEmotion) => {\n    return aggregatedPaulEkmanEmotions.length > 0\n      ? aggregatedPaulEkmanEmotions.reduce(\n          (acc, current) => acc + current[emotionName],\n          0\n        ) / aggregatedPaulEkmanEmotions.length\n      : 0;\n  };\n\n  return {\n    happy: meanEmotionFor(\"happy\"),\n    surprised: meanEmotionFor(\"surprised\"),\n    neutral: meanEmotionFor(\"neutral\"),\n    sad: meanEmotionFor(\"sad\"),\n    angry: meanEmotionFor(\"angry\"),\n    disgusted: meanEmotionFor(\"disgusted\"),\n    fearful: meanEmotionFor(\"fearful\"),\n  };\n}\n\nexport const aggregateAndCalculatePaulEkmanEmotionScore: (\n  detections: WithFaceExpressions<{\n    expressions: FaceExpressions;\n  }>[]\n) => PaulEkmanEmotion = flow(\n  aggregatePaulEkmanEmotions,\n  calculatePaulEkmanEmotionScore\n);\n"]},"metadata":{},"sourceType":"module"}