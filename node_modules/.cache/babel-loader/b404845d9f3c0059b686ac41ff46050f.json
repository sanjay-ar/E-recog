{"ast":null,"code":"var _jsxFileName = \"/Users/sanjayar/Desktop/moody-main copy 2/src/pages/feedback/Question.tsx\",\n    _s = $RefreshSig$();\n\nimport { Box, makeStyles, Typography } from \"@material-ui/core\";\nimport { Rating } from \"@material-ui/lab\";\nimport { DEFAULT_RATING_LABELS } from \"./constants\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  questionBox: {\n    backgroundColor: \"rgba(52, 73, 94, 0.5)\",\n    borderRadius: theme.spacing(1.5),\n    padding: theme.spacing(3),\n    border: \"1px solid rgba(236, 240, 241, 0.1)\",\n    transition: \"all 0.3s ease-in-out\",\n    \"&:hover\": {\n      backgroundColor: \"rgba(52, 73, 94, 0.7)\",\n      transform: \"translateY(-2px)\",\n      boxShadow: \"0 5px 15px rgba(0, 0, 0, 0.2)\"\n    }\n  },\n  question: {\n    fontSize: \"1.5rem\",\n    fontWeight: 600,\n    marginBottom: theme.spacing(2),\n    color: \"#ECF0F1\"\n  },\n  stars: {\n    fontSize: \"2.5rem\",\n    color: theme.palette.primary.main\n  },\n  label: {\n    fontSize: \"1.1rem\",\n    color: \"#BDC3C7\",\n    marginLeft: theme.spacing(2),\n    transition: \"color 0.3s ease-in-out\"\n  },\n  required: {\n    fontSize: \"0.9rem\",\n    color: \"#95A5A6\",\n    marginTop: theme.spacing(1)\n  }\n}));\nexport default function Question({\n  name,\n  stars,\n  onChange,\n  question,\n  required\n}) {\n  _s();\n\n  const classes = useStyles();\n  const [hover, setHover] = useState(-1);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: classes.questionBox,\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      className: classes.question,\n      children: question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      alignItems: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(Rating, {\n        name: name,\n        className: classes.stars,\n        value: stars,\n        onChange: onChange,\n        onChangeActive: (event, newHover) => {\n          setHover(newHover);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), stars !== null && /*#__PURE__*/_jsxDEV(Typography, {\n        className: classes.label,\n        children: DEFAULT_RATING_LABELS[hover !== -1 ? hover : stars]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), required && /*#__PURE__*/_jsxDEV(Typography, {\n      className: classes.required,\n      children: \"(Required)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Question, \"Y08JLkvS1x3aBD45eqTKSfBAEH4=\", false, function () {\n  return [useStyles];\n});\n\n_c = Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"sources":["/Users/sanjayar/Desktop/moody-main copy 2/src/pages/feedback/Question.tsx"],"names":["Box","makeStyles","Typography","Rating","DEFAULT_RATING_LABELS","useState","useStyles","theme","questionBox","backgroundColor","borderRadius","spacing","padding","border","transition","transform","boxShadow","question","fontSize","fontWeight","marginBottom","color","stars","palette","primary","main","label","marginLeft","required","marginTop","Question","name","onChange","classes","hover","setHover","event","newHover"],"mappings":"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","sourcesContent":["import { Box, makeStyles, Theme, Typography } from \"@material-ui/core\";\nimport { Rating } from \"@material-ui/lab\";\nimport { DEFAULT_RATING_LABELS } from \"./constants\";\nimport { ChangeEvent, useState } from \"react\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  questionBox: {\n    backgroundColor: \"rgba(52, 73, 94, 0.5)\",\n    borderRadius: theme.spacing(1.5),\n    padding: theme.spacing(3),\n    border: \"1px solid rgba(236, 240, 241, 0.1)\",\n    transition: \"all 0.3s ease-in-out\",\n    \"&:hover\": {\n      backgroundColor: \"rgba(52, 73, 94, 0.7)\",\n      transform: \"translateY(-2px)\",\n      boxShadow: \"0 5px 15px rgba(0, 0, 0, 0.2)\",\n    },\n  },\n  question: {\n    fontSize: \"1.5rem\",\n    fontWeight: 600,\n    marginBottom: theme.spacing(2),\n    color: \"#ECF0F1\",\n  },\n  stars: {\n    fontSize: \"2.5rem\",\n    color: theme.palette.primary.main,\n  },\n  label: {\n    fontSize: \"1.1rem\",\n    color: \"#BDC3C7\",\n    marginLeft: theme.spacing(2),\n    transition: \"color 0.3s ease-in-out\",\n  },\n  required: {\n    fontSize: \"0.9rem\",\n    color: \"#95A5A6\",\n    marginTop: theme.spacing(1),\n  },\n}));\n\ntype QuestionProps = {\n  name: string;\n  stars: number | null;\n  onChange: (event: ChangeEvent<{}>, newHover: number | null) => void;\n  question: string;\n  required: boolean;\n};\n\nexport default function Question({\n  name,\n  stars,\n  onChange,\n  question,\n  required,\n}: QuestionProps): JSX.Element {\n  const classes = useStyles();\n  const [hover, setHover] = useState(-1);\n\n  return (\n    <Box className={classes.questionBox}>\n      <Typography className={classes.question}>{question}</Typography>\n      <Box display=\"flex\" alignItems=\"center\">\n        <Rating\n          name={name}\n          className={classes.stars}\n          value={stars}\n          onChange={onChange}\n          onChangeActive={(event, newHover) => {\n            setHover(newHover);\n          }}\n        />\n        {stars !== null && (\n          <Typography className={classes.label}>\n            {DEFAULT_RATING_LABELS[hover !== -1 ? hover : stars]}\n          </Typography>\n        )}\n      </Box>\n      {required && (\n        <Typography className={classes.required}>(Required)</Typography>\n      )}\n    </Box>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}