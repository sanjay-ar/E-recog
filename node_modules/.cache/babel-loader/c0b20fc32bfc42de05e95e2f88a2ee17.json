{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n};\n\nimport API from '@aws-amplify/api';\nimport { Auth } from '@aws-amplify/auth';\nimport Cache from '@aws-amplify/cache';\nimport { Amplify, ConsoleLogger as Logger, Hub, JS, BackgroundProcessManager } from '@aws-amplify/core';\nimport { immerable, produce, setAutoFreeze, enablePatches } from 'immer';\nimport { v4 as uuid4 } from 'uuid';\nimport Observable from 'zen-observable-ts';\nimport { defaultAuthStrategy, multiAuthStrategy } from '../authModeStrategies';\nimport { isPredicatesAll, ModelPredicateCreator, ModelSortPredicateCreator } from '../predicates';\nimport { ExclusiveStorage as Storage } from '../storage/storage';\nimport { ControlMessage, SyncEngine } from '../sync';\nimport { GraphQLScalarType, isGraphQLScalarType, isSchemaModelWithAttributes, AuthModeStrategyType, isNonModelFieldType, isModelFieldType, isIdentifierObject } from '../types';\nimport { DATASTORE, errorMessages, establishRelationAndKeys, exhaustiveCheck, isModelConstructor, monotonicUlidFactory, STORAGE, SYNC, USER, isNullOrUndefined, registerNonModelClass, sortCompareFunction, DeferredCallbackResolver, extractPrimaryKeyFieldNames, extractPrimaryKeysAndValues, isIdManaged, isIdOptionallyManaged, validatePredicate, mergePatches } from '../util';\nimport { getIdentifierValue } from '../sync/utils';\nsetAutoFreeze(true);\nenablePatches();\nvar logger = new Logger('DataStore');\nvar ulid = monotonicUlidFactory(Date.now());\nvar isNode = JS.browserOrNode().isNode;\nvar SETTING_SCHEMA_VERSION = 'schemaVersion';\nvar schema;\nvar modelNamespaceMap = new WeakMap(); // stores data for crafting the correct update mutation input for a model\n// Patch[] - array of changed fields and metadata\n// PersistentModel - the source model, used for diffing object-type fields\n\nvar modelPatchesMap = new WeakMap();\n\nvar getModelDefinition = function (modelConstructor) {\n  var namespace = modelNamespaceMap.get(modelConstructor);\n  return schema.namespaces[namespace].models[modelConstructor.name];\n};\n\nvar isValidModelConstructor = function (obj) {\n  return isModelConstructor(obj) && modelNamespaceMap.has(obj);\n};\n\nvar namespaceResolver = function (modelConstructor) {\n  return modelNamespaceMap.get(modelConstructor);\n}; // exporting syncClasses for testing outbox.test.ts\n\n\nexport var syncClasses;\nvar userClasses;\nvar dataStoreClasses;\nvar storageClasses;\n\nvar initSchema = function (userSchema) {\n  var _a;\n\n  if (schema !== undefined) {\n    console.warn('The schema has already been initialized');\n    return userClasses;\n  }\n\n  logger.log('validating schema', {\n    schema: userSchema\n  });\n\n  var internalUserNamespace = __assign({\n    name: USER\n  }, userSchema);\n\n  logger.log('DataStore', 'Init models');\n  userClasses = createTypeClasses(internalUserNamespace);\n  logger.log('DataStore', 'Models initialized');\n  var dataStoreNamespace = getNamespace();\n  var storageNamespace = Storage.getNamespace();\n  var syncNamespace = SyncEngine.getNamespace();\n  dataStoreClasses = createTypeClasses(dataStoreNamespace);\n  storageClasses = createTypeClasses(storageNamespace);\n  syncClasses = createTypeClasses(syncNamespace);\n  schema = {\n    namespaces: (_a = {}, _a[dataStoreNamespace.name] = dataStoreNamespace, _a[internalUserNamespace.name] = internalUserNamespace, _a[storageNamespace.name] = storageNamespace, _a[syncNamespace.name] = syncNamespace, _a),\n    version: userSchema.version\n  };\n  Object.keys(schema.namespaces).forEach(function (namespace) {\n    var e_1, _a;\n\n    var _b = __read(establishRelationAndKeys(schema.namespaces[namespace]), 2),\n        relations = _b[0],\n        keys = _b[1];\n\n    schema.namespaces[namespace].relationships = relations;\n    schema.namespaces[namespace].keys = keys;\n    var modelAssociations = new Map();\n    Object.values(schema.namespaces[namespace].models).forEach(function (model) {\n      var connectedModels = [];\n      Object.values(model.fields).filter(function (field) {\n        return field.association && field.association.connectionType === 'BELONGS_TO' && field.type.model !== model.name;\n      }).forEach(function (field) {\n        return connectedModels.push(field.type.model);\n      });\n      modelAssociations.set(model.name, connectedModels);\n    });\n    var result = new Map();\n    var count = 1000;\n\n    while (true && count > 0) {\n      if (modelAssociations.size === 0) {\n        break;\n      }\n\n      count--;\n\n      if (count === 0) {\n        throw new Error('Models are not topologically sortable. Please verify your schema.');\n      }\n\n      try {\n        for (var _c = (e_1 = void 0, __values(Array.from(modelAssociations.keys()))), _d = _c.next(); !_d.done; _d = _c.next()) {\n          var modelName = _d.value;\n          var parents = modelAssociations.get(modelName);\n\n          if (parents.every(function (x) {\n            return result.has(x);\n          })) {\n            result.set(modelName, parents);\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      Array.from(result.keys()).forEach(function (x) {\n        return modelAssociations.delete(x);\n      });\n    }\n\n    schema.namespaces[namespace].modelTopologicalOrdering = result;\n  });\n  return userClasses;\n};\n/**\n * Throws an exception if the schema has *not* been initialized\n * by `initSchema()`.\n *\n * **To be called before trying to access schema.**\n *\n * Currently this only needs to be called in `start()` and `clear()` because\n * all other functions will call start first.\n */\n\n\nvar checkSchemaInitialized = function () {\n  if (schema === undefined) {\n    var message = 'Schema is not initialized. DataStore will not function as expected. This could happen if you have multiple versions of DataStore installed. Please see https://docs.amplify.aws/lib/troubleshooting/upgrading/q/platform/js/#check-for-duplicate-versions';\n    logger.error(message);\n    throw new Error(message);\n  }\n};\n\nvar createTypeClasses = function (namespace) {\n  var classes = {};\n  Object.entries(namespace.models).forEach(function (_a) {\n    var _b = __read(_a, 2),\n        modelName = _b[0],\n        modelDefinition = _b[1];\n\n    var clazz = createModelClass(modelDefinition);\n    classes[modelName] = clazz;\n    modelNamespaceMap.set(clazz, namespace.name);\n  });\n  Object.entries(namespace.nonModels || {}).forEach(function (_a) {\n    var _b = __read(_a, 2),\n        typeName = _b[0],\n        typeDefinition = _b[1];\n\n    var clazz = createNonModelClass(typeDefinition);\n    classes[typeName] = clazz;\n  });\n  return classes;\n};\n/**\n * Collection of instantiated models to allow storage of metadata apart from\n * the model visible to the consuming app -- in case the app doesn't have\n * metadata fields (_version, _deleted, etc.) exposed on the model itself.\n */\n\n\nvar instancesMetadata = new WeakSet();\n\nfunction modelInstanceCreator(modelConstructor, init) {\n  instancesMetadata.add(init);\n  return new modelConstructor(init);\n}\n\nvar validateModelFields = function (modelDefinition) {\n  return function (k, v) {\n    var fieldDefinition = modelDefinition.fields[k];\n\n    if (fieldDefinition !== undefined) {\n      var type_1 = fieldDefinition.type,\n          isRequired_1 = fieldDefinition.isRequired,\n          isArrayNullable = fieldDefinition.isArrayNullable,\n          name_1 = fieldDefinition.name,\n          isArray = fieldDefinition.isArray;\n\n      if ((!isArray && isRequired_1 || isArray && !isArrayNullable) && (v === null || v === undefined)) {\n        throw new Error(\"Field \" + name_1 + \" is required\");\n      }\n\n      if (isSchemaModelWithAttributes(modelDefinition) && !isIdManaged(modelDefinition)) {\n        var keys = extractPrimaryKeyFieldNames(modelDefinition);\n\n        if (keys.includes(k) && v === '') {\n          logger.error(errorMessages.idEmptyString, {\n            k: k,\n            value: v\n          });\n          throw new Error(errorMessages.idEmptyString);\n        }\n      }\n\n      if (isGraphQLScalarType(type_1)) {\n        var jsType_1 = GraphQLScalarType.getJSType(type_1);\n        var validateScalar_1 = GraphQLScalarType.getValidationFunction(type_1);\n\n        if (type_1 === 'AWSJSON') {\n          if (typeof v === jsType_1) {\n            return;\n          }\n\n          if (typeof v === 'string') {\n            try {\n              JSON.parse(v);\n              return;\n            } catch (error) {\n              throw new Error(\"Field \" + name_1 + \" is an invalid JSON object. \" + v);\n            }\n          }\n        }\n\n        if (isArray) {\n          var errorTypeText = jsType_1;\n\n          if (!isRequired_1) {\n            errorTypeText = jsType_1 + \" | null | undefined\";\n          }\n\n          if (!Array.isArray(v) && !isArrayNullable) {\n            throw new Error(\"Field \" + name_1 + \" should be of type [\" + errorTypeText + \"], \" + typeof v + \" received. \" + v);\n          }\n\n          if (!isNullOrUndefined(v) && v.some(function (e) {\n            return isNullOrUndefined(e) ? isRequired_1 : typeof e !== jsType_1;\n          })) {\n            var elemTypes = v.map(function (e) {\n              return e === null ? 'null' : typeof e;\n            }).join(',');\n            throw new Error(\"All elements in the \" + name_1 + \" array should be of type \" + errorTypeText + \", [\" + elemTypes + \"] received. \" + v);\n          }\n\n          if (validateScalar_1 && !isNullOrUndefined(v)) {\n            var validationStatus = v.map(function (e) {\n              if (!isNullOrUndefined(e)) {\n                return validateScalar_1(e);\n              } else if (isNullOrUndefined(e) && !isRequired_1) {\n                return true;\n              } else {\n                return false;\n              }\n            });\n\n            if (!validationStatus.every(function (s) {\n              return s;\n            })) {\n              throw new Error(\"All elements in the \" + name_1 + \" array should be of type \" + type_1 + \", validation failed for one or more elements. \" + v);\n            }\n          }\n        } else if (!isRequired_1 && v === undefined) {\n          return;\n        } else if (typeof v !== jsType_1 && v !== null) {\n          throw new Error(\"Field \" + name_1 + \" should be of type \" + jsType_1 + \", \" + typeof v + \" received. \" + v);\n        } else if (!isNullOrUndefined(v) && validateScalar_1 && !validateScalar_1(v)) {\n          throw new Error(\"Field \" + name_1 + \" should be of type \" + type_1 + \", validation failed. \" + v);\n        }\n      } else if (isNonModelFieldType(type_1)) {\n        // do not check non model fields if undefined or null\n        if (!isNullOrUndefined(v)) {\n          var subNonModelDefinition_1 = schema.namespaces.user.nonModels[type_1.nonModel];\n          var modelValidator_1 = validateModelFields(subNonModelDefinition_1);\n\n          if (isArray) {\n            var errorTypeText = type_1.nonModel;\n\n            if (!isRequired_1) {\n              errorTypeText = type_1.nonModel + \" | null | undefined\";\n            }\n\n            if (!Array.isArray(v)) {\n              throw new Error(\"Field \" + name_1 + \" should be of type [\" + errorTypeText + \"], \" + typeof v + \" received. \" + v);\n            }\n\n            v.forEach(function (item) {\n              if (isNullOrUndefined(item) && isRequired_1 || typeof item !== 'object' && typeof item !== 'undefined') {\n                throw new Error(\"All elements in the \" + name_1 + \" array should be of type \" + type_1.nonModel + \", [\" + typeof item + \"] received. \" + item);\n              }\n\n              if (!isNullOrUndefined(item)) {\n                Object.keys(subNonModelDefinition_1.fields).forEach(function (subKey) {\n                  modelValidator_1(subKey, item[subKey]);\n                });\n              }\n            });\n          } else {\n            if (typeof v !== 'object') {\n              throw new Error(\"Field \" + name_1 + \" should be of type \" + type_1.nonModel + \", \" + typeof v + \" recieved. \" + v);\n            }\n\n            Object.keys(subNonModelDefinition_1.fields).forEach(function (subKey) {\n              modelValidator_1(subKey, v[subKey]);\n            });\n          }\n        }\n      }\n    }\n  };\n};\n\nvar castInstanceType = function (modelDefinition, k, v) {\n  var _a = modelDefinition.fields[k] || {},\n      isArray = _a.isArray,\n      type = _a.type; // attempt to parse stringified JSON\n\n\n  if (typeof v === 'string' && (isArray || type === 'AWSJSON' || isNonModelFieldType(type) || isModelFieldType(type))) {\n    try {\n      return JSON.parse(v);\n    } catch (_b) {// if JSON is invalid, don't throw and let modelValidator handle it\n    }\n  } // cast from numeric representation of boolean to JS boolean\n\n\n  if (typeof v === 'number' && type === 'Boolean') {\n    return Boolean(v);\n  }\n\n  return v;\n};\n\nvar initializeInstance = function (init, modelDefinition, draft) {\n  var modelValidator = validateModelFields(modelDefinition);\n  Object.entries(init).forEach(function (_a) {\n    var _b = __read(_a, 2),\n        k = _b[0],\n        v = _b[1];\n\n    var parsedValue = castInstanceType(modelDefinition, k, v);\n    modelValidator(k, parsedValue);\n    draft[k] = parsedValue;\n  });\n};\n\nvar createModelClass = function (modelDefinition) {\n  var clazz =\n  /** @class */\n  function () {\n    function Model(init) {\n      var instance = produce(this, function (draft) {\n        initializeInstance(init, modelDefinition, draft); // model is initialized inside a DataStore component (e.g. by Sync Engine, Storage Engine, etc.)\n\n        var isInternallyInitialized = instancesMetadata.has(init);\n        var modelInstanceMetadata = isInternallyInitialized ? init : {};\n        var _id = modelInstanceMetadata.id;\n\n        if (isIdManaged(modelDefinition)) {\n          var isInternalModel = _id !== null && _id !== undefined;\n          var id = isInternalModel ? _id : modelDefinition.syncable ? uuid4() : ulid();\n          draft.id = id;\n        } else if (isIdOptionallyManaged(modelDefinition)) {\n          // only auto-populate if the id was not provided\n          draft.id = draft.id || uuid4();\n        }\n\n        if (!isInternallyInitialized) {\n          checkReadOnlyPropertyOnCreate(draft, modelDefinition);\n        }\n\n        var _version = modelInstanceMetadata._version,\n            _lastChangedAt = modelInstanceMetadata._lastChangedAt,\n            _deleted = modelInstanceMetadata._deleted;\n\n        if (modelDefinition.syncable) {\n          draft._version = _version;\n          draft._lastChangedAt = _lastChangedAt;\n          draft._deleted = _deleted;\n        }\n      });\n      return instance;\n    }\n\n    Model.copyOf = function (source, fn) {\n      var modelConstructor = Object.getPrototypeOf(source || {}).constructor;\n\n      if (!isValidModelConstructor(modelConstructor)) {\n        var msg = 'The source object is not a valid model';\n        logger.error(msg, {\n          source: source\n        });\n        throw new Error(msg);\n      }\n\n      var patches;\n      var model = produce(source, function (draft) {\n        fn(draft);\n        var keyNames = extractPrimaryKeyFieldNames(modelDefinition); // Keys are immutable\n\n        keyNames.forEach(function (key) {\n          return draft[key] = source[key];\n        });\n        var modelValidator = validateModelFields(modelDefinition);\n        Object.entries(draft).forEach(function (_a) {\n          var _b = __read(_a, 2),\n              k = _b[0],\n              v = _b[1];\n\n          var parsedValue = castInstanceType(modelDefinition, k, v);\n          modelValidator(k, parsedValue);\n        });\n      }, function (p) {\n        return patches = p;\n      });\n      var hasExistingPatches = modelPatchesMap.has(source);\n\n      if (patches.length || hasExistingPatches) {\n        if (hasExistingPatches) {\n          var _a = __read(modelPatchesMap.get(source), 2),\n              existingPatches = _a[0],\n              existingSource = _a[1];\n\n          var mergedPatches = mergePatches(existingSource, existingPatches, patches);\n          modelPatchesMap.set(model, [mergedPatches, existingSource]);\n          checkReadOnlyPropertyOnUpdate(mergedPatches, modelDefinition);\n        } else {\n          modelPatchesMap.set(model, [patches, source]);\n          checkReadOnlyPropertyOnUpdate(patches, modelDefinition);\n        }\n      }\n\n      return model;\n    }; // \"private\" method (that's hidden via `Setting`) for `withSSRContext` to use\n    // to gain access to `modelInstanceCreator` and `clazz` for persisting IDs from server to client.\n\n\n    Model.fromJSON = function (json) {\n      var _this = this;\n\n      if (Array.isArray(json)) {\n        return json.map(function (init) {\n          return _this.fromJSON(init);\n        });\n      }\n\n      var instance = modelInstanceCreator(clazz, json);\n      var modelValidator = validateModelFields(modelDefinition);\n      Object.entries(instance).forEach(function (_a) {\n        var _b = __read(_a, 2),\n            k = _b[0],\n            v = _b[1];\n\n        modelValidator(k, v);\n      });\n      return instance;\n    };\n\n    return Model;\n  }();\n\n  clazz[immerable] = true;\n  Object.defineProperty(clazz, 'name', {\n    value: modelDefinition.name\n  });\n  return clazz;\n};\n\nvar checkReadOnlyPropertyOnCreate = function (draft, modelDefinition) {\n  var modelKeys = Object.keys(draft);\n  var fields = modelDefinition.fields;\n  modelKeys.forEach(function (key) {\n    if (fields[key] && fields[key].isReadOnly) {\n      throw new Error(key + \" is read-only.\");\n    }\n  });\n};\n\nvar checkReadOnlyPropertyOnUpdate = function (patches, modelDefinition) {\n  var patchArray = patches.map(function (p) {\n    return [p.path[0], p.value];\n  });\n  var fields = modelDefinition.fields;\n  patchArray.forEach(function (_a) {\n    var _b = __read(_a, 2),\n        key = _b[0],\n        val = _b[1];\n\n    if (!val || !fields[key]) return;\n\n    if (fields[key].isReadOnly) {\n      throw new Error(key + \" is read-only.\");\n    }\n  });\n};\n\nvar createNonModelClass = function (typeDefinition) {\n  var clazz =\n  /** @class */\n  function () {\n    function Model(init) {\n      var instance = produce(this, function (draft) {\n        initializeInstance(init, typeDefinition, draft);\n      });\n      return instance;\n    }\n\n    return Model;\n  }();\n\n  clazz[immerable] = true;\n  Object.defineProperty(clazz, 'name', {\n    value: typeDefinition.name\n  });\n  registerNonModelClass(clazz);\n  return clazz;\n};\n\nfunction isQueryOne(obj) {\n  return typeof obj === 'string';\n}\n\nfunction defaultConflictHandler(conflictData) {\n  var localModel = conflictData.localModel,\n      modelConstructor = conflictData.modelConstructor,\n      remoteModel = conflictData.remoteModel;\n  var _version = remoteModel._version;\n  return modelInstanceCreator(modelConstructor, __assign(__assign({}, localModel), {\n    _version: _version\n  }));\n}\n\nfunction defaultErrorHandler(error) {\n  logger.warn(error);\n}\n\nfunction getModelConstructorByModelName(namespaceName, modelName) {\n  var result;\n\n  switch (namespaceName) {\n    case DATASTORE:\n      result = dataStoreClasses[modelName];\n      break;\n\n    case USER:\n      result = userClasses[modelName];\n      break;\n\n    case SYNC:\n      result = syncClasses[modelName];\n      break;\n\n    case STORAGE:\n      result = storageClasses[modelName];\n      break;\n\n    default:\n      exhaustiveCheck(namespaceName);\n      break;\n  }\n\n  if (isValidModelConstructor(result)) {\n    return result;\n  } else {\n    var msg = \"Model name is not valid for namespace. modelName: \" + modelName + \", namespace: \" + namespaceName;\n    logger.error(msg);\n    throw new Error(msg);\n  }\n}\n/**\n * Queries the DataStore metadata tables to see if they are the expected\n * version. If not, clobbers the whole DB. If so, leaves them alone.\n * Otherwise, simply writes the schema version.\n *\n * SIDE EFFECT:\n * 1. Creates a transaction\n * 1. Updates data.\n *\n * @param storage Storage adapter containing the metadata.\n * @param version The expected schema version.\n */\n\n\nfunction checkSchemaVersion(storage, version) {\n  return __awaiter(this, void 0, void 0, function () {\n    var Setting, modelDefinition;\n\n    var _this = this;\n\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          Setting = dataStoreClasses.Setting;\n          modelDefinition = schema.namespaces[DATASTORE].models.Setting;\n          return [4\n          /*yield*/\n          , storage.runExclusive(function (s) {\n            return __awaiter(_this, void 0, void 0, function () {\n              var _a, schemaVersionSetting, storedValue;\n\n              return __generator(this, function (_b) {\n                switch (_b.label) {\n                  case 0:\n                    return [4\n                    /*yield*/\n                    , s.query(Setting, ModelPredicateCreator.createFromExisting(modelDefinition, function (c) {\n                      return c.key('eq', SETTING_SCHEMA_VERSION);\n                    }), {\n                      page: 0,\n                      limit: 1\n                    })];\n\n                  case 1:\n                    _a = __read.apply(void 0, [_b.sent(), 1]), schemaVersionSetting = _a[0];\n                    if (!(schemaVersionSetting !== undefined && schemaVersionSetting.value !== undefined)) return [3\n                    /*break*/\n                    , 4];\n                    storedValue = JSON.parse(schemaVersionSetting.value);\n                    if (!(storedValue !== version)) return [3\n                    /*break*/\n                    , 3];\n                    return [4\n                    /*yield*/\n                    , s.clear(false)];\n\n                  case 2:\n                    _b.sent();\n\n                    _b.label = 3;\n\n                  case 3:\n                    return [3\n                    /*break*/\n                    , 6];\n\n                  case 4:\n                    return [4\n                    /*yield*/\n                    , s.save(modelInstanceCreator(Setting, {\n                      key: SETTING_SCHEMA_VERSION,\n                      value: JSON.stringify(version)\n                    }))];\n\n                  case 5:\n                    _b.sent();\n\n                    _b.label = 6;\n\n                  case 6:\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            });\n          })];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n\nvar syncSubscription;\n\nfunction getNamespace() {\n  var namespace = {\n    name: DATASTORE,\n    relationships: {},\n    enums: {},\n    nonModels: {},\n    models: {\n      Setting: {\n        name: 'Setting',\n        pluralName: 'Settings',\n        syncable: false,\n        fields: {\n          id: {\n            name: 'id',\n            type: 'ID',\n            isRequired: true,\n            isArray: false\n          },\n          key: {\n            name: 'key',\n            type: 'String',\n            isRequired: true,\n            isArray: false\n          },\n          value: {\n            name: 'value',\n            type: 'String',\n            isRequired: true,\n            isArray: false\n          }\n        }\n      }\n    }\n  };\n  return namespace;\n}\n\nvar DataStoreState;\n\n(function (DataStoreState) {\n  DataStoreState[\"NotRunning\"] = \"Not Running\";\n  DataStoreState[\"Starting\"] = \"Starting\";\n  DataStoreState[\"Running\"] = \"Running\";\n  DataStoreState[\"Stopping\"] = \"Stopping\";\n  DataStoreState[\"Clearing\"] = \"Clearing\";\n})(DataStoreState || (DataStoreState = {}));\n\nvar DataStore =\n/** @class */\nfunction () {\n  function DataStore() {\n    var _this = this; // reference to configured category instances. Used for preserving SSR context\n\n\n    this.Auth = Auth;\n    this.API = API;\n    this.Cache = Cache;\n    this.amplifyConfig = {};\n    this.syncPredicates = new WeakMap(); // object that gets passed to descendent classes. Allows us to pass these down by reference\n\n    this.amplifyContext = {\n      Auth: this.Auth,\n      API: this.API,\n      Cache: this.Cache\n    };\n    /**\n     * **IMPORTANT!**\n     *\n     * Accumulator for background things that can **and MUST** be called when\n     * DataStore stops.\n     *\n     * These jobs **MUST** be *idempotent promises* that resolve ONLY\n     * once the intended jobs are completely finished and/or otherwise destroyed\n     * and cleaned up with ZERO outstanding:\n     *\n     * 1. side effects (e.g., state changes)\n     * 1. callbacks\n     * 1. subscriptions\n     * 1. calls to storage\n     * 1. *etc.*\n     *\n     * Methods that create pending promises, subscriptions, callbacks, or any\n     * type of side effect **MUST** be registered with the manager. And, a new\n     * manager must be created after each `exit()`.\n     *\n     * Failure to comply will put DataStore into a highly unpredictable state\n     * when it needs to stop or clear -- which occurs when restarting with new\n     * sync expressions, during testing, and potentially during app code\n     * recovery handling, etc..\n     *\n     * It is up to the discretion of each disposer whether to wait for job\n     * completion or to cancel operations and issue failures *as long as the\n     * disposer returns in a reasonable amount of time.*\n     *\n     * (Reasonable = *seconds*, not minutes.)\n     */\n\n    this.runningProcesses = new BackgroundProcessManager();\n    /**\n     * Indicates what state DataStore is in.\n     *\n     * Not [yet?] used for actual state management; but for messaging\n     * when errors occur, to help troubleshoot.\n     */\n\n    this.state = DataStoreState.NotRunning;\n    /**\n     * If not already done:\n     * 1. Attaches and initializes storage.\n     * 1. Loads the schema and records metadata.\n     * 1. If `this.amplifyConfig.aws_appsync_graphqlEndpoint` contains a URL,\n     * attaches a sync engine, starts it, and subscribes.\n     */\n\n    this.start = function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _this = this;\n\n        return __generator(this, function (_a) {\n          return [2\n          /*return*/\n          , this.runningProcesses.add(function () {\n            return __awaiter(_this, void 0, void 0, function () {\n              var aws_appsync_graphqlEndpoint, _a, fullSyncIntervalInMilliseconds;\n\n              var _this = this;\n\n              return __generator(this, function (_b) {\n                switch (_b.label) {\n                  case 0:\n                    this.state = DataStoreState.Starting;\n                    if (!(this.initialized === undefined)) return [3\n                    /*break*/\n                    , 1];\n                    logger.debug('Starting DataStore');\n                    this.initialized = new Promise(function (res, rej) {\n                      _this.initResolve = res;\n                      _this.initReject = rej;\n                    });\n                    return [3\n                    /*break*/\n                    , 3];\n\n                  case 1:\n                    return [4\n                    /*yield*/\n                    , this.initialized];\n\n                  case 2:\n                    _b.sent();\n\n                    return [2\n                    /*return*/\n                    ];\n\n                  case 3:\n                    this.storage = new Storage(schema, namespaceResolver, getModelConstructorByModelName, modelInstanceCreator, this.storageAdapter, this.sessionId);\n                    return [4\n                    /*yield*/\n                    , this.storage.init()];\n\n                  case 4:\n                    _b.sent();\n\n                    checkSchemaInitialized();\n                    return [4\n                    /*yield*/\n                    , checkSchemaVersion(this.storage, schema.version)];\n\n                  case 5:\n                    _b.sent();\n\n                    aws_appsync_graphqlEndpoint = this.amplifyConfig.aws_appsync_graphqlEndpoint;\n                    if (!aws_appsync_graphqlEndpoint) return [3\n                    /*break*/\n                    , 7];\n                    logger.debug('GraphQL endpoint available', aws_appsync_graphqlEndpoint);\n                    _a = this;\n                    return [4\n                    /*yield*/\n                    , this.processSyncExpressions()];\n\n                  case 6:\n                    _a.syncPredicates = _b.sent();\n                    this.sync = new SyncEngine(schema, namespaceResolver, syncClasses, userClasses, this.storage, modelInstanceCreator, this.conflictHandler, this.errorHandler, this.syncPredicates, this.amplifyConfig, this.authModeStrategy, this.amplifyContext, this.connectivityMonitor);\n                    fullSyncIntervalInMilliseconds = this.fullSyncInterval * 1000 * 60;\n                    syncSubscription = this.sync.start({\n                      fullSyncInterval: fullSyncIntervalInMilliseconds\n                    }).subscribe({\n                      next: function (_a) {\n                        var type = _a.type,\n                            data = _a.data; // In Node, we need to wait for queries to be synced to prevent returning empty arrays.\n                        // In the Browser, we can begin returning data once subscriptions are in place.\n\n                        var readyType = isNode ? ControlMessage.SYNC_ENGINE_SYNC_QUERIES_READY : ControlMessage.SYNC_ENGINE_STORAGE_SUBSCRIBED;\n\n                        if (type === readyType) {\n                          _this.initResolve();\n                        }\n\n                        Hub.dispatch('datastore', {\n                          event: type,\n                          data: data\n                        });\n                      },\n                      error: function (err) {\n                        logger.warn('Sync error', err);\n\n                        _this.initReject();\n                      }\n                    });\n                    return [3\n                    /*break*/\n                    , 8];\n\n                  case 7:\n                    logger.warn(\"Data won't be synchronized. No GraphQL endpoint configured. Did you forget `Amplify.configure(awsconfig)`?\", {\n                      config: this.amplifyConfig\n                    });\n                    this.initResolve();\n                    _b.label = 8;\n\n                  case 8:\n                    return [4\n                    /*yield*/\n                    , this.initialized];\n\n                  case 9:\n                    _b.sent();\n\n                    this.state = DataStoreState.Running;\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            });\n          }, 'datastore start').catch(this.handleAddProcError('DataStore.start()'))];\n        });\n      });\n    };\n\n    this.query = function (modelConstructor, identifierOrCriteria, paginationProducer) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _this = this;\n\n        return __generator(this, function (_a) {\n          return [2\n          /*return*/\n          , this.runningProcesses.add(function () {\n            return __awaiter(_this, void 0, void 0, function () {\n              var msg, modelDefinition, keyFields, predicate, msg, pagination, result, returnOne;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4\n                    /*yield*/\n                    , this.start()];\n\n                  case 1:\n                    _a.sent(); //#region Input validation\n\n\n                    if (!isValidModelConstructor(modelConstructor)) {\n                      msg = 'Constructor is not for a valid model';\n                      logger.error(msg, {\n                        modelConstructor: modelConstructor\n                      });\n                      throw new Error(msg);\n                    }\n\n                    if (typeof identifierOrCriteria === 'string') {\n                      if (paginationProducer !== undefined) {\n                        logger.warn('Pagination is ignored when querying by id');\n                      }\n                    }\n\n                    modelDefinition = getModelDefinition(modelConstructor);\n                    keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n\n                    if (isQueryOne(identifierOrCriteria)) {\n                      if (keyFields.length > 1) {\n                        msg = errorMessages.queryByPkWithCompositeKeyPresent;\n                        logger.error(msg, {\n                          keyFields: keyFields\n                        });\n                        throw new Error(msg);\n                      }\n\n                      predicate = ModelPredicateCreator.createForSingleField(modelDefinition, keyFields[0], identifierOrCriteria);\n                    } else {\n                      // Object is being queried using object literal syntax\n                      if (isIdentifierObject(identifierOrCriteria, modelDefinition)) {\n                        predicate = ModelPredicateCreator.createForPk(modelDefinition, identifierOrCriteria);\n                      } else if (isPredicatesAll(identifierOrCriteria)) {\n                        // Predicates.ALL means \"all records\", so no predicate (undefined)\n                        predicate = undefined;\n                      } else {\n                        predicate = ModelPredicateCreator.createFromExisting(modelDefinition, identifierOrCriteria);\n                      }\n                    }\n\n                    pagination = this.processPagination(modelDefinition, paginationProducer); //#endregion\n\n                    logger.debug('params ready', {\n                      modelConstructor: modelConstructor,\n                      predicate: ModelPredicateCreator.getPredicates(predicate, false),\n                      pagination: __assign(__assign({}, pagination), {\n                        sort: ModelSortPredicateCreator.getPredicates(pagination && pagination.sort, false)\n                      })\n                    });\n                    return [4\n                    /*yield*/\n                    , this.storage.query(modelConstructor, predicate, pagination)];\n\n                  case 2:\n                    result = _a.sent();\n                    returnOne = isQueryOne(identifierOrCriteria) || isIdentifierObject(identifierOrCriteria, modelDefinition);\n                    return [2\n                    /*return*/\n                    , returnOne ? result[0] : result];\n                }\n              });\n            });\n          }, 'datastore query').catch(this.handleAddProcError('DataStore.query()'))];\n        });\n      });\n    };\n\n    this.save = function (model, condition) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _this = this;\n\n        return __generator(this, function (_a) {\n          return [2\n          /*return*/\n          , this.runningProcesses.add(function () {\n            return __awaiter(_this, void 0, void 0, function () {\n              var patchesTuple, modelConstructor, msg, modelDefinition, producedCondition, _a, savedModel;\n\n              var _this = this;\n\n              return __generator(this, function (_b) {\n                switch (_b.label) {\n                  case 0:\n                    return [4\n                    /*yield*/\n                    , this.start()];\n\n                  case 1:\n                    _b.sent();\n\n                    patchesTuple = modelPatchesMap.get(model);\n                    modelConstructor = model ? model.constructor : undefined;\n\n                    if (!isValidModelConstructor(modelConstructor)) {\n                      msg = 'Object is not an instance of a valid model';\n                      logger.error(msg, {\n                        model: model\n                      });\n                      throw new Error(msg);\n                    }\n\n                    modelDefinition = getModelDefinition(modelConstructor);\n                    producedCondition = ModelPredicateCreator.createFromExisting(modelDefinition, condition);\n                    return [4\n                    /*yield*/\n                    , this.storage.runExclusive(function (s) {\n                      return __awaiter(_this, void 0, void 0, function () {\n                        return __generator(this, function (_a) {\n                          switch (_a.label) {\n                            case 0:\n                              return [4\n                              /*yield*/\n                              , s.save(model, producedCondition, undefined, patchesTuple)];\n\n                            case 1:\n                              _a.sent();\n\n                              return [2\n                              /*return*/\n                              , s.query(modelConstructor, ModelPredicateCreator.createForPk(modelDefinition, model))];\n                          }\n                        });\n                      });\n                    })];\n\n                  case 2:\n                    _a = __read.apply(void 0, [_b.sent(), 1]), savedModel = _a[0];\n                    return [2\n                    /*return*/\n                    , savedModel];\n                }\n              });\n            });\n          }, 'datastore save').catch(this.handleAddProcError('DataStore.save()'))];\n        });\n      });\n    };\n\n    this.setConflictHandler = function (config) {\n      var configDataStore = config.DataStore;\n\n      var conflictHandlerIsDefault = function () {\n        return _this.conflictHandler === defaultConflictHandler;\n      };\n\n      if (configDataStore && configDataStore.conflictHandler) {\n        return configDataStore.conflictHandler;\n      }\n\n      if (conflictHandlerIsDefault() && config.conflictHandler) {\n        return config.conflictHandler;\n      }\n\n      return _this.conflictHandler || defaultConflictHandler;\n    };\n\n    this.setErrorHandler = function (config) {\n      var configDataStore = config.DataStore;\n\n      var errorHandlerIsDefault = function () {\n        return _this.errorHandler === defaultErrorHandler;\n      };\n\n      if (configDataStore && configDataStore.errorHandler) {\n        return configDataStore.errorHandler;\n      }\n\n      if (errorHandlerIsDefault() && config.errorHandler) {\n        return config.errorHandler;\n      }\n\n      return _this.errorHandler || defaultErrorHandler;\n    };\n\n    this.delete = function (modelOrConstructor, identifierOrCriteria) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _this = this;\n\n        return __generator(this, function (_a) {\n          return [2\n          /*return*/\n          , this.runningProcesses.add(function () {\n            return __awaiter(_this, void 0, void 0, function () {\n              var condition, msg, modelConstructor, msg, modelDefinition, keyFields, msg, msg, _a, deleted, model, modelConstructor, msg, modelDefinition, pkPredicate, msg, _b, _c, deleted;\n\n              return __generator(this, function (_d) {\n                switch (_d.label) {\n                  case 0:\n                    return [4\n                    /*yield*/\n                    , this.start()];\n\n                  case 1:\n                    _d.sent();\n\n                    if (!modelOrConstructor) {\n                      msg = 'Model or Model Constructor required';\n                      logger.error(msg, {\n                        modelOrConstructor: modelOrConstructor\n                      });\n                      throw new Error(msg);\n                    }\n\n                    if (!isValidModelConstructor(modelOrConstructor)) return [3\n                    /*break*/\n                    , 3];\n                    modelConstructor = modelOrConstructor;\n\n                    if (!identifierOrCriteria) {\n                      msg = 'Id to delete or criteria required. Do you want to delete all? Pass Predicates.ALL';\n                      logger.error(msg, {\n                        identifierOrCriteria: identifierOrCriteria\n                      });\n                      throw new Error(msg);\n                    }\n\n                    modelDefinition = getModelDefinition(modelConstructor);\n\n                    if (typeof identifierOrCriteria === 'string') {\n                      keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n\n                      if (keyFields.length > 1) {\n                        msg = errorMessages.deleteByPkWithCompositeKeyPresent;\n                        logger.error(msg, {\n                          keyFields: keyFields\n                        });\n                        throw new Error(msg);\n                      }\n\n                      condition = ModelPredicateCreator.createForSingleField(getModelDefinition(modelConstructor), keyFields[0], identifierOrCriteria);\n                    } else {\n                      if (isIdentifierObject(identifierOrCriteria, modelDefinition)) {\n                        condition = ModelPredicateCreator.createForPk(modelDefinition, identifierOrCriteria);\n                      } else {\n                        condition = ModelPredicateCreator.createFromExisting(modelDefinition,\n                        /**\n                         * idOrCriteria is always a ProducerModelPredicate<T>, never a symbol.\n                         * The symbol is used only for typing purposes. e.g. see Predicates.ALL\n                         */\n                        identifierOrCriteria);\n                      }\n\n                      if (!condition || !ModelPredicateCreator.isValidPredicate(condition)) {\n                        msg = 'Criteria required. Do you want to delete all? Pass Predicates.ALL';\n                        logger.error(msg, {\n                          condition: condition\n                        });\n                        throw new Error(msg);\n                      }\n                    }\n\n                    return [4\n                    /*yield*/\n                    , this.storage.delete(modelConstructor, condition)];\n\n                  case 2:\n                    _a = __read.apply(void 0, [_d.sent(), 1]), deleted = _a[0];\n                    return [2\n                    /*return*/\n                    , deleted];\n\n                  case 3:\n                    model = modelOrConstructor;\n                    modelConstructor = Object.getPrototypeOf(model || {}).constructor;\n\n                    if (!isValidModelConstructor(modelConstructor)) {\n                      msg = 'Object is not an instance of a valid model';\n                      logger.error(msg, {\n                        model: model\n                      });\n                      throw new Error(msg);\n                    }\n\n                    modelDefinition = getModelDefinition(modelConstructor);\n                    pkPredicate = ModelPredicateCreator.createForPk(modelDefinition, model);\n\n                    if (identifierOrCriteria) {\n                      if (typeof identifierOrCriteria !== 'function') {\n                        msg = 'Invalid criteria';\n                        logger.error(msg, {\n                          identifierOrCriteria: identifierOrCriteria\n                        });\n                        throw new Error(msg);\n                      }\n\n                      condition = identifierOrCriteria(pkPredicate);\n                    } else {\n                      condition = pkPredicate;\n                    }\n\n                    return [4\n                    /*yield*/\n                    , this.storage.delete(model, condition)];\n\n                  case 4:\n                    _b = __read.apply(void 0, [_d.sent(), 1]), _c = __read(_b[0], 1), deleted = _c[0];\n                    return [2\n                    /*return*/\n                    , deleted];\n                }\n              });\n            });\n          }, 'datastore delete').catch(this.handleAddProcError('DataStore.delete()'))];\n        });\n      });\n    };\n\n    this.observe = function (modelOrConstructor, identifierOrCriteria) {\n      var predicate;\n      var modelConstructor = modelOrConstructor && isValidModelConstructor(modelOrConstructor) ? modelOrConstructor : undefined;\n\n      if (modelOrConstructor && modelConstructor === undefined) {\n        var model = modelOrConstructor;\n        var modelConstructor_1 = model && Object.getPrototypeOf(model).constructor;\n\n        if (isValidModelConstructor(modelConstructor_1)) {\n          if (identifierOrCriteria) {\n            logger.warn('idOrCriteria is ignored when using a model instance', {\n              model: model,\n              identifierOrCriteria: identifierOrCriteria\n            });\n          }\n\n          return _this.observe(modelConstructor_1, model.id);\n        } else {\n          var msg = 'The model is not an instance of a PersistentModelConstructor';\n          logger.error(msg, {\n            model: model\n          });\n          throw new Error(msg);\n        }\n      } // observe should not accept object literal syntax\n\n\n      if (identifierOrCriteria && modelConstructor && isIdentifierObject(identifierOrCriteria, getModelDefinition(modelConstructor))) {\n        var msg = errorMessages.observeWithObjectLiteral;\n        logger.error(msg, {\n          objectLiteral: identifierOrCriteria\n        });\n        throw new Error(msg);\n      }\n\n      if (identifierOrCriteria !== undefined && modelConstructor === undefined) {\n        var msg = 'Cannot provide criteria without a modelConstructor';\n        logger.error(msg, identifierOrCriteria);\n        throw new Error(msg);\n      }\n\n      if (modelConstructor && !isValidModelConstructor(modelConstructor)) {\n        var msg = 'Constructor is not for a valid model';\n        logger.error(msg, {\n          modelConstructor: modelConstructor\n        });\n        throw new Error(msg);\n      }\n\n      if (typeof identifierOrCriteria === 'string') {\n        var modelDefinition = getModelDefinition(modelConstructor);\n\n        var _a = __read(extractPrimaryKeyFieldNames(modelDefinition), 1),\n            keyField = _a[0];\n\n        predicate = ModelPredicateCreator.createForSingleField(getModelDefinition(modelConstructor), keyField, identifierOrCriteria);\n      } else {\n        if (isPredicatesAll(identifierOrCriteria)) {\n          predicate = undefined;\n        } else {\n          predicate = modelConstructor && ModelPredicateCreator.createFromExisting(getModelDefinition(modelConstructor), identifierOrCriteria);\n        }\n      }\n\n      return new Observable(function (observer) {\n        var handle;\n\n        _this.runningProcesses.add(function () {\n          return __awaiter(_this, void 0, void 0, function () {\n            var _this = this;\n\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  return [4\n                  /*yield*/\n                  , this.start()];\n\n                case 1:\n                  _a.sent(); // Filter the events returned by Storage according to namespace,\n                  // append original element data, and subscribe to the observable\n\n\n                  handle = this.storage.observe(modelConstructor, predicate).filter(function (_a) {\n                    var model = _a.model;\n                    return namespaceResolver(model) === USER;\n                  }).subscribe({\n                    next: function (item) {\n                      return _this.runningProcesses.isOpen && _this.runningProcesses.add(function () {\n                        return __awaiter(_this, void 0, void 0, function () {\n                          var message, modelDefinition, keyFields, primaryKeysAndValues, freshElement;\n                          return __generator(this, function (_a) {\n                            switch (_a.label) {\n                              case 0:\n                                message = item;\n                                if (!(item.opType !== 'DELETE')) return [3\n                                /*break*/\n                                , 2];\n                                modelDefinition = getModelDefinition(item.model);\n                                keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n                                primaryKeysAndValues = extractPrimaryKeysAndValues(item.element, keyFields);\n                                return [4\n                                /*yield*/\n                                , this.query(item.model, primaryKeysAndValues)];\n\n                              case 1:\n                                freshElement = _a.sent();\n                                message = __assign(__assign({}, message), {\n                                  element: freshElement\n                                });\n                                _a.label = 2;\n\n                              case 2:\n                                observer.next(message);\n                                return [2\n                                /*return*/\n                                ];\n                            }\n                          });\n                        });\n                      }, 'datastore observe message handler');\n                    },\n                    error: function (err) {\n                      return observer.error(err);\n                    },\n                    complete: function () {\n                      return observer.complete();\n                    }\n                  });\n                  return [2\n                  /*return*/\n                  ];\n              }\n            });\n          });\n        }, 'datastore observe observable initialization').catch(_this.handleAddProcError('DataStore.observe()')).catch(function (error) {\n          observer.error(error);\n        }); // better than no cleaner, but if the subscriber is handling the\n        // complete() message async and not registering with the context,\n        // this will still be problematic.\n\n\n        return _this.runningProcesses.addCleaner(function () {\n          return __awaiter(_this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n              if (handle) {\n                handle.unsubscribe();\n              }\n\n              return [2\n              /*return*/\n              ];\n            });\n          });\n        }, 'DataStore.observe() cleanup');\n      });\n    };\n\n    this.observeQuery = function (model, criteria, options) {\n      return new Observable(function (observer) {\n        var items = new Map();\n        var itemsChanged = new Map();\n        var deletedItemIds = [];\n        var handle;\n        var predicate;\n        /**\n         * As the name suggests, this geneates a snapshot in the form of\n         * \t`{items: T[], isSynced: boolean}`\n         * and sends it to the observer.\n         *\n         * SIDE EFFECT: The underlying generation and emission methods may touch:\n         * `items`, `itemsChanged`, and `deletedItemIds`.\n         *\n         * Refer to `generateSnapshot` and `emitSnapshot` for more details.\n         */\n\n        var generateAndEmitSnapshot = function () {\n          var snapshot = generateSnapshot();\n          emitSnapshot(snapshot);\n        }; // a mechanism to return data after X amount of seconds OR after the\n        // \"limit\" (itemsChanged >= this.syncPageSize) has been reached, whichever comes first\n\n\n        var limitTimerRace = new DeferredCallbackResolver({\n          callback: generateAndEmitSnapshot,\n          errorHandler: observer.error,\n          maxInterval: 2000\n        });\n        var sort = (options || {}).sort;\n        var sortOptions = sort ? {\n          sort: sort\n        } : undefined;\n        var modelDefinition = getModelDefinition(model);\n        var keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n\n        if (isQueryOne(criteria)) {\n          predicate = ModelPredicateCreator.createForSingleField(modelDefinition, keyFields[0], criteria);\n        } else {\n          if (isPredicatesAll(criteria)) {\n            // Predicates.ALL means \"all records\", so no predicate (undefined)\n            predicate = undefined;\n          } else {\n            predicate = ModelPredicateCreator.createFromExisting(modelDefinition, criteria);\n          }\n        }\n\n        var _a = ModelPredicateCreator.getPredicates(predicate, false) || {},\n            predicates = _a.predicates,\n            predicateGroupType = _a.type;\n\n        var hasPredicate = !!predicates;\n\n        _this.runningProcesses.add(function () {\n          return __awaiter(_this, void 0, void 0, function () {\n            var err_1;\n\n            var _this = this;\n\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  _a.trys.push([0, 2,, 3]);\n\n                  return [4\n                  /*yield*/\n                  , this.query(model, criteria, sortOptions)];\n\n                case 1:\n                  // first, query and return any locally-available records\n                  _a.sent().forEach(function (item) {\n                    var itemModelDefinition = getModelDefinition(model);\n                    var idOrPk = getIdentifierValue(itemModelDefinition, item);\n                    items.set(idOrPk, item);\n                  }); // Observe the model and send a stream of updates (debounced).\n                  // We need to post-filter results instead of passing criteria through\n                  // to have visibility into items that move from in-set to out-of-set.\n                  // We need to explicitly remove those items from the existing snapshot.\n\n\n                  handle = this.observe(model).subscribe(function (_a) {\n                    var element = _a.element,\n                        model = _a.model,\n                        opType = _a.opType;\n\n                    var _b, _c;\n\n                    var itemModelDefinition = getModelDefinition(model);\n                    var idOrPk = getIdentifierValue(itemModelDefinition, element);\n\n                    if (hasPredicate && !validatePredicate(element, predicateGroupType, predicates)) {\n                      if (opType === 'UPDATE' && (items.has(idOrPk) || itemsChanged.has(idOrPk))) {\n                        // tracking as a \"deleted item\" will include the item in\n                        // page limit calculations and ensure it is removed from the\n                        // final items collection, regardless of which collection(s)\n                        // it is currently in. (I mean, it could be in both, right!?)\n                        deletedItemIds.push(idOrPk);\n                      } else {\n                        // ignore updates for irrelevant/filtered items.\n                        return;\n                      }\n                    } // Flag items which have been recently deleted\n                    // NOTE: Merging of separate operations to the same model instance is handled upstream\n                    // in the `mergePage` method within src/sync/merger.ts. The final state of a model instance\n                    // depends on the LATEST record (for a given id).\n\n\n                    if (opType === 'DELETE') {\n                      deletedItemIds.push(idOrPk);\n                    } else {\n                      itemsChanged.set(idOrPk, element);\n                    }\n\n                    var isSynced = (_c = (_b = _this.sync) === null || _b === void 0 ? void 0 : _b.getModelSyncedStatus(model)) !== null && _c !== void 0 ? _c : false;\n                    var limit = itemsChanged.size - deletedItemIds.length >= _this.syncPageSize;\n\n                    if (limit || isSynced) {\n                      limitTimerRace.resolve();\n                    } // kicks off every subsequent race as results sync down\n\n\n                    limitTimerRace.start();\n                  }); // returns a set of initial/locally-available results\n\n                  generateAndEmitSnapshot();\n                  return [3\n                  /*break*/\n                  , 3];\n\n                case 2:\n                  err_1 = _a.sent();\n                  observer.error(err_1);\n                  return [3\n                  /*break*/\n                  , 3];\n\n                case 3:\n                  return [2\n                  /*return*/\n                  ];\n              }\n            });\n          });\n        }, 'datastore observequery startup').catch(_this.handleAddProcError('DataStore.observeQuery()')).catch(function (error) {\n          observer.error(error);\n        });\n        /**\n         * Combines the `items`, `itemsChanged`, and `deletedItemIds` collections into\n         * a snapshot in the form of `{ items: T[], isSynced: boolean}`.\n         *\n         * SIDE EFFECT: The shared `items` collection is recreated.\n         */\n\n\n        var generateSnapshot = function () {\n          var _a, _b;\n\n          var isSynced = (_b = (_a = _this.sync) === null || _a === void 0 ? void 0 : _a.getModelSyncedStatus(model)) !== null && _b !== void 0 ? _b : false;\n\n          var itemsArray = __spread(Array.from(items.values()), Array.from(itemsChanged.values()));\n\n          if (options === null || options === void 0 ? void 0 : options.sort) {\n            sortItems(itemsArray);\n          }\n\n          items.clear();\n          itemsArray.forEach(function (item) {\n            var itemModelDefinition = getModelDefinition(model);\n            var idOrPk = getIdentifierValue(itemModelDefinition, item);\n            items.set(idOrPk, item);\n          }); // remove deleted items from the final result set\n\n          deletedItemIds.forEach(function (idOrPk) {\n            return items.delete(idOrPk);\n          });\n          return {\n            items: Array.from(items.values()),\n            isSynced: isSynced\n          };\n        };\n        /**\n         * Emits the list of items to the observer.\n         *\n         * SIDE EFFECT: `itemsChanged` and `deletedItemIds` are cleared to prepare\n         * for the next snapshot.\n         *\n         * @param snapshot The generated items data to emit.\n         */\n\n\n        var emitSnapshot = function (snapshot) {\n          // send the generated snapshot to the primary subscription.\n          // NOTE: This observer's handler *could* be async ...\n          observer.next(snapshot); // reset the changed items sets\n\n          itemsChanged.clear();\n          deletedItemIds = [];\n        };\n        /**\n         * Sorts an `Array` of `T` according to the sort instructions given in the\n         * original  `observeQuery()` call.\n         *\n         * @param itemsToSort A array of model type.\n         */\n\n\n        var sortItems = function (itemsToSort) {\n          var modelDefinition = getModelDefinition(model);\n\n          var pagination = _this.processPagination(modelDefinition, options);\n\n          var sortPredicates = ModelSortPredicateCreator.getPredicates(pagination.sort);\n\n          if (sortPredicates.length) {\n            var compareFn = sortCompareFunction(sortPredicates);\n            itemsToSort.sort(compareFn);\n          }\n        };\n        /**\n         * Force one last snapshot when the model is fully synced.\n         *\n         * This reduces latency for that last snapshot, which will otherwise\n         * wait for the configured timeout.\n         *\n         * @param payload The payload from the Hub event.\n         */\n\n\n        var hubCallback = function (_a) {\n          var payload = _a.payload;\n\n          var _b;\n\n          var event = payload.event,\n              data = payload.data;\n\n          if (event === ControlMessage.SYNC_ENGINE_MODEL_SYNCED && ((_b = data === null || data === void 0 ? void 0 : data.model) === null || _b === void 0 ? void 0 : _b.name) === model.name) {\n            generateAndEmitSnapshot();\n            Hub.remove('datastore', hubCallback);\n          }\n        };\n\n        Hub.listen('datastore', hubCallback);\n        return _this.runningProcesses.addCleaner(function () {\n          return __awaiter(_this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n              if (handle) {\n                handle.unsubscribe();\n              }\n\n              return [2\n              /*return*/\n              ];\n            });\n          });\n        }, 'datastore observequery cleaner');\n      });\n    };\n\n    this.configure = function (config) {\n      if (config === void 0) {\n        config = {};\n      }\n\n      _this.amplifyContext.Auth = _this.Auth;\n      _this.amplifyContext.API = _this.API;\n      _this.amplifyContext.Cache = _this.Cache;\n\n      var configDataStore = config.DataStore,\n          configAuthModeStrategyType = config.authModeStrategyType,\n          configConflictHandler = config.conflictHandler,\n          configErrorHandler = config.errorHandler,\n          configMaxRecordsToSync = config.maxRecordsToSync,\n          configSyncPageSize = config.syncPageSize,\n          configFullSyncInterval = config.fullSyncInterval,\n          configSyncExpressions = config.syncExpressions,\n          configAuthProviders = config.authProviders,\n          configStorageAdapter = config.storageAdapter,\n          configFromAmplify = __rest(config, [\"DataStore\", \"authModeStrategyType\", \"conflictHandler\", \"errorHandler\", \"maxRecordsToSync\", \"syncPageSize\", \"fullSyncInterval\", \"syncExpressions\", \"authProviders\", \"storageAdapter\"]);\n\n      _this.amplifyConfig = __assign(__assign({}, configFromAmplify), _this.amplifyConfig);\n      _this.conflictHandler = _this.setConflictHandler(config);\n      _this.errorHandler = _this.setErrorHandler(config);\n      var authModeStrategyType = configDataStore && configDataStore.authModeStrategyType || configAuthModeStrategyType || AuthModeStrategyType.DEFAULT;\n\n      switch (authModeStrategyType) {\n        case AuthModeStrategyType.MULTI_AUTH:\n          _this.authModeStrategy = multiAuthStrategy(_this.amplifyContext);\n          break;\n\n        case AuthModeStrategyType.DEFAULT:\n          _this.authModeStrategy = defaultAuthStrategy;\n          break;\n\n        default:\n          _this.authModeStrategy = defaultAuthStrategy;\n          break;\n      } // store on config object, so that Sync, Subscription, and Mutation processors can have access\n\n\n      _this.amplifyConfig.authProviders = configDataStore && configDataStore.authProviders || configAuthProviders;\n      _this.syncExpressions = configDataStore && configDataStore.syncExpressions || configSyncExpressions || _this.syncExpressions;\n      _this.maxRecordsToSync = configDataStore && configDataStore.maxRecordsToSync || configMaxRecordsToSync || _this.maxRecordsToSync || 10000; // store on config object, so that Sync, Subscription, and Mutation processors can have access\n\n      _this.amplifyConfig.maxRecordsToSync = _this.maxRecordsToSync;\n      _this.syncPageSize = configDataStore && configDataStore.syncPageSize || configSyncPageSize || _this.syncPageSize || 1000; // store on config object, so that Sync, Subscription, and Mutation processors can have access\n\n      _this.amplifyConfig.syncPageSize = _this.syncPageSize;\n      _this.fullSyncInterval = configDataStore && configDataStore.fullSyncInterval || configFullSyncInterval || _this.fullSyncInterval || 24 * 60; // 1 day\n\n      _this.storageAdapter = configDataStore && configDataStore.storageAdapter || configStorageAdapter || _this.storageAdapter || undefined;\n      _this.sessionId = _this.retrieveSessionId();\n    };\n  }\n\n  DataStore.prototype.getModuleName = function () {\n    return 'DataStore';\n  };\n  /**\n   * Builds a function to capture `BackgroundManagerNotOpenError`'s to produce friendlier,\n   * more instructive errors for customers.\n   *\n   * @param operation The name of the operation (usually a Datastore method) the customer\n   * tried to call.\n   */\n\n\n  DataStore.prototype.handleAddProcError = function (operation) {\n    var _this = this;\n    /**\n     * If the tested error is a `BackgroundManagerNotOpenError`, it will be captured\n     * and replaced with a friendlier message that instructs the App Developer.\n     *\n     * @param err An error to test.\n     */\n\n\n    var handler = function (err) {\n      if (err.message.startsWith('BackgroundManagerNotOpenError')) {\n        throw new Error([\"DataStoreStateError: Tried to execute `\" + operation + \"` while DataStore was \\\"\" + _this.state + \"\\\".\", \"This can only be done while DataStore is \\\"Started\\\" or \\\"Stopped\\\". To remedy:\", 'Ensure all calls to `stop()` and `clear()` have completed first.', 'If this is not possible, retry the operation until it succeeds.'].join('\\n'));\n      } else {\n        throw err;\n      }\n    };\n\n    return handler;\n  };\n  /**\n   * Clears all data from storage and removes all data, schema info, other\n   * initialization details, and then stops DataStore.\n   *\n   * That said, reinitialization is required after clearing. This can be done\n   * by explicitiliy calling `start()` or any method that implicitly starts\n   * DataStore, such as `query()`, `save()`, or `delete()`.\n   */\n\n\n  DataStore.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            checkSchemaInitialized();\n            this.state = DataStoreState.Clearing;\n            return [4\n            /*yield*/\n            , this.runningProcesses.close()];\n\n          case 1:\n            _a.sent();\n\n            if (!(this.storage === undefined)) return [3\n            /*break*/\n            , 3]; // connect to storage so that it can be cleared without fully starting DataStore\n\n            this.storage = new Storage(schema, namespaceResolver, getModelConstructorByModelName, modelInstanceCreator, this.storageAdapter, this.sessionId);\n            return [4\n            /*yield*/\n            , this.storage.init()];\n\n          case 2:\n            _a.sent();\n\n            _a.label = 3;\n\n          case 3:\n            if (syncSubscription && !syncSubscription.closed) {\n              syncSubscription.unsubscribe();\n            }\n\n            if (!this.sync) return [3\n            /*break*/\n            , 5];\n            return [4\n            /*yield*/\n            , this.sync.stop()];\n\n          case 4:\n            _a.sent();\n\n            _a.label = 5;\n\n          case 5:\n            return [4\n            /*yield*/\n            , this.storage.clear()];\n\n          case 6:\n            _a.sent();\n\n            this.initialized = undefined; // Should re-initialize when start() is called.\n\n            this.storage = undefined;\n            this.sync = undefined;\n            this.syncPredicates = new WeakMap();\n            return [4\n            /*yield*/\n            , this.runningProcesses.open()];\n\n          case 7:\n            _a.sent();\n\n            this.state = DataStoreState.NotRunning;\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Stops all DataStore sync activities.\n   *\n   * TODO: \"Waits for graceful termination of\n   * running queries and terminates subscriptions.\"\n   */\n\n\n  DataStore.prototype.stop = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.state = DataStoreState.Stopping;\n            return [4\n            /*yield*/\n            , this.runningProcesses.close()];\n\n          case 1:\n            _a.sent();\n\n            if (syncSubscription && !syncSubscription.closed) {\n              syncSubscription.unsubscribe();\n            }\n\n            if (!this.sync) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , this.sync.stop()];\n\n          case 2:\n            _a.sent();\n\n            _a.label = 3;\n\n          case 3:\n            this.initialized = undefined; // Should re-initialize when start() is called.\n\n            this.sync = undefined;\n            return [4\n            /*yield*/\n            , this.runningProcesses.open()];\n\n          case 4:\n            _a.sent();\n\n            this.state = DataStoreState.NotRunning;\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Validates given pagination input from a query and creates a pagination\n   * argument for use against the storage layer.\n   *\n   * @param modelDefinition\n   * @param paginationProducer\n   */\n\n\n  DataStore.prototype.processPagination = function (modelDefinition, paginationProducer) {\n    var sortPredicate;\n\n    var _a = paginationProducer || {},\n        limit = _a.limit,\n        page = _a.page,\n        sort = _a.sort;\n\n    if (limit === undefined && page === undefined && sort === undefined) {\n      return undefined;\n    }\n\n    if (page !== undefined && limit === undefined) {\n      throw new Error('Limit is required when requesting a page');\n    }\n\n    if (page !== undefined) {\n      if (typeof page !== 'number') {\n        throw new Error('Page should be a number');\n      }\n\n      if (page < 0) {\n        throw new Error(\"Page can't be negative\");\n      }\n    }\n\n    if (limit !== undefined) {\n      if (typeof limit !== 'number') {\n        throw new Error('Limit should be a number');\n      }\n\n      if (limit < 0) {\n        throw new Error(\"Limit can't be negative\");\n      }\n    }\n\n    if (sort) {\n      sortPredicate = ModelSortPredicateCreator.createFromExisting(modelDefinition, paginationProducer.sort);\n    }\n\n    return {\n      limit: limit,\n      page: page,\n      sort: sortPredicate\n    };\n  };\n  /**\n   * Examines the configured `syncExpressions` and produces a WeakMap of\n   * SchemaModel -> predicate to use during sync.\n   */\n\n\n  DataStore.prototype.processSyncExpressions = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var syncPredicates;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.syncExpressions || !this.syncExpressions.length) {\n              return [2\n              /*return*/\n              , new WeakMap()];\n            }\n\n            return [4\n            /*yield*/\n            , Promise.all(this.syncExpressions.map(function (syncExpression) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var _a, modelConstructor, conditionProducer, modelDefinition, condition, predicate;\n\n                return __generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      return [4\n                      /*yield*/\n                      , syncExpression];\n\n                    case 1:\n                      _a = _b.sent(), modelConstructor = _a.modelConstructor, conditionProducer = _a.conditionProducer;\n                      modelDefinition = getModelDefinition(modelConstructor);\n                      return [4\n                      /*yield*/\n                      , this.unwrapPromise(conditionProducer)];\n\n                    case 2:\n                      condition = _b.sent();\n\n                      if (isPredicatesAll(condition)) {\n                        return [2\n                        /*return*/\n                        , [modelDefinition, null]];\n                      }\n\n                      predicate = this.createFromCondition(modelDefinition, condition);\n                      return [2\n                      /*return*/\n                      , [modelDefinition, predicate]];\n                  }\n                });\n              });\n            }))];\n\n          case 1:\n            syncPredicates = _a.sent();\n            return [2\n            /*return*/\n            , this.weakMapFromEntries(syncPredicates)];\n        }\n      });\n    });\n  };\n\n  DataStore.prototype.createFromCondition = function (modelDefinition, condition) {\n    try {\n      return ModelPredicateCreator.createFromExisting(modelDefinition, condition);\n    } catch (error) {\n      logger.error('Error creating Sync Predicate');\n      throw error;\n    }\n  };\n\n  DataStore.prototype.unwrapPromise = function (conditionProducer) {\n    return __awaiter(this, void 0, void 0, function () {\n      var condition, error_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , conditionProducer()];\n\n          case 1:\n            condition = _a.sent();\n            return [2\n            /*return*/\n            , condition];\n\n          case 2:\n            error_1 = _a.sent();\n\n            if (error_1 instanceof TypeError) {\n              return [2\n              /*return*/\n              , conditionProducer];\n            }\n\n            throw error_1;\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  DataStore.prototype.weakMapFromEntries = function (entries) {\n    return entries.reduce(function (map, _a) {\n      var _b = __read(_a, 2),\n          modelDefinition = _b[0],\n          predicate = _b[1];\n\n      if (map.has(modelDefinition)) {\n        var name_2 = modelDefinition.name;\n        logger.warn(\"You can only utilize one Sync Expression per model.\\n          Subsequent sync expressions for the \" + name_2 + \" model will be ignored.\");\n        return map;\n      }\n\n      if (predicate) {\n        map.set(modelDefinition, predicate);\n      }\n\n      return map;\n    }, new WeakMap());\n  };\n  /**\n   * A session ID to allow CMS to open databases against multiple apps.\n   * This session ID is only expected be set by AWS Amplify Studio.\n   */\n\n\n  DataStore.prototype.retrieveSessionId = function () {\n    try {\n      var sessionId = sessionStorage.getItem('datastoreSessionId');\n\n      if (sessionId) {\n        var aws_appsync_graphqlEndpoint = this.amplifyConfig.aws_appsync_graphqlEndpoint;\n        var appSyncUrl = aws_appsync_graphqlEndpoint.split('/')[2];\n\n        var _a = __read(appSyncUrl.split('.'), 1),\n            appSyncId = _a[0];\n\n        return sessionId + \"-\" + appSyncId;\n      }\n    } catch (_b) {}\n\n    return undefined;\n  };\n\n  return DataStore;\n}();\n\nvar instance = new DataStore();\nAmplify.register(instance);\nexport { DataStore as DataStoreClass, initSchema, instance as DataStore };","map":{"version":3,"sources":["../../src/datastore/datastore.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,GAAP,MAAgB,kBAAhB;AACA,SAAS,IAAT,QAAqB,mBAArB;AACA,OAAO,KAAP,MAAkB,oBAAlB;AACA,SACC,OADD,EAEC,aAAa,IAAI,MAFlB,EAGC,GAHD,EAIC,EAJD,EAKC,wBALD,QAMO,mBANP;AAOA,SAEC,SAFD,EAGC,OAHD,EAIC,aAJD,EAKC,aALD,QAOO,OAPP;AAQA,SAAS,EAAE,IAAI,KAAf,QAA4B,MAA5B;AACA,OAAO,UAAP,MAA0C,mBAA1C;AACA,SAAS,mBAAT,EAA8B,iBAA9B,QAAuD,uBAAvD;AACA,SACC,eADD,EAEC,qBAFD,EAGC,yBAHD,QAKO,eALP;AAOA,SAAS,gBAAgB,IAAI,OAA7B,QAA4C,oBAA5C;AACA,SAAS,cAAT,EAAyB,UAAzB,QAA2C,SAA3C;AACA,SAIC,iBAJD,EAMC,mBAND,EAOC,2BAPD,EAgCC,oBAhCD,EAiCC,mBAjCD,EAkCC,gBAlCD,EAuCC,kBAvCD,QAyCO,UAzCP;AA6CA,SACC,SADD,EAEC,aAFD,EAGC,wBAHD,EAIC,eAJD,EAKC,kBALD,EAMC,oBAND,EAQC,OARD,EASC,IATD,EAUC,IAVD,EAWC,iBAXD,EAYC,qBAZD,EAaC,mBAbD,EAcC,wBAdD,EAeC,2BAfD,EAgBC,2BAhBD,EAiBC,WAjBD,EAkBC,qBAlBD,EAmBC,iBAnBD,EAoBC,YApBD,QAqBO,SArBP;AAsBA,SAAS,kBAAT,QAAmC,eAAnC;AAGA,aAAa,CAAC,IAAD,CAAb;AACA,aAAa;AAEb,IAAM,MAAM,GAAG,IAAI,MAAJ,CAAW,WAAX,CAAf;AAEA,IAAM,IAAI,GAAG,oBAAoB,CAAC,IAAI,CAAC,GAAL,EAAD,CAAjC;AACQ,IAAA,MAAA,GAAA,EAAA,CAAA,aAAA,GAAA,MAAA;AAkBR,IAAM,sBAAsB,GAAG,eAA/B;AAEA,IAAI,MAAJ;AACA,IAAM,iBAAiB,GAAG,IAAI,OAAJ,EAA1B,C,CAIA;AACA;AACA;;AACA,IAAM,eAAe,GAAG,IAAI,OAAJ,EAAxB;;AAKA,IAAM,kBAAkB,GAAG,UAC1B,gBAD0B,EACuB;AAEjD,MAAM,SAAS,GAAG,iBAAiB,CAAC,GAAlB,CAAsB,gBAAtB,CAAlB;AAEA,SAAO,MAAM,CAAC,UAAP,CAAkB,SAAlB,EAA6B,MAA7B,CAAoC,gBAAgB,CAAC,IAArD,CAAP;AACA,CAND;;AAQA,IAAM,uBAAuB,GAAG,UAC/B,GAD+B,EACvB;AAER,SAAO,kBAAkB,CAAC,GAAD,CAAlB,IAA2B,iBAAiB,CAAC,GAAlB,CAAsB,GAAtB,CAAlC;AACA,CAJD;;AAMA,IAAM,iBAAiB,GAAsB,UAAA,gBAAA,EAAgB;AAC5D,SAAA,iBAAiB,CAAC,GAAlB,CAAsB,gBAAtB,CAAA;AAAuC,CADxC,C,CAGA;;;AACA,OAAO,IAAI,WAAJ;AACP,IAAI,WAAJ;AACA,IAAI,gBAAJ;AACA,IAAI,cAAJ;;AAEA,IAAM,UAAU,GAAG,UAAC,UAAD,EAAmB;;;AACrC,MAAI,MAAM,KAAK,SAAf,EAA0B;AACzB,IAAA,OAAO,CAAC,IAAR,CAAa,yCAAb;AAEA,WAAO,WAAP;AACA;;AAED,EAAA,MAAM,CAAC,GAAP,CAAW,mBAAX,EAAgC;AAAE,IAAA,MAAM,EAAE;AAAV,GAAhC;;AAEA,MAAM,qBAAqB,GAAA,QAAA,CAAA;AAC1B,IAAA,IAAI,EAAE;AADoB,GAAA,EAEvB,UAFuB,CAA3B;;AAKA,EAAA,MAAM,CAAC,GAAP,CAAW,WAAX,EAAwB,aAAxB;AACA,EAAA,WAAW,GAAG,iBAAiB,CAAC,qBAAD,CAA/B;AACA,EAAA,MAAM,CAAC,GAAP,CAAW,WAAX,EAAwB,oBAAxB;AAEA,MAAM,kBAAkB,GAAG,YAAY,EAAvC;AACA,MAAM,gBAAgB,GAAG,OAAO,CAAC,YAAR,EAAzB;AACA,MAAM,aAAa,GAAG,UAAU,CAAC,YAAX,EAAtB;AAEA,EAAA,gBAAgB,GAAG,iBAAiB,CAAC,kBAAD,CAApC;AACA,EAAA,cAAc,GAAG,iBAAiB,CAAC,gBAAD,CAAlC;AACA,EAAA,WAAW,GAAG,iBAAiB,CAAC,aAAD,CAA/B;AAEA,EAAA,MAAM,GAAG;AACR,IAAA,UAAU,GAAA,EAAA,GAAA,EAAA,EACT,EAAA,CAAC,kBAAkB,CAAC,IAApB,CAAA,GAA2B,kBADlB,EAET,EAAA,CAAC,qBAAqB,CAAC,IAAvB,CAAA,GAA8B,qBAFrB,EAGT,EAAA,CAAC,gBAAgB,CAAC,IAAlB,CAAA,GAAyB,gBAHhB,EAIT,EAAA,CAAC,aAAa,CAAC,IAAf,CAAA,GAAsB,aAJb,EAKT,EALS,CADF;AAOR,IAAA,OAAO,EAAE,UAAU,CAAC;AAPZ,GAAT;AAUA,EAAA,MAAM,CAAC,IAAP,CAAY,MAAM,CAAC,UAAnB,EAA+B,OAA/B,CAAuC,UAAA,SAAA,EAAS;;;AACzC,QAAA,EAAA,GAAA,MAAA,CAAA,wBAAA,CAAA,MAAA,CAAA,UAAA,CAAA,SAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AAAA,QAAC,SAAA,GAAA,EAAA,CAAA,CAAA,CAAD;AAAA,QAAY,IAAA,GAAA,EAAA,CAAA,CAAA,CAAZ;;AAIN,IAAA,MAAM,CAAC,UAAP,CAAkB,SAAlB,EAA6B,aAA7B,GAA6C,SAA7C;AACA,IAAA,MAAM,CAAC,UAAP,CAAkB,SAAlB,EAA6B,IAA7B,GAAoC,IAApC;AAEA,QAAM,iBAAiB,GAAG,IAAI,GAAJ,EAA1B;AAEA,IAAA,MAAM,CAAC,MAAP,CAAc,MAAM,CAAC,UAAP,CAAkB,SAAlB,EAA6B,MAA3C,EAAmD,OAAnD,CAA2D,UAAA,KAAA,EAAK;AAC/D,UAAM,eAAe,GAAa,EAAlC;AAEA,MAAA,MAAM,CAAC,MAAP,CAAc,KAAK,CAAC,MAApB,EACE,MADF,CAEE,UAAA,KAAA,EAAK;AACJ,eAAA,KAAK,CAAC,WAAN,IACA,KAAK,CAAC,WAAN,CAAkB,cAAlB,KAAqC,YADrC,IAEiB,KAAK,CAAC,IAAN,CAAY,KAAZ,KAAsB,KAAK,CAAC,IAF7C;AAEiD,OALpD,EAOE,OAPF,CAOU,UAAA,KAAA,EAAK;AACb,eAAA,eAAe,CAAC,IAAhB,CAAsC,KAAK,CAAC,IAAN,CAAY,KAAlD,CAAA;AAAwD,OAR1D;AAWA,MAAA,iBAAiB,CAAC,GAAlB,CAAsB,KAAK,CAAC,IAA5B,EAAkC,eAAlC;AACA,KAfD;AAiBA,QAAM,MAAM,GAAG,IAAI,GAAJ,EAAf;AAEA,QAAI,KAAK,GAAG,IAAZ;;AACA,WAAO,QAAQ,KAAK,GAAG,CAAvB,EAA0B;AACzB,UAAI,iBAAiB,CAAC,IAAlB,KAA2B,CAA/B,EAAkC;AACjC;AACA;;AACD,MAAA,KAAK;;AACL,UAAI,KAAK,KAAK,CAAd,EAAiB;AAChB,cAAM,IAAI,KAAJ,CACL,mEADK,CAAN;AAGA;;;AAED,aAAwB,IAAA,EAAA,IAAA,GAAA,GAAA,KAAA,CAAA,EAAA,QAAA,CAAA,KAAK,CAAC,IAAN,CAAW,iBAAiB,CAAC,IAAlB,EAAX,CAAA,CAAA,CAAA,EAAoC,EAAA,GAAA,EAAA,CAAA,IAAA,EAA5D,EAA4D,CAAA,EAAA,CAAA,IAA5D,EAA4D,EAAA,GAAA,EAAA,CAAA,IAAA,EAA5D,EAA8D;AAAzD,cAAM,SAAS,GAAA,EAAA,CAAA,KAAf;AACJ,cAAM,OAAO,GAAG,iBAAiB,CAAC,GAAlB,CAAsB,SAAtB,CAAhB;;AAEA,cAAI,OAAO,CAAC,KAAR,CAAc,UAAA,CAAA,EAAC;AAAI,mBAAA,MAAM,CAAC,GAAP,CAAA,CAAA,CAAA;AAAa,WAAhC,CAAJ,EAAuC;AACtC,YAAA,MAAM,CAAC,GAAP,CAAW,SAAX,EAAsB,OAAtB;AACA;AACD;;;;;;;;;;;;;AAED,MAAA,KAAK,CAAC,IAAN,CAAW,MAAM,CAAC,IAAP,EAAX,EAA0B,OAA1B,CAAkC,UAAA,CAAA,EAAC;AAAI,eAAA,iBAAiB,CAAC,MAAlB,CAAA,CAAA,CAAA;AAA2B,OAAlE;AACA;;AAED,IAAA,MAAM,CAAC,UAAP,CAAkB,SAAlB,EAA6B,wBAA7B,GAAwD,MAAxD;AACA,GArDD;AAuDA,SAAO,WAAP;AACA,CA5FD;AA8FA;;;;;;;;AAQG;;;AACH,IAAM,sBAAsB,GAAG,YAAA;AAC9B,MAAI,MAAM,KAAK,SAAf,EAA0B;AACzB,QAAM,OAAO,GACZ,2PADD;AAEA,IAAA,MAAM,CAAC,KAAP,CAAa,OAAb;AACA,UAAM,IAAI,KAAJ,CAAU,OAAV,CAAN;AACA;AACD,CAPD;;AASA,IAAM,iBAAiB,GAEG,UAAA,SAAA,EAAS;AAClC,MAAM,OAAO,GAAuB,EAApC;AAEA,EAAA,MAAM,CAAC,OAAP,CAAe,SAAS,CAAC,MAAzB,EAAiC,OAAjC,CAAyC,UAAC,EAAD,EAA6B;QAA5B,EAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,C;QAAC,SAAA,GAAA,EAAA,CAAA,CAAA,C;QAAW,eAAA,GAAA,EAAA,CAAA,CAAA,C;;AACrD,QAAM,KAAK,GAAG,gBAAgB,CAAC,eAAD,CAA9B;AACA,IAAA,OAAO,CAAC,SAAD,CAAP,GAAqB,KAArB;AAEA,IAAA,iBAAiB,CAAC,GAAlB,CAAsB,KAAtB,EAA6B,SAAS,CAAC,IAAvC;AACA,GALD;AAOA,EAAA,MAAM,CAAC,OAAP,CAAe,SAAS,CAAC,SAAV,IAAuB,EAAtC,EAA0C,OAA1C,CACC,UAAC,EAAD,EAA2B;QAA1B,EAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,C;QAAC,QAAA,GAAA,EAAA,CAAA,CAAA,C;QAAU,cAAA,GAAA,EAAA,CAAA,CAAA,C;;AACX,QAAM,KAAK,GAAG,mBAAmB,CAAC,cAAD,CAAjC;AACA,IAAA,OAAO,CAAC,QAAD,CAAP,GAAoB,KAApB;AACA,GAJF;AAOA,SAAO,OAAP;AACA,CApBD;AAiCA;;;;AAIG;;;AACH,IAAM,iBAAiB,GAAG,IAAI,OAAJ,EAA1B;;AAEA,SAAS,oBAAT,CACC,gBADD,EAEC,IAFD,EAEiB;AAEhB,EAAA,iBAAiB,CAAC,GAAlB,CAAsB,IAAtB;AAEA,SAAO,IAAI,gBAAJ,CAA+D,IAA/D,CAAP;AACA;;AAED,IAAM,mBAAmB,GACxB,UAAC,eAAD,EAA8C;AAAK,SAAA,UAAC,CAAD,EAAY,CAAZ,EAAkB;AACpE,QAAM,eAAe,GAAG,eAAe,CAAC,MAAhB,CAAuB,CAAvB,CAAxB;;AAEA,QAAI,eAAe,KAAK,SAAxB,EAAmC;AAC1B,UAAA,MAAA,GAAA,eAAA,CAAA,IAAA;AAAA,UAAM,YAAA,GAAA,eAAA,CAAA,UAAN;AAAA,UAAkB,eAAA,GAAA,eAAA,CAAA,eAAlB;AAAA,UAAmC,MAAA,GAAA,eAAA,CAAA,IAAnC;AAAA,UAAyC,OAAA,GAAA,eAAA,CAAA,OAAzC;;AAGR,UACC,CAAE,CAAC,OAAD,IAAY,YAAb,IAA6B,OAAO,IAAI,CAAC,eAA1C,MACC,CAAC,KAAK,IAAN,IAAc,CAAC,KAAK,SADrB,CADD,EAGE;AACD,cAAM,IAAI,KAAJ,CAAU,WAAS,MAAT,GAAa,cAAvB,CAAN;AACA;;AAED,UACC,2BAA2B,CAAC,eAAD,CAA3B,IACA,CAAC,WAAW,CAAC,eAAD,CAFb,EAGE;AACD,YAAM,IAAI,GAAG,2BAA2B,CAAC,eAAD,CAAxC;;AACA,YAAI,IAAI,CAAC,QAAL,CAAc,CAAd,KAAoB,CAAC,KAAK,EAA9B,EAAkC;AACjC,UAAA,MAAM,CAAC,KAAP,CAAa,aAAa,CAAC,aAA3B,EAA0C;AAAE,YAAA,CAAC,EAAA,CAAH;AAAK,YAAA,KAAK,EAAE;AAAZ,WAA1C;AACA,gBAAM,IAAI,KAAJ,CAAU,aAAa,CAAC,aAAxB,CAAN;AACA;AACD;;AAED,UAAI,mBAAmB,CAAC,MAAD,CAAvB,EAA+B;AAC9B,YAAM,QAAM,GAAG,iBAAiB,CAAC,SAAlB,CAA4B,MAA5B,CAAf;AACA,YAAM,gBAAc,GAAG,iBAAiB,CAAC,qBAAlB,CAAwC,MAAxC,CAAvB;;AAEA,YAAI,MAAI,KAAK,SAAb,EAAwB;AACvB,cAAI,OAAO,CAAP,KAAa,QAAjB,EAAyB;AACxB;AACA;;AACD,cAAI,OAAO,CAAP,KAAa,QAAjB,EAA2B;AAC1B,gBAAI;AACH,cAAA,IAAI,CAAC,KAAL,CAAW,CAAX;AACA;AACA,aAHD,CAGE,OAAO,KAAP,EAAc;AACf,oBAAM,IAAI,KAAJ,CAAU,WAAS,MAAT,GAAa,8BAAb,GAA4C,CAAtD,CAAN;AACA;AACD;AACD;;AAED,YAAI,OAAJ,EAAa;AACZ,cAAI,aAAa,GAAW,QAA5B;;AACA,cAAI,CAAC,YAAL,EAAiB;AAChB,YAAA,aAAa,GAAM,QAAM,GAAA,qBAAzB;AACA;;AAED,cAAI,CAAC,KAAK,CAAC,OAAN,CAAc,CAAd,CAAD,IAAqB,CAAC,eAA1B,EAA2C;AAC1C,kBAAM,IAAI,KAAJ,CACL,WAAS,MAAT,GAAa,sBAAb,GAAoC,aAApC,GAAiD,KAAjD,GAAuD,OAAO,CAA9D,GAA+D,aAA/D,GAA6E,CADxE,CAAN;AAGA;;AAED,cACC,CAAC,iBAAiB,CAAC,CAAD,CAAlB,IACK,CAAE,CAAC,IAAH,CAAQ,UAAA,CAAA,EAAC;AACb,mBAAA,iBAAiB,CAAC,CAAD,CAAjB,GAAuB,YAAvB,GAAoC,OAAO,CAAP,KAAa,QAAjD;AAAuD,WADnD,CAFN,EAKE;AACD,gBAAM,SAAS,GAAQ,CAAE,CACvB,GADqB,CACjB,UAAA,CAAA,EAAC;AAAI,qBAAC,CAAC,KAAK,IAAN,GAAa,MAAb,GAAsB,OAAvB,CAAA;AAAgC,aADpB,EAErB,IAFqB,CAEhB,GAFgB,CAAvB;AAIA,kBAAM,IAAI,KAAJ,CACL,yBAAuB,MAAvB,GAA2B,2BAA3B,GAAuD,aAAvD,GAAoE,KAApE,GAA0E,SAA1E,GAAmF,cAAnF,GAAkG,CAD7F,CAAN;AAGA;;AAED,cAAI,gBAAc,IAAI,CAAC,iBAAiB,CAAC,CAAD,CAAxC,EAA6C;AAC5C,gBAAM,gBAAgB,GAAQ,CAAE,CAAC,GAAH,CAAO,UAAA,CAAA,EAAC;AACrC,kBAAI,CAAC,iBAAiB,CAAC,CAAD,CAAtB,EAA2B;AAC1B,uBAAO,gBAAc,CAAC,CAAD,CAArB;AACA,eAFD,MAEO,IAAI,iBAAiB,CAAC,CAAD,CAAjB,IAAwB,CAAC,YAA7B,EAAyC;AAC/C,uBAAO,IAAP;AACA,eAFM,MAEA;AACN,uBAAO,KAAP;AACA;AACD,aAR6B,CAA9B;;AAUA,gBAAI,CAAC,gBAAgB,CAAC,KAAjB,CAAuB,UAAA,CAAA,EAAC;AAAI,qBAAA,CAAA;AAAC,aAA7B,CAAL,EAAqC;AACpC,oBAAM,IAAI,KAAJ,CACL,yBAAuB,MAAvB,GAA2B,2BAA3B,GAAuD,MAAvD,GAA2D,gDAA3D,GAA4G,CADvG,CAAN;AAGA;AACD;AACD,SA5CD,MA4CO,IAAI,CAAC,YAAD,IAAe,CAAC,KAAK,SAAzB,EAAoC;AAC1C;AACA,SAFM,MAEA,IAAI,OAAO,CAAP,KAAa,QAAb,IAAuB,CAAC,KAAK,IAAjC,EAAuC;AAC7C,gBAAM,IAAI,KAAJ,CACL,WAAS,MAAT,GAAa,qBAAb,GAAmC,QAAnC,GAAyC,IAAzC,GAA8C,OAAO,CAArD,GAAsD,aAAtD,GAAoE,CAD/D,CAAN;AAGA,SAJM,MAIA,IACN,CAAC,iBAAiB,CAAC,CAAD,CAAlB,IACA,gBADA,IAEA,CAAC,gBAAc,CAAC,CAAD,CAHT,EAIL;AACD,gBAAM,IAAI,KAAJ,CACL,WAAS,MAAT,GAAa,qBAAb,GAAmC,MAAnC,GAAuC,uBAAvC,GAA+D,CAD1D,CAAN;AAGA;AACD,OA7ED,MA6EO,IAAI,mBAAmB,CAAC,MAAD,CAAvB,EAA+B;AACrC;AACA,YAAI,CAAC,iBAAiB,CAAC,CAAD,CAAtB,EAA2B;AAC1B,cAAM,uBAAqB,GAC1B,MAAM,CAAC,UAAP,CAAkB,IAAlB,CAAuB,SAAvB,CAAiC,MAAI,CAAC,QAAtC,CADD;AAEA,cAAM,gBAAc,GAAG,mBAAmB,CAAC,uBAAD,CAA1C;;AAEA,cAAI,OAAJ,EAAa;AACZ,gBAAI,aAAa,GAAW,MAAI,CAAC,QAAjC;;AACA,gBAAI,CAAC,YAAL,EAAiB;AAChB,cAAA,aAAa,GAAM,MAAI,CAAC,QAAL,GAAa,qBAAhC;AACA;;AACD,gBAAI,CAAC,KAAK,CAAC,OAAN,CAAc,CAAd,CAAL,EAAuB;AACtB,oBAAM,IAAI,KAAJ,CACL,WAAS,MAAT,GAAa,sBAAb,GAAoC,aAApC,GAAiD,KAAjD,GAAuD,OAAO,CAA9D,GAA+D,aAA/D,GAA6E,CADxE,CAAN;AAGA;;AAED,YAAA,CAAC,CAAC,OAAF,CAAU,UAAA,IAAA,EAAI;AACb,kBACE,iBAAiB,CAAC,IAAD,CAAjB,IAA2B,YAA5B,IACC,OAAO,IAAP,KAAgB,QAAhB,IAA4B,OAAO,IAAP,KAAgB,WAF9C,EAGE;AACD,sBAAM,IAAI,KAAJ,CACL,yBAAuB,MAAvB,GAA2B,2BAA3B,GACC,MAAI,CAAC,QADN,GACc,KADd,GAEM,OAAO,IAFb,GAEiB,cAFjB,GAEgC,IAH3B,CAAN;AAKA;;AAED,kBAAI,CAAC,iBAAiB,CAAC,IAAD,CAAtB,EAA8B;AAC7B,gBAAA,MAAM,CAAC,IAAP,CAAY,uBAAqB,CAAC,MAAlC,EAA0C,OAA1C,CAAkD,UAAA,MAAA,EAAM;AACvD,kBAAA,gBAAc,CAAC,MAAD,EAAS,IAAI,CAAC,MAAD,CAAb,CAAd;AACA,iBAFD;AAGA;AACD,aAjBD;AAkBA,WA7BD,MA6BO;AACN,gBAAI,OAAO,CAAP,KAAa,QAAjB,EAA2B;AAC1B,oBAAM,IAAI,KAAJ,CACL,WAAS,MAAT,GAAa,qBAAb,GACC,MAAI,CAAC,QADN,GACc,IADd,GAEK,OAAO,CAFZ,GAEa,aAFb,GAE2B,CAHtB,CAAN;AAKA;;AAED,YAAA,MAAM,CAAC,IAAP,CAAY,uBAAqB,CAAC,MAAlC,EAA0C,OAA1C,CAAkD,UAAA,MAAA,EAAM;AACvD,cAAA,gBAAc,CAAC,MAAD,EAAS,CAAC,CAAC,MAAD,CAAV,CAAd;AACA,aAFD;AAGA;AACD;AACD;AACD;AAzJiD,GAAA;AA0JlD,CA3JF;;AA6JA,IAAM,gBAAgB,GAAG,UACxB,eADwB,EAExB,CAFwB,EAGxB,CAHwB,EAGlB;AAEA,MAAA,EAAA,GAAA,eAAA,CAAA,MAAA,CAAA,CAAA,KAAA,EAAA;AAAA,MAAE,OAAA,GAAA,EAAA,CAAA,OAAF;AAAA,MAAW,IAAA,GAAA,EAAA,CAAA,IAAX,CAFA,CAGN;;;AACA,MACC,OAAO,CAAP,KAAa,QAAb,KACC,OAAO,IACP,IAAI,KAAK,SADT,IAEA,mBAAmB,CAAC,IAAD,CAFnB,IAGA,gBAAgB,CAAC,IAAD,CAJjB,CADD,EAME;AACD,QAAI;AACH,aAAO,IAAI,CAAC,KAAL,CAAW,CAAX,CAAP;AACA,KAFD,CAEE,OAAA,EAAA,EAAM,CACP;AACA;AACD,GAhBK,CAkBN;;;AACA,MAAI,OAAO,CAAP,KAAa,QAAb,IAAyB,IAAI,KAAK,SAAtC,EAAiD;AAChD,WAAO,OAAO,CAAC,CAAD,CAAd;AACA;;AAED,SAAO,CAAP;AACA,CA3BD;;AA6BA,IAAM,kBAAkB,GAAG,UAC1B,IAD0B,EAE1B,eAF0B,EAG1B,KAH0B,EAGa;AAEvC,MAAM,cAAc,GAAG,mBAAmB,CAAC,eAAD,CAA1C;AACA,EAAA,MAAM,CAAC,OAAP,CAAe,IAAf,EAAqB,OAArB,CAA6B,UAAC,EAAD,EAAO;QAAN,EAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,C;QAAC,CAAA,GAAA,EAAA,CAAA,CAAA,C;QAAG,CAAA,GAAA,EAAA,CAAA,CAAA,C;;AACjC,QAAM,WAAW,GAAG,gBAAgB,CAAC,eAAD,EAAkB,CAAlB,EAAqB,CAArB,CAApC;AAEA,IAAA,cAAc,CAAC,CAAD,EAAI,WAAJ,CAAd;AACM,IAAA,KAAM,CAAC,CAAD,CAAN,GAAY,WAAZ;AACN,GALD;AAMA,CAZD;;AAcA,IAAM,gBAAgB,GAAG,UACxB,eADwB,EACI;AAE5B,MAAM,KAAK;AAAmC;AAAA,cAAA;AAC7C,aAAA,KAAA,CAAY,IAAZ,EAA8B;AAC7B,UAAM,QAAQ,GAAG,OAAO,CACvB,IADuB,EAEvB,UAAC,KAAD,EAAwC;AACvC,QAAA,kBAAkB,CAAC,IAAD,EAAO,eAAP,EAAwB,KAAxB,CAAlB,CADuC,CAGvC;;AACA,YAAM,uBAAuB,GAAG,iBAAiB,CAAC,GAAlB,CAAsB,IAAtB,CAAhC;AAEA,YAAM,qBAAqB,GAC1B,uBAAuB,GACa,IADb,GAEG,EAH3B;AAOQ,YAAA,GAAA,GAAA,qBAAA,CAAA,EAAA;;AAGR,YAAI,WAAW,CAAC,eAAD,CAAf,EAAkC;AACjC,cAAM,eAAe,GAAG,GAAG,KAAK,IAAR,IAAgB,GAAG,KAAK,SAAhD;AAEA,cAAM,EAAE,GAAG,eAAe,GACvB,GADuB,GAEvB,eAAe,CAAC,QAAhB,GACA,KAAK,EADL,GAEA,IAAI,EAJP;AAMkC,UAAA,KAAO,CAAC,EAAR,GAAa,EAAb;AAClC,SAVD,MAUO,IAAI,qBAAqB,CAAC,eAAD,CAAzB,EAA4C;AAClD;AACkC,UAAA,KAAO,CAAC,EAAR,GAAa,KAAK,CAAC,EAAN,IAAY,KAAK,EAA9B;AAClC;;AAED,YAAI,CAAC,uBAAL,EAA8B;AAC7B,UAAA,6BAA6B,CAAC,KAAD,EAAQ,eAAR,CAA7B;AACA;;AAEO,YAAA,QAAA,GAAA,qBAAA,CAAA,QAAA;AAAA,YAAU,cAAA,GAAA,qBAAA,CAAA,cAAV;AAAA,YAA0B,QAAA,GAAA,qBAAA,CAAA,QAA1B;;AAER,YAAI,eAAe,CAAC,QAApB,EAA8B;AAC7B,UAAA,KAAK,CAAC,QAAN,GAAiB,QAAjB;AACA,UAAA,KAAK,CAAC,cAAN,GAAuB,cAAvB;AACA,UAAA,KAAK,CAAC,QAAN,GAAiB,QAAjB;AACA;AACD,OA5CsB,CAAxB;AA+CA,aAAO,QAAP;AACA;;AAEM,IAAA,KAAA,CAAA,MAAA,GAAP,UAAc,MAAd,EAAyB,EAAzB,EAA0D;AACzD,UAAM,gBAAgB,GAAG,MAAM,CAAC,cAAP,CAAsB,MAAM,IAAI,EAAhC,EAAoC,WAA7D;;AACA,UAAI,CAAC,uBAAuB,CAAC,gBAAD,CAA5B,EAAgD;AAC/C,YAAM,GAAG,GAAG,wCAAZ;AACA,QAAA,MAAM,CAAC,KAAP,CAAa,GAAb,EAAkB;AAAE,UAAA,MAAM,EAAA;AAAR,SAAlB;AACA,cAAM,IAAI,KAAJ,CAAU,GAAV,CAAN;AACA;;AAED,UAAI,OAAJ;AACA,UAAM,KAAK,GAAG,OAAO,CACpB,MADoB,EAEpB,UAAA,KAAA,EAAK;AACJ,QAAA,EAAE,CAAkB,KAAlB,CAAF;AAEA,YAAM,QAAQ,GAAG,2BAA2B,CAAC,eAAD,CAA5C,CAHI,CAIJ;;AACA,QAAA,QAAQ,CAAC,OAAT,CAAiB,UAAA,GAAA,EAAG;AAAI,iBAAE,KAAgB,CAAC,GAAD,CAAhB,GAAwB,MAAM,CAAhC,GAAgC,CAAhC;AAAsC,SAA9D;AAEA,YAAM,cAAc,GAAG,mBAAmB,CAAC,eAAD,CAA1C;AACA,QAAA,MAAM,CAAC,OAAP,CAAe,KAAf,EAAsB,OAAtB,CAA8B,UAAC,EAAD,EAAO;cAAN,EAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,C;cAAC,CAAA,GAAA,EAAA,CAAA,CAAA,C;cAAG,CAAA,GAAA,EAAA,CAAA,CAAA,C;;AAClC,cAAM,WAAW,GAAG,gBAAgB,CAAC,eAAD,EAAkB,CAAlB,EAAqB,CAArB,CAApC;AAEA,UAAA,cAAc,CAAC,CAAD,EAAI,WAAJ,CAAd;AACA,SAJD;AAKA,OAfmB,EAgBpB,UAAA,CAAA,EAAC;AAAI,eAAC,OAAO,GAAR,CAAA;AAAa,OAhBE,CAArB;AAmBA,UAAM,kBAAkB,GAAG,eAAe,CAAC,GAAhB,CAAoB,MAApB,CAA3B;;AAEA,UAAI,OAAO,CAAC,MAAR,IAAkB,kBAAtB,EAA0C;AACzC,YAAI,kBAAJ,EAAwB;AACjB,cAAA,EAAA,GAAA,MAAA,CAAA,eAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA;AAAA,cAAC,eAAA,GAAA,EAAA,CAAA,CAAA,CAAD;AAAA,cAAkB,cAAA,GAAA,EAAA,CAAA,CAAA,CAAlB;;AACN,cAAM,aAAa,GAAG,YAAY,CACjC,cADiC,EAEjC,eAFiC,EAGjC,OAHiC,CAAlC;AAKA,UAAA,eAAe,CAAC,GAAhB,CAAoB,KAApB,EAA2B,CAAC,aAAD,EAAgB,cAAhB,CAA3B;AACA,UAAA,6BAA6B,CAAC,aAAD,EAAgB,eAAhB,CAA7B;AACA,SATD,MASO;AACN,UAAA,eAAe,CAAC,GAAhB,CAAoB,KAApB,EAA2B,CAAC,OAAD,EAAU,MAAV,CAA3B;AACA,UAAA,6BAA6B,CAAC,OAAD,EAAU,eAAV,CAA7B;AACA;AACD;;AAED,aAAO,KAAP;AACA,KA/CM,CApDsC,CAqG7C;AACA;;;AACO,IAAA,KAAA,CAAA,QAAA,GAAP,UAAgB,IAAhB,EAA6B;AAA7B,UAAA,KAAA,GAAA,IAAA;;AACC,UAAI,KAAK,CAAC,OAAN,CAAc,IAAd,CAAJ,EAAyB;AACxB,eAAO,IAAI,CAAC,GAAL,CAAS,UAAA,IAAA,EAAI;AAAI,iBAAA,KAAI,CAAC,QAAL,CAAA,IAAA,CAAA;AAAmB,SAApC,CAAP;AACA;;AAED,UAAM,QAAQ,GAAG,oBAAoB,CAAC,KAAD,EAAQ,IAAR,CAArC;AAEA,UAAM,cAAc,GAAG,mBAAmB,CAAC,eAAD,CAA1C;AAEA,MAAA,MAAM,CAAC,OAAP,CAAe,QAAf,EAAyB,OAAzB,CAAiC,UAAC,EAAD,EAAO;YAAN,EAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,C;YAAC,CAAA,GAAA,EAAA,CAAA,CAAA,C;YAAG,CAAA,GAAA,EAAA,CAAA,CAAA,C;;AACrC,QAAA,cAAc,CAAC,CAAD,EAAI,CAAJ,CAAd;AACA,OAFD;AAIA,aAAO,QAAP;AACA,KAdM;;AAeR,WAAA,KAAA;AAAC,GAtH6C,EAA9C;;AAwHA,EAAA,KAAK,CAAC,SAAD,CAAL,GAAmB,IAAnB;AAEA,EAAA,MAAM,CAAC,cAAP,CAAsB,KAAtB,EAA6B,MAA7B,EAAqC;AAAE,IAAA,KAAK,EAAE,eAAe,CAAC;AAAzB,GAArC;AAEA,SAAO,KAAP;AACA,CAhID;;AAkIA,IAAM,6BAA6B,GAAG,UACrC,KADqC,EAErC,eAFqC,EAET;AAE5B,MAAM,SAAS,GAAG,MAAM,CAAC,IAAP,CAAY,KAAZ,CAAlB;AACQ,MAAA,MAAA,GAAA,eAAA,CAAA,MAAA;AAER,EAAA,SAAS,CAAC,OAAV,CAAkB,UAAA,GAAA,EAAG;AACpB,QAAI,MAAM,CAAC,GAAD,CAAN,IAAe,MAAM,CAAC,GAAD,CAAN,CAAY,UAA/B,EAA2C;AAC1C,YAAM,IAAI,KAAJ,CAAa,GAAG,GAAA,gBAAhB,CAAN;AACA;AACD,GAJD;AAKA,CAZD;;AAcA,IAAM,6BAA6B,GAAG,UACrC,OADqC,EAErC,eAFqC,EAET;AAE5B,MAAM,UAAU,GAAG,OAAO,CAAC,GAAR,CAAY,UAAA,CAAA,EAAC;AAAI,WAAA,CAAC,CAAC,CAAC,IAAF,CAAO,CAAP,CAAD,EAAY,CAAC,CAAb,KAAA,CAAA;AAAoB,GAArC,CAAnB;AACQ,MAAA,MAAA,GAAA,eAAA,CAAA,MAAA;AAER,EAAA,UAAU,CAAC,OAAX,CAAmB,UAAC,EAAD,EAAW;QAAV,EAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,C;QAAC,GAAA,GAAA,EAAA,CAAA,CAAA,C;QAAK,GAAA,GAAA,EAAA,CAAA,CAAA,C;;AACzB,QAAI,CAAC,GAAD,IAAQ,CAAC,MAAM,CAAC,GAAD,CAAnB,EAA0B;;AAE1B,QAAI,MAAM,CAAC,GAAD,CAAN,CAAY,UAAhB,EAA4B;AAC3B,YAAM,IAAI,KAAJ,CAAa,GAAG,GAAA,gBAAhB,CAAN;AACA;AACD,GAND;AAOA,CAdD;;AAgBA,IAAM,mBAAmB,GAAG,UAC3B,cAD2B,EACG;AAE9B,MAAM,KAAK;AAAgC;AAAA,cAAA;AAC1C,aAAA,KAAA,CAAY,IAAZ,EAA8B;AAC7B,UAAM,QAAQ,GAAG,OAAO,CACvB,IADuB,EAEvB,UAAC,KAAD,EAAwC;AACvC,QAAA,kBAAkB,CAAC,IAAD,EAAO,cAAP,EAAuB,KAAvB,CAAlB;AACA,OAJsB,CAAxB;AAOA,aAAO,QAAP;AACA;;AACF,WAAA,KAAA;AAAC,GAX0C,EAA3C;;AAaA,EAAA,KAAK,CAAC,SAAD,CAAL,GAAmB,IAAnB;AAEA,EAAA,MAAM,CAAC,cAAP,CAAsB,KAAtB,EAA6B,MAA7B,EAAqC;AAAE,IAAA,KAAK,EAAE,cAAc,CAAC;AAAxB,GAArC;AAEA,EAAA,qBAAqB,CAAC,KAAD,CAArB;AAEA,SAAO,KAAP;AACA,CAvBD;;AAyBA,SAAS,UAAT,CAAoB,GAApB,EAA4B;AAC3B,SAAO,OAAO,GAAP,KAAe,QAAtB;AACA;;AAED,SAAS,sBAAT,CAAgC,YAAhC,EAA0D;AACjD,MAAA,UAAA,GAAA,YAAA,CAAA,UAAA;AAAA,MAAY,gBAAA,GAAA,YAAA,CAAA,gBAAZ;AAAA,MAA8B,WAAA,GAAA,YAAA,CAAA,WAA9B;AACA,MAAA,QAAA,GAAA,WAAA,CAAA,QAAA;AACR,SAAO,oBAAoB,CAAC,gBAAD,EAAiB,QAAA,CAAA,QAAA,CAAA,EAAA,EAAO,UAAP,CAAA,EAAiB;AAAE,IAAA,QAAQ,EAAA;AAAV,GAAjB,CAAjB,CAA3B;AACA;;AAED,SAAS,mBAAT,CAA6B,KAA7B,EAA8D;AAC7D,EAAA,MAAM,CAAC,IAAP,CAAY,KAAZ;AACA;;AAED,SAAS,8BAAT,CACC,aADD,EAEC,SAFD,EAEkB;AAEjB,MAAI,MAAJ;;AAEA,UAAQ,aAAR;AACC,SAAK,SAAL;AACC,MAAA,MAAM,GAAG,gBAAgB,CAAC,SAAD,CAAzB;AACA;;AACD,SAAK,IAAL;AACC,MAAA,MAAM,GAAG,WAAW,CAAC,SAAD,CAApB;AACA;;AACD,SAAK,IAAL;AACC,MAAA,MAAM,GAAG,WAAW,CAAC,SAAD,CAApB;AACA;;AACD,SAAK,OAAL;AACC,MAAA,MAAM,GAAG,cAAc,CAAC,SAAD,CAAvB;AACA;;AACD;AACC,MAAA,eAAe,CAAC,aAAD,CAAf;AACA;AAfF;;AAkBA,MAAI,uBAAuB,CAAC,MAAD,CAA3B,EAAqC;AACpC,WAAO,MAAP;AACA,GAFD,MAEO;AACN,QAAM,GAAG,GAAG,uDAAqD,SAArD,GAA8D,eAA9D,GAA8E,aAA1F;AACA,IAAA,MAAM,CAAC,KAAP,CAAa,GAAb;AAEA,UAAM,IAAI,KAAJ,CAAU,GAAV,CAAN;AACA;AACD;AAED;;;;;;;;;;;AAWG;;;AACH,SAAe,kBAAf,CACC,OADD,EAEC,OAFD,EAEgB;;;;;;;;;AAET,UAAA,OAAO,GACZ,gBAAgB,CAAC,OADZ;AAGA,UAAA,eAAe,GAAG,MAAM,CAAC,UAAP,CAAkB,SAAlB,EAA6B,MAA7B,CAAoC,OAAtD;AAEN,iBAAA,CAAA;AAAA;AAAA,YAAM,OAAO,CAAC,YAAR,CAAqB,UAAM,CAAN,EAAO;AAAA,mBAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;;AACF,2BAAA,CAAA;AAAA;AAAA,sBAAM,CAAC,CAAC,KAAF,CACpC,OADoC,EAEpC,qBAAqB,CAAC,kBAAtB,CAAyC,eAAzC,EAA0D,UAAA,CAAA,EAAC;AAC1D,6BAAA,CAAC,CAAC,GAAF,CAAM,IAAN,EAAY,sBAAZ,CAAA;AAAmC,qBADpC,CAFoC,EAKpC;AAAE,sBAAA,IAAI,EAAE,CAAR;AAAW,sBAAA,KAAK,EAAE;AAAlB,qBALoC,CAAN,CAAA;;;AAAzB,oBAAA,EAAA,GAAA,MAAA,CAAA,KAAA,CAAA,KAAA,CAAA,EAAA,CAAyB,EAAA,CAAA,IAAA,EAAzB,EAML,CANK,CAAA,CAAA,EAAC,oBAAoB,GAAA,EAAA,CAAA,CAAA,CAArB;wBASL,EAAA,oBAAoB,KAAK,SAAzB,IACA,oBAAoB,CAAC,KAArB,KAA+B,SAD/B,C,EAAA,OAAA,CAAA;AAAA;AAAA,sBAAA,CAAA,CAAA;AAGM,oBAAA,WAAW,GAAG,IAAI,CAAC,KAAL,CAAW,oBAAoB,CAAC,KAAhC,CAAd;wBAEF,EAAA,WAAW,KAAK,OAAhB,C,EAAA,OAAA,CAAA;AAAA;AAAA,sBAAA,CAAA,CAAA;AACH,2BAAA,CAAA;AAAA;AAAA,sBAAM,CAAC,CAAC,KAAF,CAAQ,KAAR,CAAN,CAAA;;;AAAA,oBAAA,EAAA,CAAA,IAAA;;;;;;;;;;AAGD,2BAAA,CAAA;AAAA;AAAA,sBAAM,CAAC,CAAC,IAAF,CACL,oBAAoB,CAAC,OAAD,EAAU;AAC7B,sBAAA,GAAG,EAAE,sBADwB;AAE7B,sBAAA,KAAK,EAAE,IAAI,CAAC,SAAL,CAAe,OAAf;AAFsB,qBAAV,CADf,CAAN,CAAA;;;AAAA,oBAAA,EAAA,CAAA,IAAA;;;;;;;;;;aAnBgC,CAAA;AA0BjC,WA1BK,CAAN,CAAA;;;AAAA,UAAA,EAAA,CAAA,IAAA;;;;;;;;AA2BA;;AAED,IAAI,gBAAJ;;AAEA,SAAS,YAAT,GAAqB;AACpB,MAAM,SAAS,GAAoB;AAClC,IAAA,IAAI,EAAE,SAD4B;AAElC,IAAA,aAAa,EAAE,EAFmB;AAGlC,IAAA,KAAK,EAAE,EAH2B;AAIlC,IAAA,SAAS,EAAE,EAJuB;AAKlC,IAAA,MAAM,EAAE;AACP,MAAA,OAAO,EAAE;AACR,QAAA,IAAI,EAAE,SADE;AAER,QAAA,UAAU,EAAE,UAFJ;AAGR,QAAA,QAAQ,EAAE,KAHF;AAIR,QAAA,MAAM,EAAE;AACP,UAAA,EAAE,EAAE;AACH,YAAA,IAAI,EAAE,IADH;AAEH,YAAA,IAAI,EAAE,IAFH;AAGH,YAAA,UAAU,EAAE,IAHT;AAIH,YAAA,OAAO,EAAE;AAJN,WADG;AAOP,UAAA,GAAG,EAAE;AACJ,YAAA,IAAI,EAAE,KADF;AAEJ,YAAA,IAAI,EAAE,QAFF;AAGJ,YAAA,UAAU,EAAE,IAHR;AAIJ,YAAA,OAAO,EAAE;AAJL,WAPE;AAaP,UAAA,KAAK,EAAE;AACN,YAAA,IAAI,EAAE,OADA;AAEN,YAAA,IAAI,EAAE,QAFA;AAGN,YAAA,UAAU,EAAE,IAHN;AAIN,YAAA,OAAO,EAAE;AAJH;AAbA;AAJA;AADF;AAL0B,GAAnC;AAkCA,SAAO,SAAP;AACA;;AAED,IAAK,cAAL;;AAAA,CAAA,UAAK,cAAL,EAAmB;AAClB,EAAA,cAAA,CAAA,YAAA,CAAA,GAAA,aAAA;AACA,EAAA,cAAA,CAAA,UAAA,CAAA,GAAA,UAAA;AACA,EAAA,cAAA,CAAA,SAAA,CAAA,GAAA,SAAA;AACA,EAAA,cAAA,CAAA,UAAA,CAAA,GAAA,UAAA;AACA,EAAA,cAAA,CAAA,UAAA,CAAA,GAAA,UAAA;AACA,CAND,EAAK,cAAc,KAAd,cAAc,GAAA,EAAA,CAAnB;;AAQA,IAAA,SAAA;AAAA;AAAA,YAAA;AAAA,WAAA,SAAA,GAAA;AAAA,QAAA,KAAA,GAAA,IAAA,CAAA,CACC;;;AACQ,SAAA,IAAA,GAAO,IAAP;AACA,SAAA,GAAA,GAAM,GAAN;AACA,SAAA,KAAA,GAAQ,KAAR;AAEA,SAAA,aAAA,GAAqC,EAArC;AAaA,SAAA,cAAA,GACP,IAAI,OAAJ,EADO,CAnBT,CAuBC;;AACQ,SAAA,cAAA,GAAiC;AACxC,MAAA,IAAI,EAAE,KAAK,IAD6B;AAExC,MAAA,GAAG,EAAE,KAAK,GAF8B;AAGxC,MAAA,KAAK,EAAE,KAAK;AAH4B,KAAjC;AAOR;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BG;;AACK,SAAA,gBAAA,GAAmB,IAAI,wBAAJ,EAAnB;AAER;;;;;AAKG;;AACK,SAAA,KAAA,GAAwB,cAAc,CAAC,UAAvC;AAsCR;;;;;;AAMG;;AACH,SAAA,KAAA,GAAQ,YAAA;AAAA,aAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;AACP,iBAAA,CAAA;AAAA;AAAA,YAAO,KAAK,gBAAL,CACL,GADK,CACD,YAAA;AAAA,mBAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;;;;AACJ,yBAAK,KAAL,GAAa,cAAc,CAAC,QAA5B;wBACI,EAAA,KAAK,WAAL,KAAqB,SAArB,C,EAAA,OAAA,CAAA;AAAA;AAAA,sBAAA,CAAA,CAAA;AACH,oBAAA,MAAM,CAAC,KAAP,CAAa,oBAAb;AACA,yBAAK,WAAL,GAAmB,IAAI,OAAJ,CAAY,UAAC,GAAD,EAAM,GAAN,EAAS;AACvC,sBAAA,KAAI,CAAC,WAAL,GAAmB,GAAnB;AACA,sBAAA,KAAI,CAAC,UAAL,GAAkB,GAAlB;AACA,qBAHkB,CAAnB;;;;;;AAKA,2BAAA,CAAA;AAAA;AAAA,sBAAM,KAAK,WAAX,CAAA;;;AAAA,oBAAA,EAAA,CAAA,IAAA;;AACA,2BAAA,CAAA;AAAA;AAAA,qBAAA;;;AAGD,yBAAK,OAAL,GAAe,IAAI,OAAJ,CACd,MADc,EAEd,iBAFc,EAGd,8BAHc,EAId,oBAJc,EAKd,KAAK,cALS,EAMd,KAAK,SANS,CAAf;AASA,2BAAA,CAAA;AAAA;AAAA,sBAAM,KAAK,OAAL,CAAa,IAAb,EAAN,CAAA;;;AAAA,oBAAA,EAAA,CAAA,IAAA;;AAEA,oBAAA,sBAAsB;AACtB,2BAAA,CAAA;AAAA;AAAA,sBAAM,kBAAkB,CAAC,KAAK,OAAN,EAAe,MAAM,CAAC,OAAtB,CAAxB,CAAA;;;AAAA,oBAAA,EAAA,CAAA,IAAA;;AAEQ,oBAAA,2BAA2B,GAAK,KAAK,aAAL,CAAL,2BAA3B;yBAEJ,2B,EAAA,OAAA,CAAA;AAAA;AAAA,sBAAA,CAAA,CAAA;AACH,oBAAA,MAAM,CAAC,KAAP,CACC,4BADD,EAEC,2BAFD;AAKA,oBAAA,EAAA,GAAA,IAAA;AAAsB,2BAAA,CAAA;AAAA;AAAA,sBAAM,KAAK,sBAAL,EAAN,CAAA;;;AAAtB,oBAAA,EAAA,CAAK,cAAL,GAAsB,EAAA,CAAA,IAAA,EAAtB;AAEA,yBAAK,IAAL,GAAY,IAAI,UAAJ,CACX,MADW,EAEX,iBAFW,EAGX,WAHW,EAIX,WAJW,EAKX,KAAK,OALM,EAMX,oBANW,EAOX,KAAK,eAPM,EAQX,KAAK,YARM,EASX,KAAK,cATM,EAUX,KAAK,aAVM,EAWX,KAAK,gBAXM,EAYX,KAAK,cAZM,EAaX,KAAK,mBAbM,CAAZ;AAgBM,oBAAA,8BAA8B,GACnC,KAAK,gBAAL,GAAwB,IAAxB,GAA+B,EAD1B;AAEN,oBAAA,gBAAgB,GAAG,KAAK,IAAL,CACjB,KADiB,CACX;AAAE,sBAAA,gBAAgB,EAAE;AAApB,qBADW,EAEjB,SAFiB,CAEP;AACV,sBAAA,IAAI,EAAE,UAAC,EAAD,EAAe;4BAAZ,IAAA,GAAA,EAAA,CAAA,I;4BAAM,IAAA,GAAA,EAAA,CAAA,I,CAAM,CACpB;AACA;;AACA,4BAAM,SAAS,GAAG,MAAM,GACrB,cAAc,CAAC,8BADM,GAErB,cAAc,CAAC,8BAFlB;;AAIA,4BAAI,IAAI,KAAK,SAAb,EAAwB;AACvB,0BAAA,KAAI,CAAC,WAAL;AACA;;AAED,wBAAA,GAAG,CAAC,QAAJ,CAAa,WAAb,EAA0B;AACzB,0BAAA,KAAK,EAAE,IADkB;AAEzB,0BAAA,IAAI,EAAA;AAFqB,yBAA1B;AAIA,uBAhBS;AAiBV,sBAAA,KAAK,EAAE,UAAA,GAAA,EAAG;AACT,wBAAA,MAAM,CAAC,IAAP,CAAY,YAAZ,EAA0B,GAA1B;;AACA,wBAAA,KAAI,CAAC,UAAL;AACA;AApBS,qBAFO,CAAnB;;;;;;AAyBA,oBAAA,MAAM,CAAC,IAAP,CACC,4GADD,EAEC;AACC,sBAAA,MAAM,EAAE,KAAK;AADd,qBAFD;AAOA,yBAAK,WAAL;;;;AAGD,2BAAA,CAAA;AAAA;AAAA,sBAAM,KAAK,WAAX,CAAA;;;AAAA,oBAAA,EAAA,CAAA,IAAA;;AACA,yBAAK,KAAL,GAAa,cAAc,CAAC,OAA5B;;;;;;aA3FI,CAAA;AA4FJ,WA7FK,EA6FH,iBA7FG,EA8FL,KA9FK,CA8FC,KAAK,kBAAL,CAAwB,mBAAxB,CA9FD,CAAP,CAAA;;OADO,CAAA;AAgGP,KAhGD;;AAkGA,SAAA,KAAA,GAaI,UACH,gBADG,EAEH,oBAFG,EAMH,kBANG,EAM4C;AAAA,aAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;AAE/C,iBAAA,CAAA;AAAA;AAAA,YAAO,KAAK,gBAAL,CACL,GADK,CACD,YAAA;AAAA,mBAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;AACJ,2BAAA,CAAA;AAAA;AAAA,sBAAM,KAAK,KAAL,EAAN,CAAA;;;AAAA,oBAAA,EAAA,CAAA,IAAA,G,CAEA;;;AAEA,wBAAI,CAAC,uBAAuB,CAAC,gBAAD,CAA5B,EAAgD;AACzC,sBAAA,GAAG,GAAG,sCAAN;AACN,sBAAA,MAAM,CAAC,KAAP,CAAa,GAAb,EAAkB;AAAE,wBAAA,gBAAgB,EAAA;AAAlB,uBAAlB;AAEA,4BAAM,IAAI,KAAJ,CAAU,GAAV,CAAN;AACA;;AAED,wBAAI,OAAO,oBAAP,KAAgC,QAApC,EAA8C;AAC7C,0BAAI,kBAAkB,KAAK,SAA3B,EAAsC;AACrC,wBAAA,MAAM,CAAC,IAAP,CAAY,2CAAZ;AACA;AACD;;AAEK,oBAAA,eAAe,GAAG,kBAAkB,CAAC,gBAAD,CAApC;AACA,oBAAA,SAAS,GAAG,2BAA2B,CAAC,eAAD,CAAvC;;AAIN,wBAAI,UAAU,CAAC,oBAAD,CAAd,EAAsC;AACrC,0BAAI,SAAS,CAAC,MAAV,GAAmB,CAAvB,EAA0B;AACnB,wBAAA,GAAG,GAAG,aAAa,CAAC,gCAApB;AACN,wBAAA,MAAM,CAAC,KAAP,CAAa,GAAb,EAAkB;AAAE,0BAAA,SAAS,EAAA;AAAX,yBAAlB;AAEA,8BAAM,IAAI,KAAJ,CAAU,GAAV,CAAN;AACA;;AAED,sBAAA,SAAS,GAAG,qBAAqB,CAAC,oBAAtB,CACX,eADW,EAEX,SAAS,CAAC,CAAD,CAFE,EAGX,oBAHW,CAAZ;AAKA,qBAbD,MAaO;AACN;AACA,0BAAI,kBAAkB,CAAI,oBAAJ,EAA0B,eAA1B,CAAtB,EAAkE;AACjE,wBAAA,SAAS,GAAG,qBAAqB,CAAC,WAAtB,CACX,eADW,EAER,oBAFQ,CAAZ;AAIA,uBALD,MAKO,IAAI,eAAe,CAAC,oBAAD,CAAnB,EAA2C;AACjD;AACA,wBAAA,SAAS,GAAG,SAAZ;AACA,uBAHM,MAGA;AACN,wBAAA,SAAS,GAAG,qBAAqB,CAAC,kBAAtB,CACX,eADW,EAEN,oBAFM,CAAZ;AAIA;AACD;;AAEK,oBAAA,UAAU,GAAG,KAAK,iBAAL,CAClB,eADkB,EAElB,kBAFkB,CAAb,C,CAKN;;AAEA,oBAAA,MAAM,CAAC,KAAP,CAAa,cAAb,EAA6B;AAC5B,sBAAA,gBAAgB,EAAA,gBADY;AAE5B,sBAAA,SAAS,EAAE,qBAAqB,CAAC,aAAtB,CAAoC,SAApC,EAA+C,KAA/C,CAFiB;AAG5B,sBAAA,UAAU,EAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACN,UADM,CAAA,EACI;AACb,wBAAA,IAAI,EAAE,yBAAyB,CAAC,aAA1B,CACL,UAAU,IAAI,UAAU,CAAC,IADpB,EAEL,KAFK;AADO,uBADJ;AAHkB,qBAA7B;AAYe,2BAAA,CAAA;AAAA;AAAA,sBAAM,KAAK,OAAL,CAAa,KAAb,CACpB,gBADoB,EAEpB,SAFoB,EAGpB,UAHoB,CAAN,CAAA;;;AAAT,oBAAA,MAAM,GAAG,EAAA,CAAA,IAAA,EAAT;AAMA,oBAAA,SAAS,GACd,UAAU,CAAC,oBAAD,CAAV,IACA,kBAAkB,CAAC,oBAAD,EAAuB,eAAvB,CAFb;AAIN,2BAAA,CAAA;AAAA;AAAA,sBAAO,SAAS,GAAG,MAAM,CAAC,CAAD,CAAT,GAAe,MAA/B,CAAA;;;aAnFI,CAAA;AAoFJ,WArFK,EAqFH,iBArFG,EAsFL,KAtFK,CAsFC,KAAK,kBAAL,CAAwB,mBAAxB,CAtFD,CAAP,CAAA;;OAF+C,CAAA;AAyF/C,KA5GD;;AA8GA,SAAA,IAAA,GAAO,UACN,KADM,EAEN,SAFM,EAE+B;AAAA,aAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;AAErC,iBAAA,CAAA;AAAA;AAAA,YAAO,KAAK,gBAAL,CACL,GADK,CACD,YAAA;AAAA,mBAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;;;;AACJ,2BAAA,CAAA;AAAA;AAAA,sBAAM,KAAK,KAAL,EAAN,CAAA;;;AAAA,oBAAA,EAAA,CAAA,IAAA;;AAIM,oBAAA,YAAY,GAAG,eAAe,CAAC,GAAhB,CAAoB,KAApB,CAAf;AAEA,oBAAA,gBAAgB,GACrB,KAAK,GAAkC,KAAK,CAAC,WAAxC,GAAsD,SADtD;;AAGN,wBAAI,CAAC,uBAAuB,CAAC,gBAAD,CAA5B,EAAgD;AACzC,sBAAA,GAAG,GAAG,4CAAN;AACN,sBAAA,MAAM,CAAC,KAAP,CAAa,GAAb,EAAkB;AAAE,wBAAA,KAAK,EAAA;AAAP,uBAAlB;AAEA,4BAAM,IAAI,KAAJ,CAAU,GAAV,CAAN;AACA;;AAEK,oBAAA,eAAe,GAAG,kBAAkB,CAAC,gBAAD,CAApC;AAEA,oBAAA,iBAAiB,GAAG,qBAAqB,CAAC,kBAAtB,CACzB,eADyB,EAEzB,SAFyB,CAApB;AAKe,2BAAA,CAAA;AAAA;AAAA,sBAAM,KAAK,OAAL,CAAa,YAAb,CAA0B,UAAM,CAAN,EAAO;AAAA,6BAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;AAC3D,qCAAA,CAAA;AAAA;AAAA,gCAAM,CAAC,CAAC,IAAF,CAAO,KAAP,EAAc,iBAAd,EAAiC,SAAjC,EAA4C,YAA5C,CAAN,CAAA;;;AAAA,8BAAA,EAAA,CAAA,IAAA;;AAEA,qCAAA,CAAA;AAAA;AAAA,gCAAO,CAAC,CAAC,KAAF,CACN,gBADM,EAEN,qBAAqB,CAAC,WAAtB,CAAkC,eAAlC,EAAmD,KAAnD,CAFM,CAAP,CAAA;;;uBAH2D,CAAA;AAO3D,qBAP0B,CAAN,CAAA;;;AAAf,oBAAA,EAAA,GAAA,MAAA,CAAA,KAAA,CAAA,KAAA,CAAA,EAAA,CAAe,EAAA,CAAA,IAAA,EAAf,EAOJ,CAPI,CAAA,CAAA,EAAC,UAAU,GAAA,EAAA,CAAA,CAAA,CAAX;AASN,2BAAA,CAAA;AAAA;AAAA,sBAAO,UAAP,CAAA;;;aAjCI,CAAA;AAkCJ,WAnCK,EAmCH,gBAnCG,EAoCL,KApCK,CAoCC,KAAK,kBAAL,CAAwB,kBAAxB,CApCD,CAAP,CAAA;;OAFqC,CAAA;AAuCrC,KAzCD;;AA2CA,SAAA,kBAAA,GAAqB,UAAC,MAAD,EAAwB;AACpC,UAAA,eAAA,GAAA,MAAA,CAAA,SAAA;;AAER,UAAM,wBAAwB,GAAkB,YAAA;AAC/C,eAAA,KAAI,CAAC,eAAL,KAAyB,sBAAzB;AAA+C,OADhD;;AAGA,UAAI,eAAe,IAAI,eAAe,CAAC,eAAvC,EAAwD;AACvD,eAAO,eAAe,CAAC,eAAvB;AACA;;AACD,UAAI,wBAAwB,MAAM,MAAM,CAAC,eAAzC,EAA0D;AACzD,eAAO,MAAM,CAAC,eAAd;AACA;;AAED,aAAO,KAAI,CAAC,eAAL,IAAwB,sBAA/B;AACA,KAdD;;AAgBA,SAAA,eAAA,GAAkB,UAAC,MAAD,EAAwB;AACjC,UAAA,eAAA,GAAA,MAAA,CAAA,SAAA;;AAER,UAAM,qBAAqB,GAAkB,YAAA;AAC5C,eAAA,KAAI,CAAC,YAAL,KAAsB,mBAAtB;AAAyC,OAD1C;;AAGA,UAAI,eAAe,IAAI,eAAe,CAAC,YAAvC,EAAqD;AACpD,eAAO,eAAe,CAAC,YAAvB;AACA;;AACD,UAAI,qBAAqB,MAAM,MAAM,CAAC,YAAtC,EAAoD;AACnD,eAAO,MAAM,CAAC,YAAd;AACA;;AAED,aAAO,KAAI,CAAC,YAAL,IAAqB,mBAA5B;AACA,KAdD;;AAgBA,SAAA,MAAA,GAgBI,UACH,kBADG,EAEH,oBAFG,EAKmB;AAAA,aAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;AAEtB,iBAAA,CAAA;AAAA;AAAA,YAAO,KAAK,gBAAL,CACL,GADK,CACD,YAAA;AAAA,mBAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;;AACJ,2BAAA,CAAA;AAAA;AAAA,sBAAM,KAAK,KAAL,EAAN,CAAA;;;AAAA,oBAAA,EAAA,CAAA,IAAA;;AAIA,wBAAI,CAAC,kBAAL,EAAyB;AAClB,sBAAA,GAAG,GAAG,qCAAN;AACN,sBAAA,MAAM,CAAC,KAAP,CAAa,GAAb,EAAkB;AAAE,wBAAA,kBAAkB,EAAA;AAApB,uBAAlB;AAEA,4BAAM,IAAI,KAAJ,CAAU,GAAV,CAAN;AACA;;yBAEG,uBAAuB,CAAI,kBAAJ,C,EAAvB,OAAA,CAAA;AAAA;AAAA,sBAAA,CAAA,CAAA;AACG,oBAAA,gBAAgB,GAAG,kBAAnB;;AAEN,wBAAI,CAAC,oBAAL,EAA2B;AACpB,sBAAA,GAAG,GACR,mFADK;AAEN,sBAAA,MAAM,CAAC,KAAP,CAAa,GAAb,EAAkB;AAAE,wBAAA,oBAAoB,EAAA;AAAtB,uBAAlB;AAEA,4BAAM,IAAI,KAAJ,CAAU,GAAV,CAAN;AACA;;AAEK,oBAAA,eAAe,GAAG,kBAAkB,CAAC,gBAAD,CAApC;;AAEN,wBAAI,OAAO,oBAAP,KAAgC,QAApC,EAA8C;AACvC,sBAAA,SAAS,GAAG,2BAA2B,CAAC,eAAD,CAAvC;;AAEN,0BAAI,SAAS,CAAC,MAAV,GAAmB,CAAvB,EAA0B;AACnB,wBAAA,GAAG,GAAG,aAAa,CAAC,iCAApB;AACN,wBAAA,MAAM,CAAC,KAAP,CAAa,GAAb,EAAkB;AAAE,0BAAA,SAAS,EAAA;AAAX,yBAAlB;AAEA,8BAAM,IAAI,KAAJ,CAAU,GAAV,CAAN;AACA;;AAED,sBAAA,SAAS,GAAG,qBAAqB,CAAC,oBAAtB,CACX,kBAAkB,CAAC,gBAAD,CADP,EAEX,SAAS,CAAC,CAAD,CAFE,EAGX,oBAHW,CAAZ;AAKA,qBAfD,MAeO;AACN,0BAAI,kBAAkB,CAAC,oBAAD,EAAuB,eAAvB,CAAtB,EAA+D;AAC9D,wBAAA,SAAS,GAAG,qBAAqB,CAAC,WAAtB,CACX,eADW,EAER,oBAFQ,CAAZ;AAIA,uBALD,MAKO;AACN,wBAAA,SAAS,GAAG,qBAAqB,CAAC,kBAAtB,CACX,eADW;AAEX;;;AAGG;AACH,wBAAA,oBANW,CAAZ;AAQA;;AAED,0BACC,CAAC,SAAD,IACA,CAAC,qBAAqB,CAAC,gBAAtB,CAAuC,SAAvC,CAFF,EAGE;AACK,wBAAA,GAAG,GACR,mEADK;AAEN,wBAAA,MAAM,CAAC,KAAP,CAAa,GAAb,EAAkB;AAAE,0BAAA,SAAS,EAAA;AAAX,yBAAlB;AAEA,8BAAM,IAAI,KAAJ,CAAU,GAAV,CAAN;AACA;AACD;;AAEiB,2BAAA,CAAA;AAAA;AAAA,sBAAM,KAAK,OAAL,CAAa,MAAb,CACvB,gBADuB,EAEvB,SAFuB,CAAN,CAAA;;;AAAZ,oBAAA,EAAA,GAAA,MAAA,CAAA,KAAA,CAAA,KAAA,CAAA,EAAA,CAAY,EAAA,CAAA,IAAA,EAAZ,EAGL,CAHK,CAAA,CAAA,EAAC,OAAO,GAAA,EAAA,CAAA,CAAA,CAAR;AAKN,2BAAA,CAAA;AAAA;AAAA,sBAAO,OAAP,CAAA;;;AAEM,oBAAA,KAAK,GAAG,kBAAR;AACA,oBAAA,gBAAgB,GAAG,MAAM,CAAC,cAAP,CAAsB,KAAK,IAAI,EAA/B,EACvB,WADI;;AAGN,wBAAI,CAAC,uBAAuB,CAAC,gBAAD,CAA5B,EAAgD;AACzC,sBAAA,GAAG,GAAG,4CAAN;AACN,sBAAA,MAAM,CAAC,KAAP,CAAa,GAAb,EAAkB;AAAE,wBAAA,KAAK,EAAA;AAAP,uBAAlB;AAEA,4BAAM,IAAI,KAAJ,CAAU,GAAV,CAAN;AACA;;AAEK,oBAAA,eAAe,GAAG,kBAAkB,CAAC,gBAAD,CAApC;AAEA,oBAAA,WAAW,GAAG,qBAAqB,CAAC,WAAtB,CACnB,eADmB,EAEnB,KAFmB,CAAd;;AAKN,wBAAI,oBAAJ,EAA0B;AACzB,0BAAI,OAAO,oBAAP,KAAgC,UAApC,EAAgD;AACzC,wBAAA,GAAG,GAAG,kBAAN;AACN,wBAAA,MAAM,CAAC,KAAP,CAAa,GAAb,EAAkB;AAAE,0BAAA,oBAAoB,EAAA;AAAtB,yBAAlB;AAEA,8BAAM,IAAI,KAAJ,CAAU,GAAV,CAAN;AACA;;AAED,sBAAA,SAAS,GAA+B,oBAAqB,CAC5D,WAD4D,CAA7D;AAGA,qBAXD,MAWO;AACN,sBAAA,SAAS,GAAG,WAAZ;AACA;;AAEmB,2BAAA,CAAA;AAAA;AAAA,sBAAM,KAAK,OAAL,CAAa,MAAb,CAAoB,KAApB,EAA2B,SAA3B,CAAN,CAAA;;;AAAd,oBAAA,EAAA,GAAA,MAAA,CAAA,KAAA,CAAA,KAAA,CAAA,EAAA,CAAc,EAAA,CAAA,IAAA,EAAd,EAAyD,CAAzD,CAAA,CAAA,EAAC,EAAA,GAAA,MAAA,CAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAD,EAAE,OAAO,GAAA,EAAA,CAAA,CAAA,CAAT;AAEN,2BAAA,CAAA;AAAA;AAAA,sBAAO,OAAP,CAAA;;;aA/GG,CAAA;AAiHJ,WAlHK,EAkHH,kBAlHG,EAmHL,KAnHK,CAmHC,KAAK,kBAAL,CAAwB,oBAAxB,CAnHD,CAAP,CAAA;;OAFsB,CAAA;AAsHtB,KA3ID;;AA6IA,SAAA,OAAA,GAcI,UACH,kBADG,EAEH,oBAFG,EAKmB;AAEtB,UAAI,SAAJ;AAEA,UAAM,gBAAgB,GACrB,kBAAkB,IAAI,uBAAuB,CAAI,kBAAJ,CAA7C,GACG,kBADH,GAEG,SAHJ;;AAKA,UAAI,kBAAkB,IAAI,gBAAgB,KAAK,SAA/C,EAA0D;AACzD,YAAM,KAAK,GAAM,kBAAjB;AACA,YAAM,kBAAgB,GACrB,KAAK,IAAa,MAAM,CAAC,cAAP,CAAsB,KAAtB,EAA8B,WADjD;;AAGA,YAAI,uBAAuB,CAAI,kBAAJ,CAA3B,EAAkD;AACjD,cAAI,oBAAJ,EAA0B;AACzB,YAAA,MAAM,CAAC,IAAP,CAAY,qDAAZ,EAAmE;AAClE,cAAA,KAAK,EAAA,KAD6D;AAElE,cAAA,oBAAoB,EAAA;AAF8C,aAAnE;AAIA;;AAED,iBAAO,KAAI,CAAC,OAAL,CAAa,kBAAb,EAA+B,KAAK,CAAC,EAArC,CAAP;AACA,SATD,MASO;AACN,cAAM,GAAG,GACR,8DADD;AAEA,UAAA,MAAM,CAAC,KAAP,CAAa,GAAb,EAAkB;AAAE,YAAA,KAAK,EAAA;AAAP,WAAlB;AAEA,gBAAM,IAAI,KAAJ,CAAU,GAAV,CAAN;AACA;AACD,OA9BqB,CAgCtB;;;AACA,UACC,oBAAoB,IACpB,gBADA,IAEA,kBAAkB,CACjB,oBADiB,EAEjB,kBAAkB,CAAC,gBAAD,CAFD,CAHnB,EAOE;AACD,YAAM,GAAG,GAAG,aAAa,CAAC,wBAA1B;AACA,QAAA,MAAM,CAAC,KAAP,CAAa,GAAb,EAAkB;AAAE,UAAA,aAAa,EAAE;AAAjB,SAAlB;AAEA,cAAM,IAAI,KAAJ,CAAU,GAAV,CAAN;AACA;;AAED,UAAI,oBAAoB,KAAK,SAAzB,IAAsC,gBAAgB,KAAK,SAA/D,EAA0E;AACzE,YAAM,GAAG,GAAG,oDAAZ;AACA,QAAA,MAAM,CAAC,KAAP,CAAa,GAAb,EAAkB,oBAAlB;AACA,cAAM,IAAI,KAAJ,CAAU,GAAV,CAAN;AACA;;AAED,UAAI,gBAAgB,IAAI,CAAC,uBAAuB,CAAC,gBAAD,CAAhD,EAAoE;AACnE,YAAM,GAAG,GAAG,sCAAZ;AACA,QAAA,MAAM,CAAC,KAAP,CAAa,GAAb,EAAkB;AAAE,UAAA,gBAAgB,EAAA;AAAlB,SAAlB;AAEA,cAAM,IAAI,KAAJ,CAAU,GAAV,CAAN;AACA;;AAED,UAAI,OAAO,oBAAP,KAAgC,QAApC,EAA8C;AAC7C,YAAM,eAAe,GAAG,kBAAkB,CAAC,gBAAD,CAA1C;;AACM,YAAA,EAAA,GAAA,MAAA,CAAA,2BAAA,CAAA,eAAA,CAAA,EAAA,CAAA,CAAA;AAAA,YAAC,QAAA,GAAA,EAAA,CAAA,CAAA,CAAD;;AAEN,QAAA,SAAS,GAAG,qBAAqB,CAAC,oBAAtB,CACX,kBAAkB,CAAC,gBAAD,CADP,EAEX,QAFW,EAGX,oBAHW,CAAZ;AAKA,OATD,MASO;AACN,YAAI,eAAe,CAAC,oBAAD,CAAnB,EAA2C;AAC1C,UAAA,SAAS,GAAG,SAAZ;AACA,SAFD,MAEO;AACN,UAAA,SAAS,GACR,gBAAgB,IAChB,qBAAqB,CAAC,kBAAtB,CACC,kBAAkB,CAAC,gBAAD,CADnB,EAEC,oBAFD,CAFD;AAMA;AACD;;AAED,aAAO,IAAI,UAAJ,CAAuC,UAAA,QAAA,EAAQ;AACrD,YAAI,MAAJ;;AAEA,QAAA,KAAI,CAAC,gBAAL,CACE,GADF,CACM,YAAA;AAAA,iBAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;;AACJ,yBAAA,CAAA;AAAA;AAAA,oBAAM,KAAK,KAAL,EAAN,CAAA;;;AAAA,kBAAA,EAAA,CAAA,IAAA,G,CAEA;AACA;;;AACA,kBAAA,MAAM,GAAG,KAAK,OAAL,CACP,OADO,CACC,gBADD,EACmB,SADnB,EAEP,MAFO,CAEA,UAAC,EAAD,EAAU;wBAAP,KAAA,GAAA,EAAA,CAAA,K;AAAY,2BAAA,iBAAiB,CAAC,KAAD,CAAjB,KAA6B,IAA7B;AAAiC,mBAFhD,EAGP,SAHO,CAGG;AACV,oBAAA,IAAI,EAAE,UAAA,IAAA,EAAI;AACT,6BAAA,KAAI,CAAC,gBAAL,CAAsB,MAAtB,IACA,KAAI,CAAC,gBAAL,CAAsB,GAAtB,CAA0B,YAAA;AAAA,+BAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;AAKrB,gCAAA,OAAO,GAAG,IAAV;oCAIA,EAAA,IAAI,CAAC,MAAL,KAAgB,QAAhB,C,EAAA,OAAA,CAAA;AAAA;AAAA,kCAAA,CAAA,CAAA;AACG,gCAAA,eAAe,GAAG,kBAAkB,CAAC,IAAI,CAAC,KAAN,CAApC;AACA,gCAAA,SAAS,GACd,2BAA2B,CAAC,eAAD,CADtB;AAEA,gCAAA,oBAAoB,GAAG,2BAA2B,CACvD,IAAI,CAAC,OADkD,EAEvD,SAFuD,CAAlD;AAIe,uCAAA,CAAA;AAAA;AAAA,kCAAM,KAAK,KAAL,CAC1B,IAAI,CAAC,KADqB,EAE1B,oBAF0B,CAAN,CAAA;;;AAAf,gCAAA,YAAY,GAAG,EAAA,CAAA,IAAA,EAAf;AAIN,gCAAA,OAAO,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACH,OADG,CAAA,EACI;AACV,kCAAA,OAAO,EAAE;AADC,iCADJ,CAAP;;;;AAMD,gCAAA,QAAQ,CAAC,IAAT,CAAc,OAAd;;;;;;yBA3ByB,CAAA;AA4BzB,uBA5BD,EA4BG,mCA5BH,CADA;AA6BuC,qBA/B9B;AAgCV,oBAAA,KAAK,EAAE,UAAA,GAAA,EAAG;AAAI,6BAAA,QAAQ,CAAC,KAAT,CAAA,GAAA,CAAA;AAAmB,qBAhCvB;AAiCV,oBAAA,QAAQ,EAAE,YAAA;AAAM,6BAAA,QAAQ,CAAR,QAAA,EAAA;AAAmB;AAjCzB,mBAHH,CAAT;;;;;;WALI,CAAA;AA2CJ,SA5CF,EA4CI,6CA5CJ,EA6CE,KA7CF,CA6CQ,KAAI,CAAC,kBAAL,CAAwB,qBAAxB,CA7CR,EA8CE,KA9CF,CA8CQ,UAAA,KAAA,EAAK;AACX,UAAA,QAAQ,CAAC,KAAT,CAAe,KAAf;AACA,SAhDF,EAHqD,CAqDrD;AACA;AACA;;;AACA,eAAO,KAAI,CAAC,gBAAL,CAAsB,UAAtB,CAAiC,YAAA;AAAA,iBAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;AACvC,kBAAI,MAAJ,EAAY;AACX,gBAAA,MAAM,CAAC,WAAP;AACA;;;;;;WAHsC,CAAA;AAIvC,SAJM,EAIJ,6BAJI,CAAP;AAKA,OA7DM,CAAP;AA8DA,KAnKD;;AAqKA,SAAA,YAAA,GAMI,UACH,KADG,EAEH,QAFG,EAGH,OAHG,EAG6B;AAEhC,aAAO,IAAI,UAAJ,CAAqC,UAAA,QAAA,EAAQ;AACnD,YAAM,KAAK,GAAG,IAAI,GAAJ,EAAd;AACA,YAAM,YAAY,GAAG,IAAI,GAAJ,EAArB;AACA,YAAI,cAAc,GAAa,EAA/B;AACA,YAAI,MAAJ;AACA,YAAI,SAAJ;AAEA;;;;;;;;;AASG;;AACH,YAAM,uBAAuB,GAAG,YAAA;AAC/B,cAAM,QAAQ,GAAG,gBAAgB,EAAjC;AACA,UAAA,YAAY,CAAC,QAAD,CAAZ;AACA,SAHD,CAjBmD,CAsBnD;AACA;;;AACA,YAAM,cAAc,GAAG,IAAI,wBAAJ,CAA6B;AACnD,UAAA,QAAQ,EAAE,uBADyC;AAEnD,UAAA,YAAY,EAAE,QAAQ,CAAC,KAF4B;AAGnD,UAAA,WAAW,EAAE;AAHsC,SAA7B,CAAvB;AAMQ,YAAA,IAAA,GAAA,CAAA,OAAA,IAAA,EAAA,EAAA,IAAA;AACR,YAAM,WAAW,GAAG,IAAI,GAAG;AAAE,UAAA,IAAI,EAAA;AAAN,SAAH,GAAc,SAAtC;AAEA,YAAM,eAAe,GAAG,kBAAkB,CAAC,KAAD,CAA1C;AACA,YAAM,SAAS,GAAG,2BAA2B,CAAC,eAAD,CAA7C;;AAEA,YAAI,UAAU,CAAC,QAAD,CAAd,EAA0B;AACzB,UAAA,SAAS,GAAG,qBAAqB,CAAC,oBAAtB,CACX,eADW,EAEX,SAAS,CAAC,CAAD,CAFE,EAGX,QAHW,CAAZ;AAKA,SAND,MAMO;AACN,cAAI,eAAe,CAAC,QAAD,CAAnB,EAA+B;AAC9B;AACA,YAAA,SAAS,GAAG,SAAZ;AACA,WAHD,MAGO;AACN,YAAA,SAAS,GAAG,qBAAqB,CAAC,kBAAtB,CACX,eADW,EAEX,QAFW,CAAZ;AAIA;AACD;;AAEK,YAAA,EAAA,GAAA,qBAAA,CAAA,aAAA,CAAA,SAAA,EAAA,KAAA,KAAA,EAAA;AAAA,YAAE,UAAA,GAAA,EAAA,CAAA,UAAF;AAAA,YAAc,kBAAA,GAAA,EAAA,CAAA,IAAd;;AAEN,YAAM,YAAY,GAAG,CAAC,CAAC,UAAvB;;AAEA,QAAA,KAAI,CAAC,gBAAL,CACE,GADF,CACM,YAAA;AAAA,iBAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;;;;;;AAGF,yBAAA,CAAA;AAAA;AAAA,oBAAM,KAAK,KAAL,CAAW,KAAX,EAAkB,QAAlB,EAA4B,WAA5B,CAAN,CAAA;;;AADD;AACC,kBAAA,EAAA,CAAA,IAAA,EAAD,CAAiD,OAAjD,CAAyD,UAAA,IAAA,EAAI;AAC5D,wBAAM,mBAAmB,GAAG,kBAAkB,CAAC,KAAD,CAA9C;AACA,wBAAM,MAAM,GAAG,kBAAkB,CAAC,mBAAD,EAAsB,IAAtB,CAAjC;AACA,oBAAA,KAAK,CAAC,GAAN,CAAU,MAAV,EAAkB,IAAlB;AACA,mBAJD,E,CAMA;AACA;AACA;AACA;;;AACA,kBAAA,MAAM,GAAG,KAAK,OAAL,CAAa,KAAb,EAAoB,SAApB,CACR,UAAC,EAAD,EAA2B;wBAAxB,OAAA,GAAA,EAAA,CAAA,O;wBAAS,KAAA,GAAA,EAAA,CAAA,K;wBAAO,MAAA,GAAA,EAAA,CAAA,M;;;;AAClB,wBAAM,mBAAmB,GAAG,kBAAkB,CAAC,KAAD,CAA9C;AACA,wBAAM,MAAM,GAAG,kBAAkB,CAAC,mBAAD,EAAsB,OAAtB,CAAjC;;AACA,wBACC,YAAY,IACZ,CAAC,iBAAiB,CAAC,OAAD,EAAU,kBAAV,EAA8B,UAA9B,CAFnB,EAGE;AACD,0BACC,MAAM,KAAK,QAAX,KACC,KAAK,CAAC,GAAN,CAAU,MAAV,KAAqB,YAAY,CAAC,GAAb,CAAiB,MAAjB,CADtB,CADD,EAGE;AACD;AACA;AACA;AACA;AACA,wBAAA,cAAc,CAAC,IAAf,CAAoB,MAApB;AACA,uBATD,MASO;AACN;AACA;AACA;AACD,qBApByB,CAsB1B;AACA;AACA;AACA;;;AACA,wBAAI,MAAM,KAAK,QAAf,EAAyB;AACxB,sBAAA,cAAc,CAAC,IAAf,CAAoB,MAApB;AACA,qBAFD,MAEO;AACN,sBAAA,YAAY,CAAC,GAAb,CAAiB,MAAjB,EAAyB,OAAzB;AACA;;AAED,wBAAM,QAAQ,GAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GACb,KAAI,CAAC,IADQ,MACJ,IADI,IACJ,EAAA,KAAA,KAAA,CADI,GACJ,KAAA,CADI,GACJ,EAAA,CAAE,oBAAF,CAAuB,KAAvB,CADI,MACwB,IADxB,IACwB,EAAA,KAAA,KAAA,CADxB,GACwB,EADxB,GAC6B,KAD3C;AAGA,wBAAM,KAAK,GACV,YAAY,CAAC,IAAb,GAAoB,cAAc,CAAC,MAAnC,IACA,KAAI,CAAC,YAFN;;AAIA,wBAAI,KAAK,IAAI,QAAb,EAAuB;AACtB,sBAAA,cAAc,CAAC,OAAf;AACA,qBAzCyB,CA2C1B;;;AACA,oBAAA,cAAc,CAAC,KAAf;AACA,mBA9CO,CAAT,C,CAiDA;;AACA,kBAAA,uBAAuB;;;;;;;AAEvB,kBAAA,QAAQ,CAAC,KAAT,CAAe,KAAf;;;;;;;;;;;WAjEG,CAAA;AAmEJ,SApEF,EAoEI,gCApEJ,EAqEE,KArEF,CAqEQ,KAAI,CAAC,kBAAL,CAAwB,0BAAxB,CArER,EAsEE,KAtEF,CAsEQ,UAAA,KAAA,EAAK;AACX,UAAA,QAAQ,CAAC,KAAT,CAAe,KAAf;AACA,SAxEF;AA0EA;;;;;AAKG;;;AACH,YAAM,gBAAgB,GAAG,YAAA;;;AACxB,cAAM,QAAQ,GAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAG,KAAI,CAAC,IAAR,MAAY,IAAZ,IAAY,EAAA,KAAA,KAAA,CAAZ,GAAY,KAAA,CAAZ,GAAY,EAAA,CAAE,oBAAF,CAAuB,KAAvB,CAAZ,MAAwC,IAAxC,IAAwC,EAAA,KAAA,KAAA,CAAxC,GAAwC,EAAxC,GAA6C,KAA3D;;AACA,cAAM,UAAU,GAAA,QAAA,CACZ,KAAK,CAAC,IAAN,CAAW,KAAK,CAAC,MAAN,EAAX,CADY,EAEZ,KAAK,CAAC,IAAN,CAAW,YAAY,CAAC,MAAb,EAAX,CAFY,CAAhB;;AAKA,cAAI,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,IAAb,EAAmB;AAClB,YAAA,SAAS,CAAC,UAAD,CAAT;AACA;;AAED,UAAA,KAAK,CAAC,KAAN;AACA,UAAA,UAAU,CAAC,OAAX,CAAmB,UAAA,IAAA,EAAI;AACtB,gBAAM,mBAAmB,GAAG,kBAAkB,CAAC,KAAD,CAA9C;AACA,gBAAM,MAAM,GAAG,kBAAkB,CAAC,mBAAD,EAAsB,IAAtB,CAAjC;AACA,YAAA,KAAK,CAAC,GAAN,CAAU,MAAV,EAAkB,IAAlB;AACA,WAJD,EAZwB,CAkBxB;;AACA,UAAA,cAAc,CAAC,OAAf,CAAuB,UAAA,MAAA,EAAM;AAAI,mBAAA,KAAK,CAAC,MAAN,CAAA,MAAA,CAAA;AAAoB,WAArD;AAEA,iBAAO;AACN,YAAA,KAAK,EAAE,KAAK,CAAC,IAAN,CAAW,KAAK,CAAC,MAAN,EAAX,CADD;AAEN,YAAA,QAAQ,EAAA;AAFF,WAAP;AAIA,SAzBD;AA2BA;;;;;;;AAOG;;;AACH,YAAM,YAAY,GAAG,UAAC,QAAD,EAA+B;AACnD;AACA;AACA,UAAA,QAAQ,CAAC,IAAT,CAAc,QAAd,EAHmD,CAKnD;;AACA,UAAA,YAAY,CAAC,KAAb;AACA,UAAA,cAAc,GAAG,EAAjB;AACA,SARD;AAUA;;;;;AAKG;;;AACH,YAAM,SAAS,GAAG,UAAC,WAAD,EAAiB;AAClC,cAAM,eAAe,GAAG,kBAAkB,CAAC,KAAD,CAA1C;;AACA,cAAM,UAAU,GAAG,KAAI,CAAC,iBAAL,CAAuB,eAAvB,EAAwC,OAAxC,CAAnB;;AAEA,cAAM,cAAc,GAAG,yBAAyB,CAAC,aAA1B,CACtB,UAAU,CAAC,IADW,CAAvB;;AAIA,cAAI,cAAc,CAAC,MAAnB,EAA2B;AAC1B,gBAAM,SAAS,GAAG,mBAAmB,CAAC,cAAD,CAArC;AACA,YAAA,WAAW,CAAC,IAAZ,CAAiB,SAAjB;AACA;AACD,SAZD;AAcA;;;;;;;AAOG;;;AACH,YAAM,WAAW,GAAG,UAAC,EAAD,EAAY;cAAT,OAAA,GAAA,EAAA,CAAA,O;;;;AACd,cAAA,KAAA,GAAA,OAAA,CAAA,KAAA;AAAA,cAAO,IAAA,GAAA,OAAA,CAAA,IAAP;;AACR,cACC,KAAK,KAAK,cAAc,CAAC,wBAAzB,IACA,CAAA,CAAA,EAAA,GAAA,IAAI,KAAA,IAAJ,IAAA,IAAI,KAAA,KAAA,CAAJ,GAAI,KAAA,CAAJ,GAAA,IAAI,CAAE,KAAN,MAAW,IAAX,IAAW,EAAA,KAAA,KAAA,CAAX,GAAW,KAAA,CAAX,GAAW,EAAA,CAAE,IAAb,MAAsB,KAAK,CAAC,IAF7B,EAGE;AACD,YAAA,uBAAuB;AACvB,YAAA,GAAG,CAAC,MAAJ,CAAW,WAAX,EAAwB,WAAxB;AACA;AACD,SATD;;AAUA,QAAA,GAAG,CAAC,MAAJ,CAAW,WAAX,EAAwB,WAAxB;AAEA,eAAO,KAAI,CAAC,gBAAL,CAAsB,UAAtB,CAAiC,YAAA;AAAA,iBAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;AACvC,kBAAI,MAAJ,EAAY;AACX,gBAAA,MAAM,CAAC,WAAP;AACA;;;;;;WAHsC,CAAA;AAIvC,SAJM,EAIJ,gCAJI,CAAP;AAKA,OApOM,CAAP;AAqOA,KAhPD;;AAkPA,SAAA,SAAA,GAAY,UAAC,MAAD,EAA6B;AAA5B,UAAA,MAAA,KAAA,KAAA,CAAA,EAAA;AAAA,QAAA,MAAA,GAAA,EAAA;AAA4B;;AACxC,MAAA,KAAI,CAAC,cAAL,CAAoB,IAApB,GAA2B,KAAI,CAAC,IAAhC;AACA,MAAA,KAAI,CAAC,cAAL,CAAoB,GAApB,GAA0B,KAAI,CAAC,GAA/B;AACA,MAAA,KAAI,CAAC,cAAL,CAAoB,KAApB,GAA4B,KAAI,CAAC,KAAjC;;AAGC,UAAA,eAAA,GAAA,MAAA,CAAA,SAAA;AAAA,UACA,0BAAA,GAAA,MAAA,CAAA,oBADA;AAAA,UAEA,qBAAA,GAAA,MAAA,CAAA,eAFA;AAAA,UAGA,kBAAA,GAAA,MAAA,CAAA,YAHA;AAAA,UAIA,sBAAA,GAAA,MAAA,CAAA,gBAJA;AAAA,UAKA,kBAAA,GAAA,MAAA,CAAA,YALA;AAAA,UAMA,sBAAA,GAAA,MAAA,CAAA,gBANA;AAAA,UAOA,qBAAA,GAAA,MAAA,CAAA,eAPA;AAAA,UAQA,mBAAA,GAAA,MAAA,CAAA,aARA;AAAA,UASA,oBAAA,GAAA,MAAA,CAAA,cATA;AAAA,UAUA,iBAAA,GAAA,MAAA,CAAA,MAAA,EAAA,CAAA,WAAA,EAAA,sBAAA,EAAA,iBAAA,EAAA,cAAA,EAAA,kBAAA,EAAA,cAAA,EAAA,kBAAA,EAAA,iBAAA,EAAA,eAAA,EAAA,gBAAA,CAAA,CAVA;;AAaD,MAAA,KAAI,CAAC,aAAL,GAAkB,QAAA,CAAA,QAAA,CAAA,EAAA,EACd,iBADc,CAAA,EAEd,KAAI,CAAC,aAFS,CAAlB;AAKA,MAAA,KAAI,CAAC,eAAL,GAAuB,KAAI,CAAC,kBAAL,CAAwB,MAAxB,CAAvB;AACA,MAAA,KAAI,CAAC,YAAL,GAAoB,KAAI,CAAC,eAAL,CAAqB,MAArB,CAApB;AAEA,UAAM,oBAAoB,GACxB,eAAe,IAAI,eAAe,CAAC,oBAApC,IACA,0BADA,IAEA,oBAAoB,CAAC,OAHtB;;AAKA,cAAQ,oBAAR;AACC,aAAK,oBAAoB,CAAC,UAA1B;AACC,UAAA,KAAI,CAAC,gBAAL,GAAwB,iBAAiB,CAAC,KAAI,CAAC,cAAN,CAAzC;AACA;;AACD,aAAK,oBAAoB,CAAC,OAA1B;AACC,UAAA,KAAI,CAAC,gBAAL,GAAwB,mBAAxB;AACA;;AACD;AACC,UAAA,KAAI,CAAC,gBAAL,GAAwB,mBAAxB;AACA;AATF,OAhCwC,CA4CxC;;;AACA,MAAA,KAAI,CAAC,aAAL,CAAmB,aAAnB,GACE,eAAe,IAAI,eAAe,CAAC,aAApC,IAAsD,mBADvD;AAGA,MAAA,KAAI,CAAC,eAAL,GACE,eAAe,IAAI,eAAe,CAAC,eAApC,IACA,qBADA,IAEA,KAAI,CAAC,eAHN;AAKA,MAAA,KAAI,CAAC,gBAAL,GACE,eAAe,IAAI,eAAe,CAAC,gBAApC,IACA,sBADA,IAEA,KAAI,CAAC,gBAFL,IAGA,KAJD,CArDwC,CA2DxC;;AACA,MAAA,KAAI,CAAC,aAAL,CAAmB,gBAAnB,GAAsC,KAAI,CAAC,gBAA3C;AAEA,MAAA,KAAI,CAAC,YAAL,GACE,eAAe,IAAI,eAAe,CAAC,YAApC,IACA,kBADA,IAEA,KAAI,CAAC,YAFL,IAGA,IAJD,CA9DwC,CAoExC;;AACA,MAAA,KAAI,CAAC,aAAL,CAAmB,YAAnB,GAAkC,KAAI,CAAC,YAAvC;AAEA,MAAA,KAAI,CAAC,gBAAL,GACE,eAAe,IAAI,eAAe,CAAC,gBAApC,IACA,sBADA,IAEA,KAAI,CAAC,gBAFL,IAGA,KAAK,EAJN,CAvEwC,CA2E9B;;AAEV,MAAA,KAAI,CAAC,cAAL,GACE,eAAe,IAAI,eAAe,CAAC,cAApC,IACA,oBADA,IAEA,KAAI,CAAC,cAFL,IAGA,SAJD;AAMA,MAAA,KAAI,CAAC,SAAL,GAAiB,KAAI,CAAC,iBAAL,EAAjB;AACA,KApFD;AAgUA;;AA1qCA,EAAA,SAAA,CAAA,SAAA,CAAA,aAAA,GAAA,YAAA;AACC,WAAO,WAAP;AACA,GAFD;AAIA;;;;;;AAMG;;;AACH,EAAA,SAAA,CAAA,SAAA,CAAA,kBAAA,GAAA,UAAmB,SAAnB,EAAoC;AAApC,QAAA,KAAA,GAAA,IAAA;AACC;;;;;AAKG;;;AACH,QAAM,OAAO,GAAG,UAAC,GAAD,EAAW;AAC1B,UAAI,GAAG,CAAC,OAAJ,CAAY,UAAZ,CAAuB,+BAAvB,CAAJ,EAA6D;AAC5D,cAAM,IAAI,KAAJ,CACL,CACC,4CAA2C,SAA3C,GAAoD,0BAApD,GAA+E,KAAI,CAAC,KAApF,GAAyF,KAD1F,EAEC,iFAFD,EAGC,kEAHD,EAIC,iEAJD,EAKE,IALF,CAKO,IALP,CADK,CAAN;AAQA,OATD,MASO;AACN,cAAM,GAAN;AACA;AACD,KAbD;;AAeA,WAAO,OAAP;AACA,GAvBD;AAq7BA;;;;;;;AAOG;;;AACG,EAAA,SAAA,CAAA,SAAA,CAAA,KAAA,GAAN,YAAA;;;;;AACC,YAAA,sBAAsB;AACtB,iBAAK,KAAL,GAAa,cAAc,CAAC,QAA5B;AACA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,gBAAL,CAAsB,KAAtB,EAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;gBACI,EAAA,KAAK,OAAL,KAAiB,SAAjB,C,EAAA,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA,C,CACH;;AACA,iBAAK,OAAL,GAAe,IAAI,OAAJ,CACd,MADc,EAEd,iBAFc,EAGd,8BAHc,EAId,oBAJc,EAKd,KAAK,cALS,EAMd,KAAK,SANS,CAAf;AAQA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,OAAL,CAAa,IAAb,EAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;;;;AAGD,gBAAI,gBAAgB,IAAI,CAAC,gBAAgB,CAAC,MAA1C,EAAkD;AACjD,cAAA,gBAAgB,CAAC,WAAjB;AACA;;iBAEG,KAAK,I,EAAL,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;AACH,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,IAAL,CAAU,IAAV,EAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;;;;AAGD,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,OAAL,CAAc,KAAd,EAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;AAEA,iBAAK,WAAL,GAAmB,SAAnB,C,CAA8B;;AAC9B,iBAAK,OAAL,GAAe,SAAf;AACA,iBAAK,IAAL,GAAY,SAAZ;AACA,iBAAK,cAAL,GAAsB,IAAI,OAAJ,EAAtB;AAEA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,gBAAL,CAAsB,IAAtB,EAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;AACA,iBAAK,KAAL,GAAa,cAAc,CAAC,UAA5B;;;;;;;AACA,GAlCK;AAoCN;;;;;AAKG;;;AACG,EAAA,SAAA,CAAA,SAAA,CAAA,IAAA,GAAN,YAAA;;;;;AACC,iBAAK,KAAL,GAAa,cAAc,CAAC,QAA5B;AAEA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,gBAAL,CAAsB,KAAtB,EAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;AAEA,gBAAI,gBAAgB,IAAI,CAAC,gBAAgB,CAAC,MAA1C,EAAkD;AACjD,cAAA,gBAAgB,CAAC,WAAjB;AACA;;iBAEG,KAAK,I,EAAL,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;AACH,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,IAAL,CAAU,IAAV,EAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;;;;AAGD,iBAAK,WAAL,GAAmB,SAAnB,C,CAA8B;;AAC9B,iBAAK,IAAL,GAAY,SAAZ;AACA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,gBAAL,CAAsB,IAAtB,EAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;AACA,iBAAK,KAAL,GAAa,cAAc,CAAC,UAA5B;;;;;;;AACA,GAjBK;AAmBN;;;;;;AAMG;;;AACK,EAAA,SAAA,CAAA,SAAA,CAAA,iBAAA,GAAR,UACC,eADD,EAEC,kBAFD,EAE+C;AAE9C,QAAI,aAAJ;;AACM,QAAA,EAAA,GAAA,kBAAA,IAAA,EAAA;AAAA,QAAE,KAAA,GAAA,EAAA,CAAA,KAAF;AAAA,QAAS,IAAA,GAAA,EAAA,CAAA,IAAT;AAAA,QAAe,IAAA,GAAA,EAAA,CAAA,IAAf;;AAEN,QAAI,KAAK,KAAK,SAAV,IAAuB,IAAI,KAAK,SAAhC,IAA6C,IAAI,KAAK,SAA1D,EAAqE;AACpE,aAAO,SAAP;AACA;;AAED,QAAI,IAAI,KAAK,SAAT,IAAsB,KAAK,KAAK,SAApC,EAA+C;AAC9C,YAAM,IAAI,KAAJ,CAAU,0CAAV,CAAN;AACA;;AAED,QAAI,IAAI,KAAK,SAAb,EAAwB;AACvB,UAAI,OAAO,IAAP,KAAgB,QAApB,EAA8B;AAC7B,cAAM,IAAI,KAAJ,CAAU,yBAAV,CAAN;AACA;;AAED,UAAI,IAAI,GAAG,CAAX,EAAc;AACb,cAAM,IAAI,KAAJ,CAAU,wBAAV,CAAN;AACA;AACD;;AAED,QAAI,KAAK,KAAK,SAAd,EAAyB;AACxB,UAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC9B,cAAM,IAAI,KAAJ,CAAU,0BAAV,CAAN;AACA;;AAED,UAAI,KAAK,GAAG,CAAZ,EAAe;AACd,cAAM,IAAI,KAAJ,CAAU,yBAAV,CAAN;AACA;AACD;;AAED,QAAI,IAAJ,EAAU;AACT,MAAA,aAAa,GAAG,yBAAyB,CAAC,kBAA1B,CACf,eADe,EAEf,kBAAkB,CAAC,IAFJ,CAAhB;AAIA;;AAED,WAAO;AACN,MAAA,KAAK,EAAA,KADC;AAEN,MAAA,IAAI,EAAA,IAFE;AAGN,MAAA,IAAI,EAAE;AAHA,KAAP;AAKA,GA/CO;AAiDR;;;AAGG;;;AACW,EAAA,SAAA,CAAA,SAAA,CAAA,sBAAA,GAAd,YAAA;;;;;;;;;AAGC,gBAAI,CAAC,KAAK,eAAN,IAAyB,CAAC,KAAK,eAAL,CAAqB,MAAnD,EAA2D;AAC1D,qBAAA,CAAA;AAAA;AAAA,gBAAO,IAAI,OAAJ,EAAP,CAAA;AACA;;AAEsB,mBAAA,CAAA;AAAA;AAAA,cAAM,OAAO,CAAC,GAAR,CAC5B,KAAK,eAAL,CAAqB,GAArB,CACC,UACC,cADD,EAC+B;AAAA,qBAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;;AAEkB,6BAAA,CAAA;AAAA;AAAA,wBAAM,cAAN,CAAA;;;AAA1C,sBAAA,EAAA,GAA0C,EAAA,CAAA,IAAA,EAA1C,EAAE,gBAAgB,GAAA,EAAA,CAAA,gBAAlB,EAAoB,iBAAiB,GAAA,EAAA,CAAA,iBAArC;AACA,sBAAA,eAAe,GAAG,kBAAkB,CAAC,gBAAD,CAApC;AAIY,6BAAA,CAAA;AAAA;AAAA,wBAAM,KAAK,aAAL,CAAmB,iBAAnB,CAAN,CAAA;;;AAAZ,sBAAA,SAAS,GAAG,EAAA,CAAA,IAAA,EAAZ;;AACN,0BAAI,eAAe,CAAC,SAAD,CAAnB,EAAgC;AAC/B,+BAAA,CAAA;AAAA;AAAA,0BAAO,CAAC,eAAD,EAAkB,IAAlB,CAAP,CAAA;AACA;;AAEK,sBAAA,SAAS,GAAG,KAAK,mBAAL,CACjB,eADiB,EAEjB,SAFiB,CAAZ;AAKN,6BAAA,CAAA;AAAA;AAAA,wBAAO,CAAC,eAAD,EAAkB,SAAlB,CAAP,CAAA;;;eAjB8B,CAAA;AAkB9B,aApBF,CAD4B,CAAN,CAAA;;;AAAjB,YAAA,cAAc,GAAG,EAAA,CAAA,IAAA,EAAjB;AAyBN,mBAAA,CAAA;AAAA;AAAA,cAAO,KAAK,kBAAL,CAAwB,cAAxB,CAAP,CAAA;;;;AACA,GAjCa;;AAmCN,EAAA,SAAA,CAAA,SAAA,CAAA,mBAAA,GAAR,UACC,eADD,EAEC,SAFD,EAEmD;AAElD,QAAI;AACH,aAAO,qBAAqB,CAAC,kBAAtB,CACN,eADM,EAEN,SAFM,CAAP;AAIA,KALD,CAKE,OAAO,KAAP,EAAc;AACf,MAAA,MAAM,CAAC,KAAP,CAAa,+BAAb;AACA,YAAM,KAAN;AACA;AACD,GAbO;;AAeM,EAAA,SAAA,CAAA,SAAA,CAAA,aAAA,GAAd,UACC,iBADD,EACkB;;;;;;;;AAGE,mBAAA,CAAA;AAAA;AAAA,cAAM,iBAAiB,EAAvB,CAAA;;;AAAZ,YAAA,SAAS,GAAG,EAAA,CAAA,IAAA,EAAZ;AACN,mBAAA,CAAA;AAAA;AAAA,cAAO,SAAP,CAAA;;;;;AAEA,gBAAI,OAAK,YAAY,SAArB,EAAgC;AAC/B,qBAAA,CAAA;AAAA;AAAA,gBAAO,iBAAP,CAAA;AACA;;AACD,kBAAM,OAAN;;;;;;;;;AAED,GAZa;;AAcN,EAAA,SAAA,CAAA,SAAA,CAAA,kBAAA,GAAR,UACC,OADD,EAC8C;AAE7C,WAAO,OAAO,CAAC,MAAR,CAAe,UAAC,GAAD,EAAM,EAAN,EAAkC;UAA5B,EAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,C;UAAC,eAAA,GAAA,EAAA,CAAA,CAAA,C;UAAiB,SAAA,GAAA,EAAA,CAAA,CAAA,C;;AAC7C,UAAI,GAAG,CAAC,GAAJ,CAAQ,eAAR,CAAJ,EAA8B;AACrB,YAAA,MAAA,GAAA,eAAA,CAAA,IAAA;AACR,QAAA,MAAM,CAAC,IAAP,CACC,wGAC2C,MAD3C,GAC+C,yBAFhD;AAIA,eAAO,GAAP;AACA;;AAED,UAAI,SAAJ,EAAe;AACd,QAAA,GAAG,CAAC,GAAJ,CAAQ,eAAR,EAAyB,SAAzB;AACA;;AAED,aAAO,GAAP;AACA,KAfM,EAeJ,IAAI,OAAJ,EAfI,CAAP;AAgBA,GAnBO;AAqBR;;;AAGG;;;AACK,EAAA,SAAA,CAAA,SAAA,CAAA,iBAAA,GAAR,YAAA;AACC,QAAI;AACH,UAAM,SAAS,GAAG,cAAc,CAAC,OAAf,CAAuB,oBAAvB,CAAlB;;AAEA,UAAI,SAAJ,EAAe;AACN,YAAA,2BAAA,GAAA,KAAA,aAAA,CAAA,2BAAA;AAER,YAAM,UAAU,GAAG,2BAA2B,CAAC,KAA5B,CAAkC,GAAlC,EAAuC,CAAvC,CAAnB;;AACM,YAAA,EAAA,GAAA,MAAA,CAAA,UAAA,CAAA,KAAA,CAAA,GAAA,CAAA,EAAA,CAAA,CAAA;AAAA,YAAC,SAAA,GAAA,EAAA,CAAA,CAAA,CAAD;;AAEN,eAAU,SAAS,GAAA,GAAT,GAAa,SAAvB;AACA;AACD,KAXD,CAWE,OAAA,EAAA,EAAM,CAAE;;AAEV,WAAO,SAAP;AACA,GAfO;;AAgBT,SAAA,SAAA;AAAC,CAlvCD,EAAA;;AAovCA,IAAM,QAAQ,GAAG,IAAI,SAAJ,EAAjB;AACA,OAAO,CAAC,QAAR,CAAiB,QAAjB;AAEA,SAAS,SAAS,IAAI,cAAtB,EAAsC,UAAtC,EAAkD,QAAQ,IAAI,SAA9D","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nimport API from '@aws-amplify/api';\nimport { Auth } from '@aws-amplify/auth';\nimport Cache from '@aws-amplify/cache';\nimport { Amplify, ConsoleLogger as Logger, Hub, JS, BackgroundProcessManager, } from '@aws-amplify/core';\nimport { immerable, produce, setAutoFreeze, enablePatches, } from 'immer';\nimport { v4 as uuid4 } from 'uuid';\nimport Observable from 'zen-observable-ts';\nimport { defaultAuthStrategy, multiAuthStrategy } from '../authModeStrategies';\nimport { isPredicatesAll, ModelPredicateCreator, ModelSortPredicateCreator, } from '../predicates';\nimport { ExclusiveStorage as Storage } from '../storage/storage';\nimport { ControlMessage, SyncEngine } from '../sync';\nimport { GraphQLScalarType, isGraphQLScalarType, isSchemaModelWithAttributes, AuthModeStrategyType, isNonModelFieldType, isModelFieldType, isIdentifierObject, } from '../types';\nimport { DATASTORE, errorMessages, establishRelationAndKeys, exhaustiveCheck, isModelConstructor, monotonicUlidFactory, STORAGE, SYNC, USER, isNullOrUndefined, registerNonModelClass, sortCompareFunction, DeferredCallbackResolver, extractPrimaryKeyFieldNames, extractPrimaryKeysAndValues, isIdManaged, isIdOptionallyManaged, validatePredicate, mergePatches, } from '../util';\nimport { getIdentifierValue } from '../sync/utils';\nsetAutoFreeze(true);\nenablePatches();\nvar logger = new Logger('DataStore');\nvar ulid = monotonicUlidFactory(Date.now());\nvar isNode = JS.browserOrNode().isNode;\nvar SETTING_SCHEMA_VERSION = 'schemaVersion';\nvar schema;\nvar modelNamespaceMap = new WeakMap();\n// stores data for crafting the correct update mutation input for a model\n// Patch[] - array of changed fields and metadata\n// PersistentModel - the source model, used for diffing object-type fields\nvar modelPatchesMap = new WeakMap();\nvar getModelDefinition = function (modelConstructor) {\n    var namespace = modelNamespaceMap.get(modelConstructor);\n    return schema.namespaces[namespace].models[modelConstructor.name];\n};\nvar isValidModelConstructor = function (obj) {\n    return isModelConstructor(obj) && modelNamespaceMap.has(obj);\n};\nvar namespaceResolver = function (modelConstructor) {\n    return modelNamespaceMap.get(modelConstructor);\n};\n// exporting syncClasses for testing outbox.test.ts\nexport var syncClasses;\nvar userClasses;\nvar dataStoreClasses;\nvar storageClasses;\nvar initSchema = function (userSchema) {\n    var _a;\n    if (schema !== undefined) {\n        console.warn('The schema has already been initialized');\n        return userClasses;\n    }\n    logger.log('validating schema', { schema: userSchema });\n    var internalUserNamespace = __assign({ name: USER }, userSchema);\n    logger.log('DataStore', 'Init models');\n    userClasses = createTypeClasses(internalUserNamespace);\n    logger.log('DataStore', 'Models initialized');\n    var dataStoreNamespace = getNamespace();\n    var storageNamespace = Storage.getNamespace();\n    var syncNamespace = SyncEngine.getNamespace();\n    dataStoreClasses = createTypeClasses(dataStoreNamespace);\n    storageClasses = createTypeClasses(storageNamespace);\n    syncClasses = createTypeClasses(syncNamespace);\n    schema = {\n        namespaces: (_a = {},\n            _a[dataStoreNamespace.name] = dataStoreNamespace,\n            _a[internalUserNamespace.name] = internalUserNamespace,\n            _a[storageNamespace.name] = storageNamespace,\n            _a[syncNamespace.name] = syncNamespace,\n            _a),\n        version: userSchema.version,\n    };\n    Object.keys(schema.namespaces).forEach(function (namespace) {\n        var e_1, _a;\n        var _b = __read(establishRelationAndKeys(schema.namespaces[namespace]), 2), relations = _b[0], keys = _b[1];\n        schema.namespaces[namespace].relationships = relations;\n        schema.namespaces[namespace].keys = keys;\n        var modelAssociations = new Map();\n        Object.values(schema.namespaces[namespace].models).forEach(function (model) {\n            var connectedModels = [];\n            Object.values(model.fields)\n                .filter(function (field) {\n                return field.association &&\n                    field.association.connectionType === 'BELONGS_TO' &&\n                    field.type.model !== model.name;\n            })\n                .forEach(function (field) {\n                return connectedModels.push(field.type.model);\n            });\n            modelAssociations.set(model.name, connectedModels);\n        });\n        var result = new Map();\n        var count = 1000;\n        while (true && count > 0) {\n            if (modelAssociations.size === 0) {\n                break;\n            }\n            count--;\n            if (count === 0) {\n                throw new Error('Models are not topologically sortable. Please verify your schema.');\n            }\n            try {\n                for (var _c = (e_1 = void 0, __values(Array.from(modelAssociations.keys()))), _d = _c.next(); !_d.done; _d = _c.next()) {\n                    var modelName = _d.value;\n                    var parents = modelAssociations.get(modelName);\n                    if (parents.every(function (x) { return result.has(x); })) {\n                        result.set(modelName, parents);\n                    }\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            Array.from(result.keys()).forEach(function (x) { return modelAssociations.delete(x); });\n        }\n        schema.namespaces[namespace].modelTopologicalOrdering = result;\n    });\n    return userClasses;\n};\n/**\n * Throws an exception if the schema has *not* been initialized\n * by `initSchema()`.\n *\n * **To be called before trying to access schema.**\n *\n * Currently this only needs to be called in `start()` and `clear()` because\n * all other functions will call start first.\n */\nvar checkSchemaInitialized = function () {\n    if (schema === undefined) {\n        var message = 'Schema is not initialized. DataStore will not function as expected. This could happen if you have multiple versions of DataStore installed. Please see https://docs.amplify.aws/lib/troubleshooting/upgrading/q/platform/js/#check-for-duplicate-versions';\n        logger.error(message);\n        throw new Error(message);\n    }\n};\nvar createTypeClasses = function (namespace) {\n    var classes = {};\n    Object.entries(namespace.models).forEach(function (_a) {\n        var _b = __read(_a, 2), modelName = _b[0], modelDefinition = _b[1];\n        var clazz = createModelClass(modelDefinition);\n        classes[modelName] = clazz;\n        modelNamespaceMap.set(clazz, namespace.name);\n    });\n    Object.entries(namespace.nonModels || {}).forEach(function (_a) {\n        var _b = __read(_a, 2), typeName = _b[0], typeDefinition = _b[1];\n        var clazz = createNonModelClass(typeDefinition);\n        classes[typeName] = clazz;\n    });\n    return classes;\n};\n/**\n * Collection of instantiated models to allow storage of metadata apart from\n * the model visible to the consuming app -- in case the app doesn't have\n * metadata fields (_version, _deleted, etc.) exposed on the model itself.\n */\nvar instancesMetadata = new WeakSet();\nfunction modelInstanceCreator(modelConstructor, init) {\n    instancesMetadata.add(init);\n    return new modelConstructor(init);\n}\nvar validateModelFields = function (modelDefinition) { return function (k, v) {\n    var fieldDefinition = modelDefinition.fields[k];\n    if (fieldDefinition !== undefined) {\n        var type_1 = fieldDefinition.type, isRequired_1 = fieldDefinition.isRequired, isArrayNullable = fieldDefinition.isArrayNullable, name_1 = fieldDefinition.name, isArray = fieldDefinition.isArray;\n        if (((!isArray && isRequired_1) || (isArray && !isArrayNullable)) &&\n            (v === null || v === undefined)) {\n            throw new Error(\"Field \" + name_1 + \" is required\");\n        }\n        if (isSchemaModelWithAttributes(modelDefinition) &&\n            !isIdManaged(modelDefinition)) {\n            var keys = extractPrimaryKeyFieldNames(modelDefinition);\n            if (keys.includes(k) && v === '') {\n                logger.error(errorMessages.idEmptyString, { k: k, value: v });\n                throw new Error(errorMessages.idEmptyString);\n            }\n        }\n        if (isGraphQLScalarType(type_1)) {\n            var jsType_1 = GraphQLScalarType.getJSType(type_1);\n            var validateScalar_1 = GraphQLScalarType.getValidationFunction(type_1);\n            if (type_1 === 'AWSJSON') {\n                if (typeof v === jsType_1) {\n                    return;\n                }\n                if (typeof v === 'string') {\n                    try {\n                        JSON.parse(v);\n                        return;\n                    }\n                    catch (error) {\n                        throw new Error(\"Field \" + name_1 + \" is an invalid JSON object. \" + v);\n                    }\n                }\n            }\n            if (isArray) {\n                var errorTypeText = jsType_1;\n                if (!isRequired_1) {\n                    errorTypeText = jsType_1 + \" | null | undefined\";\n                }\n                if (!Array.isArray(v) && !isArrayNullable) {\n                    throw new Error(\"Field \" + name_1 + \" should be of type [\" + errorTypeText + \"], \" + typeof v + \" received. \" + v);\n                }\n                if (!isNullOrUndefined(v) &&\n                    v.some(function (e) {\n                        return isNullOrUndefined(e) ? isRequired_1 : typeof e !== jsType_1;\n                    })) {\n                    var elemTypes = v\n                        .map(function (e) { return (e === null ? 'null' : typeof e); })\n                        .join(',');\n                    throw new Error(\"All elements in the \" + name_1 + \" array should be of type \" + errorTypeText + \", [\" + elemTypes + \"] received. \" + v);\n                }\n                if (validateScalar_1 && !isNullOrUndefined(v)) {\n                    var validationStatus = v.map(function (e) {\n                        if (!isNullOrUndefined(e)) {\n                            return validateScalar_1(e);\n                        }\n                        else if (isNullOrUndefined(e) && !isRequired_1) {\n                            return true;\n                        }\n                        else {\n                            return false;\n                        }\n                    });\n                    if (!validationStatus.every(function (s) { return s; })) {\n                        throw new Error(\"All elements in the \" + name_1 + \" array should be of type \" + type_1 + \", validation failed for one or more elements. \" + v);\n                    }\n                }\n            }\n            else if (!isRequired_1 && v === undefined) {\n                return;\n            }\n            else if (typeof v !== jsType_1 && v !== null) {\n                throw new Error(\"Field \" + name_1 + \" should be of type \" + jsType_1 + \", \" + typeof v + \" received. \" + v);\n            }\n            else if (!isNullOrUndefined(v) &&\n                validateScalar_1 &&\n                !validateScalar_1(v)) {\n                throw new Error(\"Field \" + name_1 + \" should be of type \" + type_1 + \", validation failed. \" + v);\n            }\n        }\n        else if (isNonModelFieldType(type_1)) {\n            // do not check non model fields if undefined or null\n            if (!isNullOrUndefined(v)) {\n                var subNonModelDefinition_1 = schema.namespaces.user.nonModels[type_1.nonModel];\n                var modelValidator_1 = validateModelFields(subNonModelDefinition_1);\n                if (isArray) {\n                    var errorTypeText = type_1.nonModel;\n                    if (!isRequired_1) {\n                        errorTypeText = type_1.nonModel + \" | null | undefined\";\n                    }\n                    if (!Array.isArray(v)) {\n                        throw new Error(\"Field \" + name_1 + \" should be of type [\" + errorTypeText + \"], \" + typeof v + \" received. \" + v);\n                    }\n                    v.forEach(function (item) {\n                        if ((isNullOrUndefined(item) && isRequired_1) ||\n                            (typeof item !== 'object' && typeof item !== 'undefined')) {\n                            throw new Error(\"All elements in the \" + name_1 + \" array should be of type \" + type_1.nonModel + \", [\" + typeof item + \"] received. \" + item);\n                        }\n                        if (!isNullOrUndefined(item)) {\n                            Object.keys(subNonModelDefinition_1.fields).forEach(function (subKey) {\n                                modelValidator_1(subKey, item[subKey]);\n                            });\n                        }\n                    });\n                }\n                else {\n                    if (typeof v !== 'object') {\n                        throw new Error(\"Field \" + name_1 + \" should be of type \" + type_1.nonModel + \", \" + typeof v + \" recieved. \" + v);\n                    }\n                    Object.keys(subNonModelDefinition_1.fields).forEach(function (subKey) {\n                        modelValidator_1(subKey, v[subKey]);\n                    });\n                }\n            }\n        }\n    }\n}; };\nvar castInstanceType = function (modelDefinition, k, v) {\n    var _a = modelDefinition.fields[k] || {}, isArray = _a.isArray, type = _a.type;\n    // attempt to parse stringified JSON\n    if (typeof v === 'string' &&\n        (isArray ||\n            type === 'AWSJSON' ||\n            isNonModelFieldType(type) ||\n            isModelFieldType(type))) {\n        try {\n            return JSON.parse(v);\n        }\n        catch (_b) {\n            // if JSON is invalid, don't throw and let modelValidator handle it\n        }\n    }\n    // cast from numeric representation of boolean to JS boolean\n    if (typeof v === 'number' && type === 'Boolean') {\n        return Boolean(v);\n    }\n    return v;\n};\nvar initializeInstance = function (init, modelDefinition, draft) {\n    var modelValidator = validateModelFields(modelDefinition);\n    Object.entries(init).forEach(function (_a) {\n        var _b = __read(_a, 2), k = _b[0], v = _b[1];\n        var parsedValue = castInstanceType(modelDefinition, k, v);\n        modelValidator(k, parsedValue);\n        draft[k] = parsedValue;\n    });\n};\nvar createModelClass = function (modelDefinition) {\n    var clazz = /** @class */ (function () {\n        function Model(init) {\n            var instance = produce(this, function (draft) {\n                initializeInstance(init, modelDefinition, draft);\n                // model is initialized inside a DataStore component (e.g. by Sync Engine, Storage Engine, etc.)\n                var isInternallyInitialized = instancesMetadata.has(init);\n                var modelInstanceMetadata = isInternallyInitialized\n                    ? init\n                    : {};\n                var _id = modelInstanceMetadata.id;\n                if (isIdManaged(modelDefinition)) {\n                    var isInternalModel = _id !== null && _id !== undefined;\n                    var id = isInternalModel\n                        ? _id\n                        : modelDefinition.syncable\n                            ? uuid4()\n                            : ulid();\n                    draft.id = id;\n                }\n                else if (isIdOptionallyManaged(modelDefinition)) {\n                    // only auto-populate if the id was not provided\n                    draft.id = draft.id || uuid4();\n                }\n                if (!isInternallyInitialized) {\n                    checkReadOnlyPropertyOnCreate(draft, modelDefinition);\n                }\n                var _version = modelInstanceMetadata._version, _lastChangedAt = modelInstanceMetadata._lastChangedAt, _deleted = modelInstanceMetadata._deleted;\n                if (modelDefinition.syncable) {\n                    draft._version = _version;\n                    draft._lastChangedAt = _lastChangedAt;\n                    draft._deleted = _deleted;\n                }\n            });\n            return instance;\n        }\n        Model.copyOf = function (source, fn) {\n            var modelConstructor = Object.getPrototypeOf(source || {}).constructor;\n            if (!isValidModelConstructor(modelConstructor)) {\n                var msg = 'The source object is not a valid model';\n                logger.error(msg, { source: source });\n                throw new Error(msg);\n            }\n            var patches;\n            var model = produce(source, function (draft) {\n                fn(draft);\n                var keyNames = extractPrimaryKeyFieldNames(modelDefinition);\n                // Keys are immutable\n                keyNames.forEach(function (key) { return (draft[key] = source[key]); });\n                var modelValidator = validateModelFields(modelDefinition);\n                Object.entries(draft).forEach(function (_a) {\n                    var _b = __read(_a, 2), k = _b[0], v = _b[1];\n                    var parsedValue = castInstanceType(modelDefinition, k, v);\n                    modelValidator(k, parsedValue);\n                });\n            }, function (p) { return (patches = p); });\n            var hasExistingPatches = modelPatchesMap.has(source);\n            if (patches.length || hasExistingPatches) {\n                if (hasExistingPatches) {\n                    var _a = __read(modelPatchesMap.get(source), 2), existingPatches = _a[0], existingSource = _a[1];\n                    var mergedPatches = mergePatches(existingSource, existingPatches, patches);\n                    modelPatchesMap.set(model, [mergedPatches, existingSource]);\n                    checkReadOnlyPropertyOnUpdate(mergedPatches, modelDefinition);\n                }\n                else {\n                    modelPatchesMap.set(model, [patches, source]);\n                    checkReadOnlyPropertyOnUpdate(patches, modelDefinition);\n                }\n            }\n            return model;\n        };\n        // \"private\" method (that's hidden via `Setting`) for `withSSRContext` to use\n        // to gain access to `modelInstanceCreator` and `clazz` for persisting IDs from server to client.\n        Model.fromJSON = function (json) {\n            var _this = this;\n            if (Array.isArray(json)) {\n                return json.map(function (init) { return _this.fromJSON(init); });\n            }\n            var instance = modelInstanceCreator(clazz, json);\n            var modelValidator = validateModelFields(modelDefinition);\n            Object.entries(instance).forEach(function (_a) {\n                var _b = __read(_a, 2), k = _b[0], v = _b[1];\n                modelValidator(k, v);\n            });\n            return instance;\n        };\n        return Model;\n    }());\n    clazz[immerable] = true;\n    Object.defineProperty(clazz, 'name', { value: modelDefinition.name });\n    return clazz;\n};\nvar checkReadOnlyPropertyOnCreate = function (draft, modelDefinition) {\n    var modelKeys = Object.keys(draft);\n    var fields = modelDefinition.fields;\n    modelKeys.forEach(function (key) {\n        if (fields[key] && fields[key].isReadOnly) {\n            throw new Error(key + \" is read-only.\");\n        }\n    });\n};\nvar checkReadOnlyPropertyOnUpdate = function (patches, modelDefinition) {\n    var patchArray = patches.map(function (p) { return [p.path[0], p.value]; });\n    var fields = modelDefinition.fields;\n    patchArray.forEach(function (_a) {\n        var _b = __read(_a, 2), key = _b[0], val = _b[1];\n        if (!val || !fields[key])\n            return;\n        if (fields[key].isReadOnly) {\n            throw new Error(key + \" is read-only.\");\n        }\n    });\n};\nvar createNonModelClass = function (typeDefinition) {\n    var clazz = /** @class */ (function () {\n        function Model(init) {\n            var instance = produce(this, function (draft) {\n                initializeInstance(init, typeDefinition, draft);\n            });\n            return instance;\n        }\n        return Model;\n    }());\n    clazz[immerable] = true;\n    Object.defineProperty(clazz, 'name', { value: typeDefinition.name });\n    registerNonModelClass(clazz);\n    return clazz;\n};\nfunction isQueryOne(obj) {\n    return typeof obj === 'string';\n}\nfunction defaultConflictHandler(conflictData) {\n    var localModel = conflictData.localModel, modelConstructor = conflictData.modelConstructor, remoteModel = conflictData.remoteModel;\n    var _version = remoteModel._version;\n    return modelInstanceCreator(modelConstructor, __assign(__assign({}, localModel), { _version: _version }));\n}\nfunction defaultErrorHandler(error) {\n    logger.warn(error);\n}\nfunction getModelConstructorByModelName(namespaceName, modelName) {\n    var result;\n    switch (namespaceName) {\n        case DATASTORE:\n            result = dataStoreClasses[modelName];\n            break;\n        case USER:\n            result = userClasses[modelName];\n            break;\n        case SYNC:\n            result = syncClasses[modelName];\n            break;\n        case STORAGE:\n            result = storageClasses[modelName];\n            break;\n        default:\n            exhaustiveCheck(namespaceName);\n            break;\n    }\n    if (isValidModelConstructor(result)) {\n        return result;\n    }\n    else {\n        var msg = \"Model name is not valid for namespace. modelName: \" + modelName + \", namespace: \" + namespaceName;\n        logger.error(msg);\n        throw new Error(msg);\n    }\n}\n/**\n * Queries the DataStore metadata tables to see if they are the expected\n * version. If not, clobbers the whole DB. If so, leaves them alone.\n * Otherwise, simply writes the schema version.\n *\n * SIDE EFFECT:\n * 1. Creates a transaction\n * 1. Updates data.\n *\n * @param storage Storage adapter containing the metadata.\n * @param version The expected schema version.\n */\nfunction checkSchemaVersion(storage, version) {\n    return __awaiter(this, void 0, void 0, function () {\n        var Setting, modelDefinition;\n        var _this = this;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    Setting = dataStoreClasses.Setting;\n                    modelDefinition = schema.namespaces[DATASTORE].models.Setting;\n                    return [4 /*yield*/, storage.runExclusive(function (s) { return __awaiter(_this, void 0, void 0, function () {\n                            var _a, schemaVersionSetting, storedValue;\n                            return __generator(this, function (_b) {\n                                switch (_b.label) {\n                                    case 0: return [4 /*yield*/, s.query(Setting, ModelPredicateCreator.createFromExisting(modelDefinition, function (c) {\n                                            return c.key('eq', SETTING_SCHEMA_VERSION);\n                                        }), { page: 0, limit: 1 })];\n                                    case 1:\n                                        _a = __read.apply(void 0, [_b.sent(), 1]), schemaVersionSetting = _a[0];\n                                        if (!(schemaVersionSetting !== undefined &&\n                                            schemaVersionSetting.value !== undefined)) return [3 /*break*/, 4];\n                                        storedValue = JSON.parse(schemaVersionSetting.value);\n                                        if (!(storedValue !== version)) return [3 /*break*/, 3];\n                                        return [4 /*yield*/, s.clear(false)];\n                                    case 2:\n                                        _b.sent();\n                                        _b.label = 3;\n                                    case 3: return [3 /*break*/, 6];\n                                    case 4: return [4 /*yield*/, s.save(modelInstanceCreator(Setting, {\n                                            key: SETTING_SCHEMA_VERSION,\n                                            value: JSON.stringify(version),\n                                        }))];\n                                    case 5:\n                                        _b.sent();\n                                        _b.label = 6;\n                                    case 6: return [2 /*return*/];\n                                }\n                            });\n                        }); })];\n                case 1:\n                    _a.sent();\n                    return [2 /*return*/];\n            }\n        });\n    });\n}\nvar syncSubscription;\nfunction getNamespace() {\n    var namespace = {\n        name: DATASTORE,\n        relationships: {},\n        enums: {},\n        nonModels: {},\n        models: {\n            Setting: {\n                name: 'Setting',\n                pluralName: 'Settings',\n                syncable: false,\n                fields: {\n                    id: {\n                        name: 'id',\n                        type: 'ID',\n                        isRequired: true,\n                        isArray: false,\n                    },\n                    key: {\n                        name: 'key',\n                        type: 'String',\n                        isRequired: true,\n                        isArray: false,\n                    },\n                    value: {\n                        name: 'value',\n                        type: 'String',\n                        isRequired: true,\n                        isArray: false,\n                    },\n                },\n            },\n        },\n    };\n    return namespace;\n}\nvar DataStoreState;\n(function (DataStoreState) {\n    DataStoreState[\"NotRunning\"] = \"Not Running\";\n    DataStoreState[\"Starting\"] = \"Starting\";\n    DataStoreState[\"Running\"] = \"Running\";\n    DataStoreState[\"Stopping\"] = \"Stopping\";\n    DataStoreState[\"Clearing\"] = \"Clearing\";\n})(DataStoreState || (DataStoreState = {}));\nvar DataStore = /** @class */ (function () {\n    function DataStore() {\n        var _this = this;\n        // reference to configured category instances. Used for preserving SSR context\n        this.Auth = Auth;\n        this.API = API;\n        this.Cache = Cache;\n        this.amplifyConfig = {};\n        this.syncPredicates = new WeakMap();\n        // object that gets passed to descendent classes. Allows us to pass these down by reference\n        this.amplifyContext = {\n            Auth: this.Auth,\n            API: this.API,\n            Cache: this.Cache,\n        };\n        /**\n         * **IMPORTANT!**\n         *\n         * Accumulator for background things that can **and MUST** be called when\n         * DataStore stops.\n         *\n         * These jobs **MUST** be *idempotent promises* that resolve ONLY\n         * once the intended jobs are completely finished and/or otherwise destroyed\n         * and cleaned up with ZERO outstanding:\n         *\n         * 1. side effects (e.g., state changes)\n         * 1. callbacks\n         * 1. subscriptions\n         * 1. calls to storage\n         * 1. *etc.*\n         *\n         * Methods that create pending promises, subscriptions, callbacks, or any\n         * type of side effect **MUST** be registered with the manager. And, a new\n         * manager must be created after each `exit()`.\n         *\n         * Failure to comply will put DataStore into a highly unpredictable state\n         * when it needs to stop or clear -- which occurs when restarting with new\n         * sync expressions, during testing, and potentially during app code\n         * recovery handling, etc..\n         *\n         * It is up to the discretion of each disposer whether to wait for job\n         * completion or to cancel operations and issue failures *as long as the\n         * disposer returns in a reasonable amount of time.*\n         *\n         * (Reasonable = *seconds*, not minutes.)\n         */\n        this.runningProcesses = new BackgroundProcessManager();\n        /**\n         * Indicates what state DataStore is in.\n         *\n         * Not [yet?] used for actual state management; but for messaging\n         * when errors occur, to help troubleshoot.\n         */\n        this.state = DataStoreState.NotRunning;\n        /**\n         * If not already done:\n         * 1. Attaches and initializes storage.\n         * 1. Loads the schema and records metadata.\n         * 1. If `this.amplifyConfig.aws_appsync_graphqlEndpoint` contains a URL,\n         * attaches a sync engine, starts it, and subscribes.\n         */\n        this.start = function () { return __awaiter(_this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.runningProcesses\n                        .add(function () { return __awaiter(_this, void 0, void 0, function () {\n                        var aws_appsync_graphqlEndpoint, _a, fullSyncIntervalInMilliseconds;\n                        var _this = this;\n                        return __generator(this, function (_b) {\n                            switch (_b.label) {\n                                case 0:\n                                    this.state = DataStoreState.Starting;\n                                    if (!(this.initialized === undefined)) return [3 /*break*/, 1];\n                                    logger.debug('Starting DataStore');\n                                    this.initialized = new Promise(function (res, rej) {\n                                        _this.initResolve = res;\n                                        _this.initReject = rej;\n                                    });\n                                    return [3 /*break*/, 3];\n                                case 1: return [4 /*yield*/, this.initialized];\n                                case 2:\n                                    _b.sent();\n                                    return [2 /*return*/];\n                                case 3:\n                                    this.storage = new Storage(schema, namespaceResolver, getModelConstructorByModelName, modelInstanceCreator, this.storageAdapter, this.sessionId);\n                                    return [4 /*yield*/, this.storage.init()];\n                                case 4:\n                                    _b.sent();\n                                    checkSchemaInitialized();\n                                    return [4 /*yield*/, checkSchemaVersion(this.storage, schema.version)];\n                                case 5:\n                                    _b.sent();\n                                    aws_appsync_graphqlEndpoint = this.amplifyConfig.aws_appsync_graphqlEndpoint;\n                                    if (!aws_appsync_graphqlEndpoint) return [3 /*break*/, 7];\n                                    logger.debug('GraphQL endpoint available', aws_appsync_graphqlEndpoint);\n                                    _a = this;\n                                    return [4 /*yield*/, this.processSyncExpressions()];\n                                case 6:\n                                    _a.syncPredicates = _b.sent();\n                                    this.sync = new SyncEngine(schema, namespaceResolver, syncClasses, userClasses, this.storage, modelInstanceCreator, this.conflictHandler, this.errorHandler, this.syncPredicates, this.amplifyConfig, this.authModeStrategy, this.amplifyContext, this.connectivityMonitor);\n                                    fullSyncIntervalInMilliseconds = this.fullSyncInterval * 1000 * 60;\n                                    syncSubscription = this.sync\n                                        .start({ fullSyncInterval: fullSyncIntervalInMilliseconds })\n                                        .subscribe({\n                                        next: function (_a) {\n                                            var type = _a.type, data = _a.data;\n                                            // In Node, we need to wait for queries to be synced to prevent returning empty arrays.\n                                            // In the Browser, we can begin returning data once subscriptions are in place.\n                                            var readyType = isNode\n                                                ? ControlMessage.SYNC_ENGINE_SYNC_QUERIES_READY\n                                                : ControlMessage.SYNC_ENGINE_STORAGE_SUBSCRIBED;\n                                            if (type === readyType) {\n                                                _this.initResolve();\n                                            }\n                                            Hub.dispatch('datastore', {\n                                                event: type,\n                                                data: data,\n                                            });\n                                        },\n                                        error: function (err) {\n                                            logger.warn('Sync error', err);\n                                            _this.initReject();\n                                        },\n                                    });\n                                    return [3 /*break*/, 8];\n                                case 7:\n                                    logger.warn(\"Data won't be synchronized. No GraphQL endpoint configured. Did you forget `Amplify.configure(awsconfig)`?\", {\n                                        config: this.amplifyConfig,\n                                    });\n                                    this.initResolve();\n                                    _b.label = 8;\n                                case 8: return [4 /*yield*/, this.initialized];\n                                case 9:\n                                    _b.sent();\n                                    this.state = DataStoreState.Running;\n                                    return [2 /*return*/];\n                            }\n                        });\n                    }); }, 'datastore start')\n                        .catch(this.handleAddProcError('DataStore.start()'))];\n            });\n        }); };\n        this.query = function (modelConstructor, identifierOrCriteria, paginationProducer) { return __awaiter(_this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.runningProcesses\n                        .add(function () { return __awaiter(_this, void 0, void 0, function () {\n                        var msg, modelDefinition, keyFields, predicate, msg, pagination, result, returnOne;\n                        return __generator(this, function (_a) {\n                            switch (_a.label) {\n                                case 0: return [4 /*yield*/, this.start()];\n                                case 1:\n                                    _a.sent();\n                                    //#region Input validation\n                                    if (!isValidModelConstructor(modelConstructor)) {\n                                        msg = 'Constructor is not for a valid model';\n                                        logger.error(msg, { modelConstructor: modelConstructor });\n                                        throw new Error(msg);\n                                    }\n                                    if (typeof identifierOrCriteria === 'string') {\n                                        if (paginationProducer !== undefined) {\n                                            logger.warn('Pagination is ignored when querying by id');\n                                        }\n                                    }\n                                    modelDefinition = getModelDefinition(modelConstructor);\n                                    keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n                                    if (isQueryOne(identifierOrCriteria)) {\n                                        if (keyFields.length > 1) {\n                                            msg = errorMessages.queryByPkWithCompositeKeyPresent;\n                                            logger.error(msg, { keyFields: keyFields });\n                                            throw new Error(msg);\n                                        }\n                                        predicate = ModelPredicateCreator.createForSingleField(modelDefinition, keyFields[0], identifierOrCriteria);\n                                    }\n                                    else {\n                                        // Object is being queried using object literal syntax\n                                        if (isIdentifierObject(identifierOrCriteria, modelDefinition)) {\n                                            predicate = ModelPredicateCreator.createForPk(modelDefinition, identifierOrCriteria);\n                                        }\n                                        else if (isPredicatesAll(identifierOrCriteria)) {\n                                            // Predicates.ALL means \"all records\", so no predicate (undefined)\n                                            predicate = undefined;\n                                        }\n                                        else {\n                                            predicate = ModelPredicateCreator.createFromExisting(modelDefinition, identifierOrCriteria);\n                                        }\n                                    }\n                                    pagination = this.processPagination(modelDefinition, paginationProducer);\n                                    //#endregion\n                                    logger.debug('params ready', {\n                                        modelConstructor: modelConstructor,\n                                        predicate: ModelPredicateCreator.getPredicates(predicate, false),\n                                        pagination: __assign(__assign({}, pagination), { sort: ModelSortPredicateCreator.getPredicates(pagination && pagination.sort, false) }),\n                                    });\n                                    return [4 /*yield*/, this.storage.query(modelConstructor, predicate, pagination)];\n                                case 2:\n                                    result = _a.sent();\n                                    returnOne = isQueryOne(identifierOrCriteria) ||\n                                        isIdentifierObject(identifierOrCriteria, modelDefinition);\n                                    return [2 /*return*/, returnOne ? result[0] : result];\n                            }\n                        });\n                    }); }, 'datastore query')\n                        .catch(this.handleAddProcError('DataStore.query()'))];\n            });\n        }); };\n        this.save = function (model, condition) { return __awaiter(_this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.runningProcesses\n                        .add(function () { return __awaiter(_this, void 0, void 0, function () {\n                        var patchesTuple, modelConstructor, msg, modelDefinition, producedCondition, _a, savedModel;\n                        var _this = this;\n                        return __generator(this, function (_b) {\n                            switch (_b.label) {\n                                case 0: return [4 /*yield*/, this.start()];\n                                case 1:\n                                    _b.sent();\n                                    patchesTuple = modelPatchesMap.get(model);\n                                    modelConstructor = model ? model.constructor : undefined;\n                                    if (!isValidModelConstructor(modelConstructor)) {\n                                        msg = 'Object is not an instance of a valid model';\n                                        logger.error(msg, { model: model });\n                                        throw new Error(msg);\n                                    }\n                                    modelDefinition = getModelDefinition(modelConstructor);\n                                    producedCondition = ModelPredicateCreator.createFromExisting(modelDefinition, condition);\n                                    return [4 /*yield*/, this.storage.runExclusive(function (s) { return __awaiter(_this, void 0, void 0, function () {\n                                            return __generator(this, function (_a) {\n                                                switch (_a.label) {\n                                                    case 0: return [4 /*yield*/, s.save(model, producedCondition, undefined, patchesTuple)];\n                                                    case 1:\n                                                        _a.sent();\n                                                        return [2 /*return*/, s.query(modelConstructor, ModelPredicateCreator.createForPk(modelDefinition, model))];\n                                                }\n                                            });\n                                        }); })];\n                                case 2:\n                                    _a = __read.apply(void 0, [_b.sent(), 1]), savedModel = _a[0];\n                                    return [2 /*return*/, savedModel];\n                            }\n                        });\n                    }); }, 'datastore save')\n                        .catch(this.handleAddProcError('DataStore.save()'))];\n            });\n        }); };\n        this.setConflictHandler = function (config) {\n            var configDataStore = config.DataStore;\n            var conflictHandlerIsDefault = function () {\n                return _this.conflictHandler === defaultConflictHandler;\n            };\n            if (configDataStore && configDataStore.conflictHandler) {\n                return configDataStore.conflictHandler;\n            }\n            if (conflictHandlerIsDefault() && config.conflictHandler) {\n                return config.conflictHandler;\n            }\n            return _this.conflictHandler || defaultConflictHandler;\n        };\n        this.setErrorHandler = function (config) {\n            var configDataStore = config.DataStore;\n            var errorHandlerIsDefault = function () {\n                return _this.errorHandler === defaultErrorHandler;\n            };\n            if (configDataStore && configDataStore.errorHandler) {\n                return configDataStore.errorHandler;\n            }\n            if (errorHandlerIsDefault() && config.errorHandler) {\n                return config.errorHandler;\n            }\n            return _this.errorHandler || defaultErrorHandler;\n        };\n        this.delete = function (modelOrConstructor, identifierOrCriteria) { return __awaiter(_this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.runningProcesses\n                        .add(function () { return __awaiter(_this, void 0, void 0, function () {\n                        var condition, msg, modelConstructor, msg, modelDefinition, keyFields, msg, msg, _a, deleted, model, modelConstructor, msg, modelDefinition, pkPredicate, msg, _b, _c, deleted;\n                        return __generator(this, function (_d) {\n                            switch (_d.label) {\n                                case 0: return [4 /*yield*/, this.start()];\n                                case 1:\n                                    _d.sent();\n                                    if (!modelOrConstructor) {\n                                        msg = 'Model or Model Constructor required';\n                                        logger.error(msg, { modelOrConstructor: modelOrConstructor });\n                                        throw new Error(msg);\n                                    }\n                                    if (!isValidModelConstructor(modelOrConstructor)) return [3 /*break*/, 3];\n                                    modelConstructor = modelOrConstructor;\n                                    if (!identifierOrCriteria) {\n                                        msg = 'Id to delete or criteria required. Do you want to delete all? Pass Predicates.ALL';\n                                        logger.error(msg, { identifierOrCriteria: identifierOrCriteria });\n                                        throw new Error(msg);\n                                    }\n                                    modelDefinition = getModelDefinition(modelConstructor);\n                                    if (typeof identifierOrCriteria === 'string') {\n                                        keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n                                        if (keyFields.length > 1) {\n                                            msg = errorMessages.deleteByPkWithCompositeKeyPresent;\n                                            logger.error(msg, { keyFields: keyFields });\n                                            throw new Error(msg);\n                                        }\n                                        condition = ModelPredicateCreator.createForSingleField(getModelDefinition(modelConstructor), keyFields[0], identifierOrCriteria);\n                                    }\n                                    else {\n                                        if (isIdentifierObject(identifierOrCriteria, modelDefinition)) {\n                                            condition = ModelPredicateCreator.createForPk(modelDefinition, identifierOrCriteria);\n                                        }\n                                        else {\n                                            condition = ModelPredicateCreator.createFromExisting(modelDefinition, \n                                            /**\n                                             * idOrCriteria is always a ProducerModelPredicate<T>, never a symbol.\n                                             * The symbol is used only for typing purposes. e.g. see Predicates.ALL\n                                             */\n                                            identifierOrCriteria);\n                                        }\n                                        if (!condition ||\n                                            !ModelPredicateCreator.isValidPredicate(condition)) {\n                                            msg = 'Criteria required. Do you want to delete all? Pass Predicates.ALL';\n                                            logger.error(msg, { condition: condition });\n                                            throw new Error(msg);\n                                        }\n                                    }\n                                    return [4 /*yield*/, this.storage.delete(modelConstructor, condition)];\n                                case 2:\n                                    _a = __read.apply(void 0, [_d.sent(), 1]), deleted = _a[0];\n                                    return [2 /*return*/, deleted];\n                                case 3:\n                                    model = modelOrConstructor;\n                                    modelConstructor = Object.getPrototypeOf(model || {})\n                                        .constructor;\n                                    if (!isValidModelConstructor(modelConstructor)) {\n                                        msg = 'Object is not an instance of a valid model';\n                                        logger.error(msg, { model: model });\n                                        throw new Error(msg);\n                                    }\n                                    modelDefinition = getModelDefinition(modelConstructor);\n                                    pkPredicate = ModelPredicateCreator.createForPk(modelDefinition, model);\n                                    if (identifierOrCriteria) {\n                                        if (typeof identifierOrCriteria !== 'function') {\n                                            msg = 'Invalid criteria';\n                                            logger.error(msg, { identifierOrCriteria: identifierOrCriteria });\n                                            throw new Error(msg);\n                                        }\n                                        condition = identifierOrCriteria(pkPredicate);\n                                    }\n                                    else {\n                                        condition = pkPredicate;\n                                    }\n                                    return [4 /*yield*/, this.storage.delete(model, condition)];\n                                case 4:\n                                    _b = __read.apply(void 0, [_d.sent(), 1]), _c = __read(_b[0], 1), deleted = _c[0];\n                                    return [2 /*return*/, deleted];\n                            }\n                        });\n                    }); }, 'datastore delete')\n                        .catch(this.handleAddProcError('DataStore.delete()'))];\n            });\n        }); };\n        this.observe = function (modelOrConstructor, identifierOrCriteria) {\n            var predicate;\n            var modelConstructor = modelOrConstructor && isValidModelConstructor(modelOrConstructor)\n                ? modelOrConstructor\n                : undefined;\n            if (modelOrConstructor && modelConstructor === undefined) {\n                var model = modelOrConstructor;\n                var modelConstructor_1 = model && Object.getPrototypeOf(model).constructor;\n                if (isValidModelConstructor(modelConstructor_1)) {\n                    if (identifierOrCriteria) {\n                        logger.warn('idOrCriteria is ignored when using a model instance', {\n                            model: model,\n                            identifierOrCriteria: identifierOrCriteria,\n                        });\n                    }\n                    return _this.observe(modelConstructor_1, model.id);\n                }\n                else {\n                    var msg = 'The model is not an instance of a PersistentModelConstructor';\n                    logger.error(msg, { model: model });\n                    throw new Error(msg);\n                }\n            }\n            // observe should not accept object literal syntax\n            if (identifierOrCriteria &&\n                modelConstructor &&\n                isIdentifierObject(identifierOrCriteria, getModelDefinition(modelConstructor))) {\n                var msg = errorMessages.observeWithObjectLiteral;\n                logger.error(msg, { objectLiteral: identifierOrCriteria });\n                throw new Error(msg);\n            }\n            if (identifierOrCriteria !== undefined && modelConstructor === undefined) {\n                var msg = 'Cannot provide criteria without a modelConstructor';\n                logger.error(msg, identifierOrCriteria);\n                throw new Error(msg);\n            }\n            if (modelConstructor && !isValidModelConstructor(modelConstructor)) {\n                var msg = 'Constructor is not for a valid model';\n                logger.error(msg, { modelConstructor: modelConstructor });\n                throw new Error(msg);\n            }\n            if (typeof identifierOrCriteria === 'string') {\n                var modelDefinition = getModelDefinition(modelConstructor);\n                var _a = __read(extractPrimaryKeyFieldNames(modelDefinition), 1), keyField = _a[0];\n                predicate = ModelPredicateCreator.createForSingleField(getModelDefinition(modelConstructor), keyField, identifierOrCriteria);\n            }\n            else {\n                if (isPredicatesAll(identifierOrCriteria)) {\n                    predicate = undefined;\n                }\n                else {\n                    predicate =\n                        modelConstructor &&\n                            ModelPredicateCreator.createFromExisting(getModelDefinition(modelConstructor), identifierOrCriteria);\n                }\n            }\n            return new Observable(function (observer) {\n                var handle;\n                _this.runningProcesses\n                    .add(function () { return __awaiter(_this, void 0, void 0, function () {\n                    var _this = this;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0: return [4 /*yield*/, this.start()];\n                            case 1:\n                                _a.sent();\n                                // Filter the events returned by Storage according to namespace,\n                                // append original element data, and subscribe to the observable\n                                handle = this.storage\n                                    .observe(modelConstructor, predicate)\n                                    .filter(function (_a) {\n                                    var model = _a.model;\n                                    return namespaceResolver(model) === USER;\n                                })\n                                    .subscribe({\n                                    next: function (item) {\n                                        return _this.runningProcesses.isOpen &&\n                                            _this.runningProcesses.add(function () { return __awaiter(_this, void 0, void 0, function () {\n                                                var message, modelDefinition, keyFields, primaryKeysAndValues, freshElement;\n                                                return __generator(this, function (_a) {\n                                                    switch (_a.label) {\n                                                        case 0:\n                                                            message = item;\n                                                            if (!(item.opType !== 'DELETE')) return [3 /*break*/, 2];\n                                                            modelDefinition = getModelDefinition(item.model);\n                                                            keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n                                                            primaryKeysAndValues = extractPrimaryKeysAndValues(item.element, keyFields);\n                                                            return [4 /*yield*/, this.query(item.model, primaryKeysAndValues)];\n                                                        case 1:\n                                                            freshElement = _a.sent();\n                                                            message = __assign(__assign({}, message), { element: freshElement });\n                                                            _a.label = 2;\n                                                        case 2:\n                                                            observer.next(message);\n                                                            return [2 /*return*/];\n                                                    }\n                                                });\n                                            }); }, 'datastore observe message handler');\n                                    },\n                                    error: function (err) { return observer.error(err); },\n                                    complete: function () { return observer.complete(); },\n                                });\n                                return [2 /*return*/];\n                        }\n                    });\n                }); }, 'datastore observe observable initialization')\n                    .catch(_this.handleAddProcError('DataStore.observe()'))\n                    .catch(function (error) {\n                    observer.error(error);\n                });\n                // better than no cleaner, but if the subscriber is handling the\n                // complete() message async and not registering with the context,\n                // this will still be problematic.\n                return _this.runningProcesses.addCleaner(function () { return __awaiter(_this, void 0, void 0, function () {\n                    return __generator(this, function (_a) {\n                        if (handle) {\n                            handle.unsubscribe();\n                        }\n                        return [2 /*return*/];\n                    });\n                }); }, 'DataStore.observe() cleanup');\n            });\n        };\n        this.observeQuery = function (model, criteria, options) {\n            return new Observable(function (observer) {\n                var items = new Map();\n                var itemsChanged = new Map();\n                var deletedItemIds = [];\n                var handle;\n                var predicate;\n                /**\n                 * As the name suggests, this geneates a snapshot in the form of\n                 * \t`{items: T[], isSynced: boolean}`\n                 * and sends it to the observer.\n                 *\n                 * SIDE EFFECT: The underlying generation and emission methods may touch:\n                 * `items`, `itemsChanged`, and `deletedItemIds`.\n                 *\n                 * Refer to `generateSnapshot` and `emitSnapshot` for more details.\n                 */\n                var generateAndEmitSnapshot = function () {\n                    var snapshot = generateSnapshot();\n                    emitSnapshot(snapshot);\n                };\n                // a mechanism to return data after X amount of seconds OR after the\n                // \"limit\" (itemsChanged >= this.syncPageSize) has been reached, whichever comes first\n                var limitTimerRace = new DeferredCallbackResolver({\n                    callback: generateAndEmitSnapshot,\n                    errorHandler: observer.error,\n                    maxInterval: 2000,\n                });\n                var sort = (options || {}).sort;\n                var sortOptions = sort ? { sort: sort } : undefined;\n                var modelDefinition = getModelDefinition(model);\n                var keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n                if (isQueryOne(criteria)) {\n                    predicate = ModelPredicateCreator.createForSingleField(modelDefinition, keyFields[0], criteria);\n                }\n                else {\n                    if (isPredicatesAll(criteria)) {\n                        // Predicates.ALL means \"all records\", so no predicate (undefined)\n                        predicate = undefined;\n                    }\n                    else {\n                        predicate = ModelPredicateCreator.createFromExisting(modelDefinition, criteria);\n                    }\n                }\n                var _a = ModelPredicateCreator.getPredicates(predicate, false) || {}, predicates = _a.predicates, predicateGroupType = _a.type;\n                var hasPredicate = !!predicates;\n                _this.runningProcesses\n                    .add(function () { return __awaiter(_this, void 0, void 0, function () {\n                    var err_1;\n                    var _this = this;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0:\n                                _a.trys.push([0, 2, , 3]);\n                                return [4 /*yield*/, this.query(model, criteria, sortOptions)];\n                            case 1:\n                                // first, query and return any locally-available records\n                                (_a.sent()).forEach(function (item) {\n                                    var itemModelDefinition = getModelDefinition(model);\n                                    var idOrPk = getIdentifierValue(itemModelDefinition, item);\n                                    items.set(idOrPk, item);\n                                });\n                                // Observe the model and send a stream of updates (debounced).\n                                // We need to post-filter results instead of passing criteria through\n                                // to have visibility into items that move from in-set to out-of-set.\n                                // We need to explicitly remove those items from the existing snapshot.\n                                handle = this.observe(model).subscribe(function (_a) {\n                                    var element = _a.element, model = _a.model, opType = _a.opType;\n                                    var _b, _c;\n                                    var itemModelDefinition = getModelDefinition(model);\n                                    var idOrPk = getIdentifierValue(itemModelDefinition, element);\n                                    if (hasPredicate &&\n                                        !validatePredicate(element, predicateGroupType, predicates)) {\n                                        if (opType === 'UPDATE' &&\n                                            (items.has(idOrPk) || itemsChanged.has(idOrPk))) {\n                                            // tracking as a \"deleted item\" will include the item in\n                                            // page limit calculations and ensure it is removed from the\n                                            // final items collection, regardless of which collection(s)\n                                            // it is currently in. (I mean, it could be in both, right!?)\n                                            deletedItemIds.push(idOrPk);\n                                        }\n                                        else {\n                                            // ignore updates for irrelevant/filtered items.\n                                            return;\n                                        }\n                                    }\n                                    // Flag items which have been recently deleted\n                                    // NOTE: Merging of separate operations to the same model instance is handled upstream\n                                    // in the `mergePage` method within src/sync/merger.ts. The final state of a model instance\n                                    // depends on the LATEST record (for a given id).\n                                    if (opType === 'DELETE') {\n                                        deletedItemIds.push(idOrPk);\n                                    }\n                                    else {\n                                        itemsChanged.set(idOrPk, element);\n                                    }\n                                    var isSynced = (_c = (_b = _this.sync) === null || _b === void 0 ? void 0 : _b.getModelSyncedStatus(model)) !== null && _c !== void 0 ? _c : false;\n                                    var limit = itemsChanged.size - deletedItemIds.length >=\n                                        _this.syncPageSize;\n                                    if (limit || isSynced) {\n                                        limitTimerRace.resolve();\n                                    }\n                                    // kicks off every subsequent race as results sync down\n                                    limitTimerRace.start();\n                                });\n                                // returns a set of initial/locally-available results\n                                generateAndEmitSnapshot();\n                                return [3 /*break*/, 3];\n                            case 2:\n                                err_1 = _a.sent();\n                                observer.error(err_1);\n                                return [3 /*break*/, 3];\n                            case 3: return [2 /*return*/];\n                        }\n                    });\n                }); }, 'datastore observequery startup')\n                    .catch(_this.handleAddProcError('DataStore.observeQuery()'))\n                    .catch(function (error) {\n                    observer.error(error);\n                });\n                /**\n                 * Combines the `items`, `itemsChanged`, and `deletedItemIds` collections into\n                 * a snapshot in the form of `{ items: T[], isSynced: boolean}`.\n                 *\n                 * SIDE EFFECT: The shared `items` collection is recreated.\n                 */\n                var generateSnapshot = function () {\n                    var _a, _b;\n                    var isSynced = (_b = (_a = _this.sync) === null || _a === void 0 ? void 0 : _a.getModelSyncedStatus(model)) !== null && _b !== void 0 ? _b : false;\n                    var itemsArray = __spread(Array.from(items.values()), Array.from(itemsChanged.values()));\n                    if (options === null || options === void 0 ? void 0 : options.sort) {\n                        sortItems(itemsArray);\n                    }\n                    items.clear();\n                    itemsArray.forEach(function (item) {\n                        var itemModelDefinition = getModelDefinition(model);\n                        var idOrPk = getIdentifierValue(itemModelDefinition, item);\n                        items.set(idOrPk, item);\n                    });\n                    // remove deleted items from the final result set\n                    deletedItemIds.forEach(function (idOrPk) { return items.delete(idOrPk); });\n                    return {\n                        items: Array.from(items.values()),\n                        isSynced: isSynced,\n                    };\n                };\n                /**\n                 * Emits the list of items to the observer.\n                 *\n                 * SIDE EFFECT: `itemsChanged` and `deletedItemIds` are cleared to prepare\n                 * for the next snapshot.\n                 *\n                 * @param snapshot The generated items data to emit.\n                 */\n                var emitSnapshot = function (snapshot) {\n                    // send the generated snapshot to the primary subscription.\n                    // NOTE: This observer's handler *could* be async ...\n                    observer.next(snapshot);\n                    // reset the changed items sets\n                    itemsChanged.clear();\n                    deletedItemIds = [];\n                };\n                /**\n                 * Sorts an `Array` of `T` according to the sort instructions given in the\n                 * original  `observeQuery()` call.\n                 *\n                 * @param itemsToSort A array of model type.\n                 */\n                var sortItems = function (itemsToSort) {\n                    var modelDefinition = getModelDefinition(model);\n                    var pagination = _this.processPagination(modelDefinition, options);\n                    var sortPredicates = ModelSortPredicateCreator.getPredicates(pagination.sort);\n                    if (sortPredicates.length) {\n                        var compareFn = sortCompareFunction(sortPredicates);\n                        itemsToSort.sort(compareFn);\n                    }\n                };\n                /**\n                 * Force one last snapshot when the model is fully synced.\n                 *\n                 * This reduces latency for that last snapshot, which will otherwise\n                 * wait for the configured timeout.\n                 *\n                 * @param payload The payload from the Hub event.\n                 */\n                var hubCallback = function (_a) {\n                    var payload = _a.payload;\n                    var _b;\n                    var event = payload.event, data = payload.data;\n                    if (event === ControlMessage.SYNC_ENGINE_MODEL_SYNCED &&\n                        ((_b = data === null || data === void 0 ? void 0 : data.model) === null || _b === void 0 ? void 0 : _b.name) === model.name) {\n                        generateAndEmitSnapshot();\n                        Hub.remove('datastore', hubCallback);\n                    }\n                };\n                Hub.listen('datastore', hubCallback);\n                return _this.runningProcesses.addCleaner(function () { return __awaiter(_this, void 0, void 0, function () {\n                    return __generator(this, function (_a) {\n                        if (handle) {\n                            handle.unsubscribe();\n                        }\n                        return [2 /*return*/];\n                    });\n                }); }, 'datastore observequery cleaner');\n            });\n        };\n        this.configure = function (config) {\n            if (config === void 0) { config = {}; }\n            _this.amplifyContext.Auth = _this.Auth;\n            _this.amplifyContext.API = _this.API;\n            _this.amplifyContext.Cache = _this.Cache;\n            var configDataStore = config.DataStore, configAuthModeStrategyType = config.authModeStrategyType, configConflictHandler = config.conflictHandler, configErrorHandler = config.errorHandler, configMaxRecordsToSync = config.maxRecordsToSync, configSyncPageSize = config.syncPageSize, configFullSyncInterval = config.fullSyncInterval, configSyncExpressions = config.syncExpressions, configAuthProviders = config.authProviders, configStorageAdapter = config.storageAdapter, configFromAmplify = __rest(config, [\"DataStore\", \"authModeStrategyType\", \"conflictHandler\", \"errorHandler\", \"maxRecordsToSync\", \"syncPageSize\", \"fullSyncInterval\", \"syncExpressions\", \"authProviders\", \"storageAdapter\"]);\n            _this.amplifyConfig = __assign(__assign({}, configFromAmplify), _this.amplifyConfig);\n            _this.conflictHandler = _this.setConflictHandler(config);\n            _this.errorHandler = _this.setErrorHandler(config);\n            var authModeStrategyType = (configDataStore && configDataStore.authModeStrategyType) ||\n                configAuthModeStrategyType ||\n                AuthModeStrategyType.DEFAULT;\n            switch (authModeStrategyType) {\n                case AuthModeStrategyType.MULTI_AUTH:\n                    _this.authModeStrategy = multiAuthStrategy(_this.amplifyContext);\n                    break;\n                case AuthModeStrategyType.DEFAULT:\n                    _this.authModeStrategy = defaultAuthStrategy;\n                    break;\n                default:\n                    _this.authModeStrategy = defaultAuthStrategy;\n                    break;\n            }\n            // store on config object, so that Sync, Subscription, and Mutation processors can have access\n            _this.amplifyConfig.authProviders =\n                (configDataStore && configDataStore.authProviders) || configAuthProviders;\n            _this.syncExpressions =\n                (configDataStore && configDataStore.syncExpressions) ||\n                    configSyncExpressions ||\n                    _this.syncExpressions;\n            _this.maxRecordsToSync =\n                (configDataStore && configDataStore.maxRecordsToSync) ||\n                    configMaxRecordsToSync ||\n                    _this.maxRecordsToSync ||\n                    10000;\n            // store on config object, so that Sync, Subscription, and Mutation processors can have access\n            _this.amplifyConfig.maxRecordsToSync = _this.maxRecordsToSync;\n            _this.syncPageSize =\n                (configDataStore && configDataStore.syncPageSize) ||\n                    configSyncPageSize ||\n                    _this.syncPageSize ||\n                    1000;\n            // store on config object, so that Sync, Subscription, and Mutation processors can have access\n            _this.amplifyConfig.syncPageSize = _this.syncPageSize;\n            _this.fullSyncInterval =\n                (configDataStore && configDataStore.fullSyncInterval) ||\n                    configFullSyncInterval ||\n                    _this.fullSyncInterval ||\n                    24 * 60; // 1 day\n            _this.storageAdapter =\n                (configDataStore && configDataStore.storageAdapter) ||\n                    configStorageAdapter ||\n                    _this.storageAdapter ||\n                    undefined;\n            _this.sessionId = _this.retrieveSessionId();\n        };\n    }\n    DataStore.prototype.getModuleName = function () {\n        return 'DataStore';\n    };\n    /**\n     * Builds a function to capture `BackgroundManagerNotOpenError`'s to produce friendlier,\n     * more instructive errors for customers.\n     *\n     * @param operation The name of the operation (usually a Datastore method) the customer\n     * tried to call.\n     */\n    DataStore.prototype.handleAddProcError = function (operation) {\n        var _this = this;\n        /**\n         * If the tested error is a `BackgroundManagerNotOpenError`, it will be captured\n         * and replaced with a friendlier message that instructs the App Developer.\n         *\n         * @param err An error to test.\n         */\n        var handler = function (err) {\n            if (err.message.startsWith('BackgroundManagerNotOpenError')) {\n                throw new Error([\n                    \"DataStoreStateError: Tried to execute `\" + operation + \"` while DataStore was \\\"\" + _this.state + \"\\\".\",\n                    \"This can only be done while DataStore is \\\"Started\\\" or \\\"Stopped\\\". To remedy:\",\n                    'Ensure all calls to `stop()` and `clear()` have completed first.',\n                    'If this is not possible, retry the operation until it succeeds.',\n                ].join('\\n'));\n            }\n            else {\n                throw err;\n            }\n        };\n        return handler;\n    };\n    /**\n     * Clears all data from storage and removes all data, schema info, other\n     * initialization details, and then stops DataStore.\n     *\n     * That said, reinitialization is required after clearing. This can be done\n     * by explicitiliy calling `start()` or any method that implicitly starts\n     * DataStore, such as `query()`, `save()`, or `delete()`.\n     */\n    DataStore.prototype.clear = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        checkSchemaInitialized();\n                        this.state = DataStoreState.Clearing;\n                        return [4 /*yield*/, this.runningProcesses.close()];\n                    case 1:\n                        _a.sent();\n                        if (!(this.storage === undefined)) return [3 /*break*/, 3];\n                        // connect to storage so that it can be cleared without fully starting DataStore\n                        this.storage = new Storage(schema, namespaceResolver, getModelConstructorByModelName, modelInstanceCreator, this.storageAdapter, this.sessionId);\n                        return [4 /*yield*/, this.storage.init()];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3:\n                        if (syncSubscription && !syncSubscription.closed) {\n                            syncSubscription.unsubscribe();\n                        }\n                        if (!this.sync) return [3 /*break*/, 5];\n                        return [4 /*yield*/, this.sync.stop()];\n                    case 4:\n                        _a.sent();\n                        _a.label = 5;\n                    case 5: return [4 /*yield*/, this.storage.clear()];\n                    case 6:\n                        _a.sent();\n                        this.initialized = undefined; // Should re-initialize when start() is called.\n                        this.storage = undefined;\n                        this.sync = undefined;\n                        this.syncPredicates = new WeakMap();\n                        return [4 /*yield*/, this.runningProcesses.open()];\n                    case 7:\n                        _a.sent();\n                        this.state = DataStoreState.NotRunning;\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Stops all DataStore sync activities.\n     *\n     * TODO: \"Waits for graceful termination of\n     * running queries and terminates subscriptions.\"\n     */\n    DataStore.prototype.stop = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this.state = DataStoreState.Stopping;\n                        return [4 /*yield*/, this.runningProcesses.close()];\n                    case 1:\n                        _a.sent();\n                        if (syncSubscription && !syncSubscription.closed) {\n                            syncSubscription.unsubscribe();\n                        }\n                        if (!this.sync) return [3 /*break*/, 3];\n                        return [4 /*yield*/, this.sync.stop()];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3:\n                        this.initialized = undefined; // Should re-initialize when start() is called.\n                        this.sync = undefined;\n                        return [4 /*yield*/, this.runningProcesses.open()];\n                    case 4:\n                        _a.sent();\n                        this.state = DataStoreState.NotRunning;\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Validates given pagination input from a query and creates a pagination\n     * argument for use against the storage layer.\n     *\n     * @param modelDefinition\n     * @param paginationProducer\n     */\n    DataStore.prototype.processPagination = function (modelDefinition, paginationProducer) {\n        var sortPredicate;\n        var _a = paginationProducer || {}, limit = _a.limit, page = _a.page, sort = _a.sort;\n        if (limit === undefined && page === undefined && sort === undefined) {\n            return undefined;\n        }\n        if (page !== undefined && limit === undefined) {\n            throw new Error('Limit is required when requesting a page');\n        }\n        if (page !== undefined) {\n            if (typeof page !== 'number') {\n                throw new Error('Page should be a number');\n            }\n            if (page < 0) {\n                throw new Error(\"Page can't be negative\");\n            }\n        }\n        if (limit !== undefined) {\n            if (typeof limit !== 'number') {\n                throw new Error('Limit should be a number');\n            }\n            if (limit < 0) {\n                throw new Error(\"Limit can't be negative\");\n            }\n        }\n        if (sort) {\n            sortPredicate = ModelSortPredicateCreator.createFromExisting(modelDefinition, paginationProducer.sort);\n        }\n        return {\n            limit: limit,\n            page: page,\n            sort: sortPredicate,\n        };\n    };\n    /**\n     * Examines the configured `syncExpressions` and produces a WeakMap of\n     * SchemaModel -> predicate to use during sync.\n     */\n    DataStore.prototype.processSyncExpressions = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var syncPredicates;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.syncExpressions || !this.syncExpressions.length) {\n                            return [2 /*return*/, new WeakMap()];\n                        }\n                        return [4 /*yield*/, Promise.all(this.syncExpressions.map(function (syncExpression) { return __awaiter(_this, void 0, void 0, function () {\n                                var _a, modelConstructor, conditionProducer, modelDefinition, condition, predicate;\n                                return __generator(this, function (_b) {\n                                    switch (_b.label) {\n                                        case 0: return [4 /*yield*/, syncExpression];\n                                        case 1:\n                                            _a = _b.sent(), modelConstructor = _a.modelConstructor, conditionProducer = _a.conditionProducer;\n                                            modelDefinition = getModelDefinition(modelConstructor);\n                                            return [4 /*yield*/, this.unwrapPromise(conditionProducer)];\n                                        case 2:\n                                            condition = _b.sent();\n                                            if (isPredicatesAll(condition)) {\n                                                return [2 /*return*/, [modelDefinition, null]];\n                                            }\n                                            predicate = this.createFromCondition(modelDefinition, condition);\n                                            return [2 /*return*/, [modelDefinition, predicate]];\n                                    }\n                                });\n                            }); }))];\n                    case 1:\n                        syncPredicates = _a.sent();\n                        return [2 /*return*/, this.weakMapFromEntries(syncPredicates)];\n                }\n            });\n        });\n    };\n    DataStore.prototype.createFromCondition = function (modelDefinition, condition) {\n        try {\n            return ModelPredicateCreator.createFromExisting(modelDefinition, condition);\n        }\n        catch (error) {\n            logger.error('Error creating Sync Predicate');\n            throw error;\n        }\n    };\n    DataStore.prototype.unwrapPromise = function (conditionProducer) {\n        return __awaiter(this, void 0, void 0, function () {\n            var condition, error_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, conditionProducer()];\n                    case 1:\n                        condition = _a.sent();\n                        return [2 /*return*/, condition];\n                    case 2:\n                        error_1 = _a.sent();\n                        if (error_1 instanceof TypeError) {\n                            return [2 /*return*/, conditionProducer];\n                        }\n                        throw error_1;\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    DataStore.prototype.weakMapFromEntries = function (entries) {\n        return entries.reduce(function (map, _a) {\n            var _b = __read(_a, 2), modelDefinition = _b[0], predicate = _b[1];\n            if (map.has(modelDefinition)) {\n                var name_2 = modelDefinition.name;\n                logger.warn(\"You can only utilize one Sync Expression per model.\\n          Subsequent sync expressions for the \" + name_2 + \" model will be ignored.\");\n                return map;\n            }\n            if (predicate) {\n                map.set(modelDefinition, predicate);\n            }\n            return map;\n        }, new WeakMap());\n    };\n    /**\n     * A session ID to allow CMS to open databases against multiple apps.\n     * This session ID is only expected be set by AWS Amplify Studio.\n     */\n    DataStore.prototype.retrieveSessionId = function () {\n        try {\n            var sessionId = sessionStorage.getItem('datastoreSessionId');\n            if (sessionId) {\n                var aws_appsync_graphqlEndpoint = this.amplifyConfig.aws_appsync_graphqlEndpoint;\n                var appSyncUrl = aws_appsync_graphqlEndpoint.split('/')[2];\n                var _a = __read(appSyncUrl.split('.'), 1), appSyncId = _a[0];\n                return sessionId + \"-\" + appSyncId;\n            }\n        }\n        catch (_b) { }\n        return undefined;\n    };\n    return DataStore;\n}());\nvar instance = new DataStore();\nAmplify.register(instance);\nexport { DataStore as DataStoreClass, initSchema, instance as DataStore };\n//# sourceMappingURL=datastore.js.map"]},"metadata":{},"sourceType":"module"}