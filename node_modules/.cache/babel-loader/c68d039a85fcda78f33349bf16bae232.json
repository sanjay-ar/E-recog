{"ast":null,"code":"import { createAsyncThunk, createEntityAdapter, createSelector, createSlice } from \"@reduxjs/toolkit\";\nimport { AudienceFaceExpression } from \"../models\";\nimport { DataStore } from \"aws-amplify\";\nimport last from \"lodash-es/last\";\nexport const addFaceExpressionScore = createAsyncThunk(\"audienceFaceExpressions/addScore\", async data => {\n  return await DataStore.save(new AudienceFaceExpression({\n    score: data.score,\n    meetingID: data.meetingID,\n    ...data.raw,\n    timestamp: Date.now()\n  }));\n});\nconst audienceFaceExpressionAdapter = createEntityAdapter({\n  sortComparer: (a, b) => a.timestamp - b.timestamp\n});\nconst initialState = audienceFaceExpressionAdapter.getInitialState();\nexport const audienceFaceExpressionSlice = createSlice({\n  name: \"audienceFaceExpressions\",\n  initialState,\n  reducers: {\n    fetchAudienceFaceExpressions: audienceFaceExpressionAdapter.upsertMany,\n    deleteAudienceFaceExpressions: audienceFaceExpressionAdapter.removeMany\n  },\n  extraReducers: builder => {\n    builder.addCase(addFaceExpressionScore.fulfilled, audienceFaceExpressionAdapter.upsertOne);\n  }\n});\nexport const {\n  fetchAudienceFaceExpressions,\n  deleteAudienceFaceExpressions\n} = audienceFaceExpressionSlice.actions;\nexport const {\n  selectAll: selectAllAudienceFaceExpressions\n} = audienceFaceExpressionAdapter.getSelectors(state => state.audienceFaceExpressions);\nexport const selectActiveMeetingAudienceFaceExpressions = createSelector([state => state.meetings.activeMeeting, selectAllAudienceFaceExpressions], (activeMeetingId, expressions) => expressions.filter(e => e.meetingID === activeMeetingId) || []);\nexport const selectActiveMeetingAudienceFaceExpressionsCurrentScore = createSelector(selectActiveMeetingAudienceFaceExpressions, expressions => last(expressions));\nexport default audienceFaceExpressionSlice.reducer;","map":{"version":3,"sources":["/Users/sanjayar/Desktop/moody-main/src/meetings/audienceFaceExpressionSlice.ts"],"names":["createAsyncThunk","createEntityAdapter","createSelector","createSlice","AudienceFaceExpression","DataStore","last","addFaceExpressionScore","data","save","score","meetingID","raw","timestamp","Date","now","audienceFaceExpressionAdapter","sortComparer","a","b","initialState","getInitialState","audienceFaceExpressionSlice","name","reducers","fetchAudienceFaceExpressions","upsertMany","deleteAudienceFaceExpressions","removeMany","extraReducers","builder","addCase","fulfilled","upsertOne","actions","selectAll","selectAllAudienceFaceExpressions","getSelectors","state","audienceFaceExpressions","selectActiveMeetingAudienceFaceExpressions","meetings","activeMeeting","activeMeetingId","expressions","filter","e","selectActiveMeetingAudienceFaceExpressionsCurrentScore","reducer"],"mappings":"AAAA,SACEA,gBADF,EAEEC,mBAFF,EAGEC,cAHF,EAIEC,WAJF,QAKO,kBALP;AAMA,SAASC,sBAAT,QAAuC,WAAvC;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,OAAOC,IAAP,MAAiB,gBAAjB;AAGA,OAAO,MAAMC,sBAAsB,GAAGP,gBAAgB,CACpD,kCADoD,EAEpD,MAAOQ,IAAP,IAIM;AACJ,SAAQ,MAAMH,SAAS,CAACI,IAAV,CACZ,IAAIL,sBAAJ,CAA2B;AACzBM,IAAAA,KAAK,EAAEF,IAAI,CAACE,KADa;AAEzBC,IAAAA,SAAS,EAAEH,IAAI,CAACG,SAFS;AAGzB,OAAGH,IAAI,CAACI,GAHiB;AAIzBC,IAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL;AAJc,GAA3B,CADY,CAAd;AAQD,CAfmD,CAA/C;AAkBP,MAAMC,6BAA6B,GACjCf,mBAAmB,CAAyB;AAC1CgB,EAAAA,YAAY,EAAE,CAACC,CAAD,EAA4BC,CAA5B,KACZD,CAAC,CAACL,SAAF,GAAcM,CAAC,CAACN;AAFwB,CAAzB,CADrB;AAKA,MAAMO,YAAY,GAAGJ,6BAA6B,CAACK,eAA9B,EAArB;AAEA,OAAO,MAAMC,2BAA2B,GAAGnB,WAAW,CAAC;AACrDoB,EAAAA,IAAI,EAAE,yBAD+C;AAErDH,EAAAA,YAFqD;AAGrDI,EAAAA,QAAQ,EAAE;AACRC,IAAAA,4BAA4B,EAAET,6BAA6B,CAACU,UADpD;AAERC,IAAAA,6BAA6B,EAAEX,6BAA6B,CAACY;AAFrD,GAH2C;AAOrDC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CAACC,OAAR,CACExB,sBAAsB,CAACyB,SADzB,EAEEhB,6BAA6B,CAACiB,SAFhC;AAID;AAZoD,CAAD,CAA/C;AAeP,OAAO,MAAM;AAAER,EAAAA,4BAAF;AAAgCE,EAAAA;AAAhC,IACXL,2BAA2B,CAACY,OADvB;AAGP,OAAO,MAAM;AAAEC,EAAAA,SAAS,EAAEC;AAAb,IACXpB,6BAA6B,CAACqB,YAA9B,CACGC,KAAD,IAAsBA,KAAK,CAACC,uBAD9B,CADK;AAKP,OAAO,MAAMC,0CAA0C,GAAGtC,cAAc,CACtE,CACGoC,KAAD,IAAsBA,KAAK,CAACG,QAAN,CAAeC,aADvC,EAEEN,gCAFF,CADsE,EAKtE,CAACO,eAAD,EAAiCC,WAAjC,KACEA,WAAW,CAACC,MAAZ,CAAoBC,CAAD,IAAOA,CAAC,CAACnC,SAAF,KAAgBgC,eAA1C,KAA8D,EANM,CAAjE;AASP,OAAO,MAAMI,sDAAsD,GACjE7C,cAAc,CAACsC,0CAAD,EAA8CI,WAAD,IACzDtC,IAAI,CAACsC,WAAD,CADQ,CADT;AAKP,eAAetB,2BAA2B,CAAC0B,OAA3C","sourcesContent":["import {\n  createAsyncThunk,\n  createEntityAdapter,\n  createSelector,\n  createSlice,\n} from \"@reduxjs/toolkit\";\nimport { AudienceFaceExpression } from \"../models\";\nimport { DataStore } from \"aws-amplify\";\nimport { RootState } from \"../reduxStore\";\nimport last from \"lodash-es/last\";\nimport { PaulEkmanEmotion } from \"./audienceFaceExpressionUtils\";\n\nexport const addFaceExpressionScore = createAsyncThunk(\n  \"audienceFaceExpressions/addScore\",\n  async (data: {\n    score: number;\n    meetingID: string;\n    raw?: PaulEkmanEmotion;\n  }) => {\n    return (await DataStore.save(\n      new AudienceFaceExpression({\n        score: data.score,\n        meetingID: data.meetingID,\n        ...data.raw,\n        timestamp: Date.now(),\n      })\n    )) as AudienceFaceExpression;\n  }\n);\n\nconst audienceFaceExpressionAdapter =\n  createEntityAdapter<AudienceFaceExpression>({\n    sortComparer: (a: AudienceFaceExpression, b: AudienceFaceExpression) =>\n      a.timestamp - b.timestamp,\n  });\nconst initialState = audienceFaceExpressionAdapter.getInitialState();\n\nexport const audienceFaceExpressionSlice = createSlice({\n  name: \"audienceFaceExpressions\",\n  initialState,\n  reducers: {\n    fetchAudienceFaceExpressions: audienceFaceExpressionAdapter.upsertMany,\n    deleteAudienceFaceExpressions: audienceFaceExpressionAdapter.removeMany,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(\n      addFaceExpressionScore.fulfilled,\n      audienceFaceExpressionAdapter.upsertOne\n    );\n  },\n});\n\nexport const { fetchAudienceFaceExpressions, deleteAudienceFaceExpressions } =\n  audienceFaceExpressionSlice.actions;\n\nexport const { selectAll: selectAllAudienceFaceExpressions } =\n  audienceFaceExpressionAdapter.getSelectors(\n    (state: RootState) => state.audienceFaceExpressions\n  );\n\nexport const selectActiveMeetingAudienceFaceExpressions = createSelector(\n  [\n    (state: RootState) => state.meetings.activeMeeting,\n    selectAllAudienceFaceExpressions,\n  ],\n  (activeMeetingId: string | null, expressions: AudienceFaceExpression[]) =>\n    expressions.filter((e) => e.meetingID === activeMeetingId) || []\n);\n\nexport const selectActiveMeetingAudienceFaceExpressionsCurrentScore =\n  createSelector(selectActiveMeetingAudienceFaceExpressions, (expressions) =>\n    last(expressions)\n  );\n\nexport default audienceFaceExpressionSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}