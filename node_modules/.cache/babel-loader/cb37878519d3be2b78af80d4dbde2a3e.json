{"ast":null,"code":"import * as faceapi from \"face-api.js\";\nexport default class FaceRecognitionService {\n  constructor(video) {\n    this.video = video;\n  }\n\n  async loadModel() {\n    await faceapi.loadSsdMobilenetv1Model(\"/\");\n    await faceapi.loadFaceExpressionModel(\"/\");\n  }\n\n  async detectAllFaces() {\n    return faceapi.detectAllFaces(this.video, new faceapi.SsdMobilenetv1Options()).withFaceExpressions();\n  }\n\n  drawDetections(detections, canvas) {\n    if (!canvas) {\n      return console.info(\"No canvas to draw into is registered. Ignoring method call.\");\n    }\n\n    canvas.width = this.video.width;\n    canvas.height = this.video.height;\n    const detectionsForSize = faceapi.resizeResults(detections, {\n      width: canvas.width,\n      height: canvas.height\n    });\n    const ctx = canvas.getContext(\"2d\");\n    ctx === null || ctx === void 0 ? void 0 : ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx === null || ctx === void 0 ? void 0 : ctx.drawImage(this.video, 0, 0, canvas.width, canvas.height);\n    faceapi.draw.drawDetections(canvas, detectionsForSize);\n    faceapi.draw.drawFaceExpressions(canvas, detectionsForSize);\n  }\n\n}","map":{"version":3,"sources":["/Users/sanjayar/Desktop/moody-main copy/src/meetings/FaceRecognitionService.ts"],"names":["faceapi","FaceRecognitionService","constructor","video","loadModel","loadSsdMobilenetv1Model","loadFaceExpressionModel","detectAllFaces","SsdMobilenetv1Options","withFaceExpressions","drawDetections","detections","canvas","console","info","width","height","detectionsForSize","resizeResults","ctx","getContext","clearRect","drawImage","draw","drawFaceExpressions"],"mappings":"AAAA,OAAO,KAAKA,OAAZ,MAAyB,aAAzB;AAOA,eAAe,MAAMC,sBAAN,CAA6B;AAC1CC,EAAAA,WAAW,CAAkBC,KAAlB,EAA2C;AAAA,SAAzBA,KAAyB,GAAzBA,KAAyB;AAAE;;AAElC,QAATC,SAAS,GAAG;AACvB,UAAMJ,OAAO,CAACK,uBAAR,CAAgC,GAAhC,CAAN;AACA,UAAML,OAAO,CAACM,uBAAR,CAAgC,GAAhC,CAAN;AACD;;AAE0B,QAAdC,cAAc,GAKzB;AACA,WAAOP,OAAO,CACXO,cADI,CACW,KAAKJ,KADhB,EACuB,IAAIH,OAAO,CAACQ,qBAAZ,EADvB,EAEJC,mBAFI,EAAP;AAGD;;AAEMC,EAAAA,cAAc,CACnBC,UADmB,EAKnBC,MALmB,EAMb;AACN,QAAI,CAACA,MAAL,EAAa;AACX,aAAOC,OAAO,CAACC,IAAR,CACL,6DADK,CAAP;AAGD;;AAEDF,IAAAA,MAAM,CAACG,KAAP,GAAe,KAAKZ,KAAL,CAAWY,KAA1B;AACAH,IAAAA,MAAM,CAACI,MAAP,GAAgB,KAAKb,KAAL,CAAWa,MAA3B;AAEA,UAAMC,iBAAiB,GAAGjB,OAAO,CAACkB,aAAR,CAAsBP,UAAtB,EAAkC;AAC1DI,MAAAA,KAAK,EAAEH,MAAM,CAACG,KAD4C;AAE1DC,MAAAA,MAAM,EAAEJ,MAAM,CAACI;AAF2C,KAAlC,CAA1B;AAKA,UAAMG,GAAG,GAAGP,MAAM,CAACQ,UAAP,CAAkB,IAAlB,CAAZ;AACAD,IAAAA,GAAG,SAAH,IAAAA,GAAG,WAAH,YAAAA,GAAG,CAAEE,SAAL,CAAe,CAAf,EAAkB,CAAlB,EAAqBT,MAAM,CAACG,KAA5B,EAAmCH,MAAM,CAACI,MAA1C;AAEAG,IAAAA,GAAG,SAAH,IAAAA,GAAG,WAAH,YAAAA,GAAG,CAAEG,SAAL,CAAe,KAAKnB,KAApB,EAA2B,CAA3B,EAA8B,CAA9B,EAAiCS,MAAM,CAACG,KAAxC,EAA+CH,MAAM,CAACI,MAAtD;AACAhB,IAAAA,OAAO,CAACuB,IAAR,CAAab,cAAb,CAA4BE,MAA5B,EAAoCK,iBAApC;AACAjB,IAAAA,OAAO,CAACuB,IAAR,CAAaC,mBAAb,CAAiCZ,MAAjC,EAAyCK,iBAAzC;AACD;;AA9CyC","sourcesContent":["import * as faceapi from \"face-api.js\";\nimport {\n  FaceDetection,\n  FaceExpressions,\n  WithFaceExpressions,\n} from \"face-api.js\";\n\nexport default class FaceRecognitionService {\n  constructor(private readonly video: HTMLVideoElement) {}\n\n  public async loadModel() {\n    await faceapi.loadSsdMobilenetv1Model(\"/\");\n    await faceapi.loadFaceExpressionModel(\"/\");\n  }\n\n  public async detectAllFaces(): Promise<\n    WithFaceExpressions<{\n      detection: FaceDetection;\n      expressions: FaceExpressions;\n    }>[]\n  > {\n    return faceapi\n      .detectAllFaces(this.video, new faceapi.SsdMobilenetv1Options())\n      .withFaceExpressions();\n  }\n\n  public drawDetections(\n    detections: WithFaceExpressions<{\n      detection: FaceDetection;\n      expressions: FaceExpressions;\n    }>[],\n    canvas?: HTMLCanvasElement | null\n  ): void {\n    if (!canvas) {\n      return console.info(\n        \"No canvas to draw into is registered. Ignoring method call.\"\n      );\n    }\n\n    canvas.width = this.video.width;\n    canvas.height = this.video.height;\n\n    const detectionsForSize = faceapi.resizeResults(detections, {\n      width: canvas.width,\n      height: canvas.height,\n    });\n\n    const ctx = canvas.getContext(\"2d\");\n    ctx?.clearRect(0, 0, canvas.width, canvas.height);\n\n    ctx?.drawImage(this.video, 0, 0, canvas.width, canvas.height);\n    faceapi.draw.drawDetections(canvas, detectionsForSize);\n    faceapi.draw.drawFaceExpressions(canvas, detectionsForSize);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}