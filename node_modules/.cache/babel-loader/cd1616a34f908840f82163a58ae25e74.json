{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { Amplify, ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { AWSLexProvider } from './Providers';\nvar logger = new Logger('Interactions');\n\nvar InteractionsClass =\n/** @class */\nfunction () {\n  /**\n   * Initialize PubSub with AWS configurations\n   *\n   * @param {InteractionsOptions} options - Configuration object for Interactions\n   */\n  function InteractionsClass(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this._options = options;\n    logger.debug('Interactions Options', this._options);\n    this._pluggables = {};\n  }\n\n  InteractionsClass.prototype.getModuleName = function () {\n    return 'Interactions';\n  };\n  /**\n   *\n   * @param {InteractionsOptions} options - Configuration object for Interactions\n   * @return {InteractionsOptions} - The current configuration\n   */\n\n\n  InteractionsClass.prototype.configure = function (options) {\n    var _this = this;\n\n    var opt = options ? options.Interactions || options : {};\n    logger.debug('configure Interactions', {\n      opt: opt\n    });\n    this._options = __assign(__assign({\n      bots: {}\n    }, opt), opt.Interactions);\n    var aws_bots_config = this._options.aws_bots_config;\n    var bots_config = this._options.bots;\n\n    if (!Object.keys(bots_config).length && aws_bots_config) {\n      // Convert aws_bots_config to bots object\n      if (Array.isArray(aws_bots_config)) {\n        aws_bots_config.forEach(function (bot) {\n          _this._options.bots[bot.name] = bot;\n        });\n      }\n    } // configure bots to their specific providers\n\n\n    Object.keys(bots_config).forEach(function (botKey) {\n      var _a;\n\n      var bot = bots_config[botKey];\n      var providerName = bot.providerName || 'AWSLexProvider'; // add default provider if required\n\n      if (!_this._pluggables.AWSLexProvider && providerName === 'AWSLexProvider') {\n        _this._pluggables.AWSLexProvider = new AWSLexProvider();\n      } // configure bot with it's respective provider\n\n\n      if (_this._pluggables[providerName]) {\n        _this._pluggables[providerName].configure((_a = {}, _a[bot.name] = bot, _a));\n      } else {\n        logger.debug(\"bot \" + bot.name + \" was not configured as \" + providerName + \" provider was not found\");\n      }\n    });\n    return this._options;\n  };\n\n  InteractionsClass.prototype.addPluggable = function (pluggable) {\n    var _this = this;\n\n    if (pluggable && pluggable.getCategory() === 'Interactions') {\n      if (!this._pluggables[pluggable.getProviderName()]) {\n        // configure bots for the new plugin\n        Object.keys(this._options.bots).filter(function (botKey) {\n          return _this._options.bots[botKey].providerName === pluggable.getProviderName();\n        }).forEach(function (botKey) {\n          var _a;\n\n          var bot = _this._options.bots[botKey];\n          pluggable.configure((_a = {}, _a[bot.name] = bot, _a));\n        });\n        this._pluggables[pluggable.getProviderName()] = pluggable;\n        return;\n      } else {\n        throw new Error('Pluggable ' + pluggable.getProviderName() + ' already plugged');\n      }\n    }\n  };\n\n  InteractionsClass.prototype.send = function (botname, message) {\n    return __awaiter(this, void 0, void 0, function () {\n      var botProvider;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this._options.bots || !this._options.bots[botname]) {\n              return [2\n              /*return*/\n              , Promise.reject('Bot ' + botname + ' does not exist')];\n            }\n\n            botProvider = this._options.bots[botname].providerName || 'AWSLexProvider';\n\n            if (!this._pluggables[botProvider]) {\n              return [2\n              /*return*/\n              , Promise.reject('Bot ' + botProvider + ' does not have valid pluggin did you try addPluggable first?')];\n            }\n\n            return [4\n            /*yield*/\n            , this._pluggables[botProvider].sendMessage(botname, message)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  InteractionsClass.prototype.onComplete = function (botname, callback) {\n    if (!this._options.bots || !this._options.bots[botname]) {\n      throw new Error('Bot ' + botname + ' does not exist');\n    }\n\n    var botProvider = this._options.bots[botname].providerName || 'AWSLexProvider';\n\n    if (!this._pluggables[botProvider]) {\n      throw new Error('Bot ' + botProvider + ' does not have valid pluggin did you try addPluggable first?');\n    }\n\n    this._pluggables[botProvider].onComplete(botname, callback);\n  };\n\n  return InteractionsClass;\n}();\n\nexport { InteractionsClass };\nexport var Interactions = new InteractionsClass();\nAmplify.register(Interactions);","map":{"version":3,"sources":["../src/Interactions.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { Amplify, ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { AWSLexProvider } from './Providers';\nvar logger = new Logger('Interactions');\nvar InteractionsClass = /** @class */ (function () {\n    /**\n     * Initialize PubSub with AWS configurations\n     *\n     * @param {InteractionsOptions} options - Configuration object for Interactions\n     */\n    function InteractionsClass(options) {\n        if (options === void 0) { options = {}; }\n        this._options = options;\n        logger.debug('Interactions Options', this._options);\n        this._pluggables = {};\n    }\n    InteractionsClass.prototype.getModuleName = function () {\n        return 'Interactions';\n    };\n    /**\n     *\n     * @param {InteractionsOptions} options - Configuration object for Interactions\n     * @return {InteractionsOptions} - The current configuration\n     */\n    InteractionsClass.prototype.configure = function (options) {\n        var _this = this;\n        var opt = options ? options.Interactions || options : {};\n        logger.debug('configure Interactions', { opt: opt });\n        this._options = __assign(__assign({ bots: {} }, opt), opt.Interactions);\n        var aws_bots_config = this._options.aws_bots_config;\n        var bots_config = this._options.bots;\n        if (!Object.keys(bots_config).length && aws_bots_config) {\n            // Convert aws_bots_config to bots object\n            if (Array.isArray(aws_bots_config)) {\n                aws_bots_config.forEach(function (bot) {\n                    _this._options.bots[bot.name] = bot;\n                });\n            }\n        }\n        // configure bots to their specific providers\n        Object.keys(bots_config).forEach(function (botKey) {\n            var _a;\n            var bot = bots_config[botKey];\n            var providerName = bot.providerName || 'AWSLexProvider';\n            // add default provider if required\n            if (!_this._pluggables.AWSLexProvider &&\n                providerName === 'AWSLexProvider') {\n                _this._pluggables.AWSLexProvider = new AWSLexProvider();\n            }\n            // configure bot with it's respective provider\n            if (_this._pluggables[providerName]) {\n                _this._pluggables[providerName].configure((_a = {}, _a[bot.name] = bot, _a));\n            }\n            else {\n                logger.debug(\"bot \" + bot.name + \" was not configured as \" + providerName + \" provider was not found\");\n            }\n        });\n        return this._options;\n    };\n    InteractionsClass.prototype.addPluggable = function (pluggable) {\n        var _this = this;\n        if (pluggable && pluggable.getCategory() === 'Interactions') {\n            if (!this._pluggables[pluggable.getProviderName()]) {\n                // configure bots for the new plugin\n                Object.keys(this._options.bots)\n                    .filter(function (botKey) {\n                    return _this._options.bots[botKey].providerName ===\n                        pluggable.getProviderName();\n                })\n                    .forEach(function (botKey) {\n                    var _a;\n                    var bot = _this._options.bots[botKey];\n                    pluggable.configure((_a = {}, _a[bot.name] = bot, _a));\n                });\n                this._pluggables[pluggable.getProviderName()] = pluggable;\n                return;\n            }\n            else {\n                throw new Error('Pluggable ' + pluggable.getProviderName() + ' already plugged');\n            }\n        }\n    };\n    InteractionsClass.prototype.send = function (botname, message) {\n        return __awaiter(this, void 0, void 0, function () {\n            var botProvider;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this._options.bots || !this._options.bots[botname]) {\n                            return [2 /*return*/, Promise.reject('Bot ' + botname + ' does not exist')];\n                        }\n                        botProvider = this._options.bots[botname].providerName || 'AWSLexProvider';\n                        if (!this._pluggables[botProvider]) {\n                            return [2 /*return*/, Promise.reject('Bot ' +\n                                    botProvider +\n                                    ' does not have valid pluggin did you try addPluggable first?')];\n                        }\n                        return [4 /*yield*/, this._pluggables[botProvider].sendMessage(botname, message)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    InteractionsClass.prototype.onComplete = function (botname, callback) {\n        if (!this._options.bots || !this._options.bots[botname]) {\n            throw new Error('Bot ' + botname + ' does not exist');\n        }\n        var botProvider = this._options.bots[botname].providerName || 'AWSLexProvider';\n        if (!this._pluggables[botProvider]) {\n            throw new Error('Bot ' +\n                botProvider +\n                ' does not have valid pluggin did you try addPluggable first?');\n        }\n        this._pluggables[botProvider].onComplete(botname, callback);\n    };\n    return InteractionsClass;\n}());\nexport { InteractionsClass };\nexport var Interactions = new InteractionsClass();\nAmplify.register(Interactions);\n//# sourceMappingURL=Interactions.js.map"]},"metadata":{},"sourceType":"module"}