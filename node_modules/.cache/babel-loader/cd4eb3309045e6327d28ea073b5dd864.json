{"ast":null,"code":"import { __read } from \"tslib\";\nexport var parseBoolean = function (value) {\n  switch (value) {\n    case \"true\":\n      return true;\n\n    case \"false\":\n      return false;\n\n    default:\n      throw new Error(\"Unable to parse boolean value \\\"\".concat(value, \"\\\"\"));\n  }\n};\nexport var expectBoolean = function (value) {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n\n  if (typeof value === \"number\") {\n    if (value === 0 || value === 1) {\n      logger.warn(stackTraceWarning(\"Expected boolean, got \".concat(typeof value, \": \").concat(value)));\n    }\n\n    if (value === 0) {\n      return false;\n    }\n\n    if (value === 1) {\n      return true;\n    }\n  }\n\n  if (typeof value === \"string\") {\n    var lower = value.toLowerCase();\n\n    if (lower === \"false\" || lower === \"true\") {\n      logger.warn(stackTraceWarning(\"Expected boolean, got \".concat(typeof value, \": \").concat(value)));\n    }\n\n    if (lower === \"false\") {\n      return false;\n    }\n\n    if (lower === \"true\") {\n      return true;\n    }\n  }\n\n  if (typeof value === \"boolean\") {\n    return value;\n  }\n\n  throw new TypeError(\"Expected boolean, got \".concat(typeof value, \": \").concat(value));\n};\nexport var expectNumber = function (value) {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n\n  if (typeof value === \"string\") {\n    var parsed = parseFloat(value);\n\n    if (!Number.isNaN(parsed)) {\n      if (String(parsed) !== String(value)) {\n        logger.warn(stackTraceWarning(\"Expected number but observed string: \".concat(value)));\n      }\n\n      return parsed;\n    }\n  }\n\n  if (typeof value === \"number\") {\n    return value;\n  }\n\n  throw new TypeError(\"Expected number, got \".concat(typeof value, \": \").concat(value));\n};\nvar MAX_FLOAT = Math.ceil(Math.pow(2, 127) * (2 - Math.pow(2, -23)));\nexport var expectFloat32 = function (value) {\n  var expected = expectNumber(value);\n\n  if (expected !== undefined && !Number.isNaN(expected) && expected !== Infinity && expected !== -Infinity) {\n    if (Math.abs(expected) > MAX_FLOAT) {\n      throw new TypeError(\"Expected 32-bit float, got \".concat(value));\n    }\n  }\n\n  return expected;\n};\nexport var expectLong = function (value) {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n\n  if (Number.isInteger(value) && !Number.isNaN(value)) {\n    return value;\n  }\n\n  throw new TypeError(\"Expected integer, got \".concat(typeof value, \": \").concat(value));\n};\nexport var expectInt = expectLong;\nexport var expectInt32 = function (value) {\n  return expectSizedInt(value, 32);\n};\nexport var expectShort = function (value) {\n  return expectSizedInt(value, 16);\n};\nexport var expectByte = function (value) {\n  return expectSizedInt(value, 8);\n};\n\nvar expectSizedInt = function (value, size) {\n  var expected = expectLong(value);\n\n  if (expected !== undefined && castInt(expected, size) !== expected) {\n    throw new TypeError(\"Expected \".concat(size, \"-bit integer, got \").concat(value));\n  }\n\n  return expected;\n};\n\nvar castInt = function (value, size) {\n  switch (size) {\n    case 32:\n      return Int32Array.of(value)[0];\n\n    case 16:\n      return Int16Array.of(value)[0];\n\n    case 8:\n      return Int8Array.of(value)[0];\n  }\n};\n\nexport var expectNonNull = function (value, location) {\n  if (value === null || value === undefined) {\n    if (location) {\n      throw new TypeError(\"Expected a non-null value for \".concat(location));\n    }\n\n    throw new TypeError(\"Expected a non-null value\");\n  }\n\n  return value;\n};\nexport var expectObject = function (value) {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n\n  if (typeof value === \"object\" && !Array.isArray(value)) {\n    return value;\n  }\n\n  var receivedType = Array.isArray(value) ? \"array\" : typeof value;\n  throw new TypeError(\"Expected object, got \".concat(receivedType, \": \").concat(value));\n};\nexport var expectString = function (value) {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n\n  if (typeof value === \"string\") {\n    return value;\n  }\n\n  if ([\"boolean\", \"number\", \"bigint\"].includes(typeof value)) {\n    logger.warn(stackTraceWarning(\"Expected string, got \".concat(typeof value, \": \").concat(value)));\n    return String(value);\n  }\n\n  throw new TypeError(\"Expected string, got \".concat(typeof value, \": \").concat(value));\n};\nexport var expectUnion = function (value) {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n\n  var asObject = expectObject(value);\n  var setKeys = Object.entries(asObject).filter(function (_a) {\n    var _b = __read(_a, 2),\n        v = _b[1];\n\n    return v != null;\n  }).map(function (_a) {\n    var _b = __read(_a, 1),\n        k = _b[0];\n\n    return k;\n  });\n\n  if (setKeys.length === 0) {\n    throw new TypeError(\"Unions must have exactly one non-null member. None were found.\");\n  }\n\n  if (setKeys.length > 1) {\n    throw new TypeError(\"Unions must have exactly one non-null member. Keys \".concat(setKeys, \" were not null.\"));\n  }\n\n  return asObject;\n};\nexport var strictParseDouble = function (value) {\n  if (typeof value == \"string\") {\n    return expectNumber(parseNumber(value));\n  }\n\n  return expectNumber(value);\n};\nexport var strictParseFloat = strictParseDouble;\nexport var strictParseFloat32 = function (value) {\n  if (typeof value == \"string\") {\n    return expectFloat32(parseNumber(value));\n  }\n\n  return expectFloat32(value);\n};\nvar NUMBER_REGEX = /(-?(?:0|[1-9]\\d*)(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)|(-?Infinity)|(NaN)/g;\n\nvar parseNumber = function (value) {\n  var matches = value.match(NUMBER_REGEX);\n\n  if (matches === null || matches[0].length !== value.length) {\n    throw new TypeError(\"Expected real number, got implicit NaN\");\n  }\n\n  return parseFloat(value);\n};\n\nexport var limitedParseDouble = function (value) {\n  if (typeof value == \"string\") {\n    return parseFloatString(value);\n  }\n\n  return expectNumber(value);\n};\nexport var handleFloat = limitedParseDouble;\nexport var limitedParseFloat = limitedParseDouble;\nexport var limitedParseFloat32 = function (value) {\n  if (typeof value == \"string\") {\n    return parseFloatString(value);\n  }\n\n  return expectFloat32(value);\n};\n\nvar parseFloatString = function (value) {\n  switch (value) {\n    case \"NaN\":\n      return NaN;\n\n    case \"Infinity\":\n      return Infinity;\n\n    case \"-Infinity\":\n      return -Infinity;\n\n    default:\n      throw new Error(\"Unable to parse float value: \".concat(value));\n  }\n};\n\nexport var strictParseLong = function (value) {\n  if (typeof value === \"string\") {\n    return expectLong(parseNumber(value));\n  }\n\n  return expectLong(value);\n};\nexport var strictParseInt = strictParseLong;\nexport var strictParseInt32 = function (value) {\n  if (typeof value === \"string\") {\n    return expectInt32(parseNumber(value));\n  }\n\n  return expectInt32(value);\n};\nexport var strictParseShort = function (value) {\n  if (typeof value === \"string\") {\n    return expectShort(parseNumber(value));\n  }\n\n  return expectShort(value);\n};\nexport var strictParseByte = function (value) {\n  if (typeof value === \"string\") {\n    return expectByte(parseNumber(value));\n  }\n\n  return expectByte(value);\n};\n\nvar stackTraceWarning = function (message) {\n  return String(new TypeError(message).stack || message).split(\"\\n\").slice(0, 5).filter(function (s) {\n    return !s.includes(\"stackTraceWarning\");\n  }).join(\"\\n\");\n};\n\nexport var logger = {\n  warn: console.warn\n};","map":{"version":3,"sources":["/Users/sanjayar/Desktop/moody-main/node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/smithy-client/dist-es/parse-utils.js"],"names":["__read","parseBoolean","value","Error","concat","expectBoolean","undefined","logger","warn","stackTraceWarning","lower","toLowerCase","TypeError","expectNumber","parsed","parseFloat","Number","isNaN","String","MAX_FLOAT","Math","ceil","pow","expectFloat32","expected","Infinity","abs","expectLong","isInteger","expectInt","expectInt32","expectSizedInt","expectShort","expectByte","size","castInt","Int32Array","of","Int16Array","Int8Array","expectNonNull","location","expectObject","Array","isArray","receivedType","expectString","includes","expectUnion","asObject","setKeys","Object","entries","filter","_a","_b","v","map","k","length","strictParseDouble","parseNumber","strictParseFloat","strictParseFloat32","NUMBER_REGEX","matches","match","limitedParseDouble","parseFloatString","handleFloat","limitedParseFloat","limitedParseFloat32","NaN","strictParseLong","strictParseInt","strictParseInt32","strictParseShort","strictParseByte","message","stack","split","slice","s","join","console"],"mappings":"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","sourcesContent":["import { __read } from \"tslib\";\nexport var parseBoolean = function (value) {\n    switch (value) {\n        case \"true\":\n            return true;\n        case \"false\":\n            return false;\n        default:\n            throw new Error(\"Unable to parse boolean value \\\"\".concat(value, \"\\\"\"));\n    }\n};\nexport var expectBoolean = function (value) {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (typeof value === \"number\") {\n        if (value === 0 || value === 1) {\n            logger.warn(stackTraceWarning(\"Expected boolean, got \".concat(typeof value, \": \").concat(value)));\n        }\n        if (value === 0) {\n            return false;\n        }\n        if (value === 1) {\n            return true;\n        }\n    }\n    if (typeof value === \"string\") {\n        var lower = value.toLowerCase();\n        if (lower === \"false\" || lower === \"true\") {\n            logger.warn(stackTraceWarning(\"Expected boolean, got \".concat(typeof value, \": \").concat(value)));\n        }\n        if (lower === \"false\") {\n            return false;\n        }\n        if (lower === \"true\") {\n            return true;\n        }\n    }\n    if (typeof value === \"boolean\") {\n        return value;\n    }\n    throw new TypeError(\"Expected boolean, got \".concat(typeof value, \": \").concat(value));\n};\nexport var expectNumber = function (value) {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (typeof value === \"string\") {\n        var parsed = parseFloat(value);\n        if (!Number.isNaN(parsed)) {\n            if (String(parsed) !== String(value)) {\n                logger.warn(stackTraceWarning(\"Expected number but observed string: \".concat(value)));\n            }\n            return parsed;\n        }\n    }\n    if (typeof value === \"number\") {\n        return value;\n    }\n    throw new TypeError(\"Expected number, got \".concat(typeof value, \": \").concat(value));\n};\nvar MAX_FLOAT = Math.ceil(Math.pow(2, 127) * (2 - Math.pow(2, -23)));\nexport var expectFloat32 = function (value) {\n    var expected = expectNumber(value);\n    if (expected !== undefined && !Number.isNaN(expected) && expected !== Infinity && expected !== -Infinity) {\n        if (Math.abs(expected) > MAX_FLOAT) {\n            throw new TypeError(\"Expected 32-bit float, got \".concat(value));\n        }\n    }\n    return expected;\n};\nexport var expectLong = function (value) {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (Number.isInteger(value) && !Number.isNaN(value)) {\n        return value;\n    }\n    throw new TypeError(\"Expected integer, got \".concat(typeof value, \": \").concat(value));\n};\nexport var expectInt = expectLong;\nexport var expectInt32 = function (value) { return expectSizedInt(value, 32); };\nexport var expectShort = function (value) { return expectSizedInt(value, 16); };\nexport var expectByte = function (value) { return expectSizedInt(value, 8); };\nvar expectSizedInt = function (value, size) {\n    var expected = expectLong(value);\n    if (expected !== undefined && castInt(expected, size) !== expected) {\n        throw new TypeError(\"Expected \".concat(size, \"-bit integer, got \").concat(value));\n    }\n    return expected;\n};\nvar castInt = function (value, size) {\n    switch (size) {\n        case 32:\n            return Int32Array.of(value)[0];\n        case 16:\n            return Int16Array.of(value)[0];\n        case 8:\n            return Int8Array.of(value)[0];\n    }\n};\nexport var expectNonNull = function (value, location) {\n    if (value === null || value === undefined) {\n        if (location) {\n            throw new TypeError(\"Expected a non-null value for \".concat(location));\n        }\n        throw new TypeError(\"Expected a non-null value\");\n    }\n    return value;\n};\nexport var expectObject = function (value) {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (typeof value === \"object\" && !Array.isArray(value)) {\n        return value;\n    }\n    var receivedType = Array.isArray(value) ? \"array\" : typeof value;\n    throw new TypeError(\"Expected object, got \".concat(receivedType, \": \").concat(value));\n};\nexport var expectString = function (value) {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (typeof value === \"string\") {\n        return value;\n    }\n    if ([\"boolean\", \"number\", \"bigint\"].includes(typeof value)) {\n        logger.warn(stackTraceWarning(\"Expected string, got \".concat(typeof value, \": \").concat(value)));\n        return String(value);\n    }\n    throw new TypeError(\"Expected string, got \".concat(typeof value, \": \").concat(value));\n};\nexport var expectUnion = function (value) {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    var asObject = expectObject(value);\n    var setKeys = Object.entries(asObject)\n        .filter(function (_a) {\n        var _b = __read(_a, 2), v = _b[1];\n        return v != null;\n    })\n        .map(function (_a) {\n        var _b = __read(_a, 1), k = _b[0];\n        return k;\n    });\n    if (setKeys.length === 0) {\n        throw new TypeError(\"Unions must have exactly one non-null member. None were found.\");\n    }\n    if (setKeys.length > 1) {\n        throw new TypeError(\"Unions must have exactly one non-null member. Keys \".concat(setKeys, \" were not null.\"));\n    }\n    return asObject;\n};\nexport var strictParseDouble = function (value) {\n    if (typeof value == \"string\") {\n        return expectNumber(parseNumber(value));\n    }\n    return expectNumber(value);\n};\nexport var strictParseFloat = strictParseDouble;\nexport var strictParseFloat32 = function (value) {\n    if (typeof value == \"string\") {\n        return expectFloat32(parseNumber(value));\n    }\n    return expectFloat32(value);\n};\nvar NUMBER_REGEX = /(-?(?:0|[1-9]\\d*)(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)|(-?Infinity)|(NaN)/g;\nvar parseNumber = function (value) {\n    var matches = value.match(NUMBER_REGEX);\n    if (matches === null || matches[0].length !== value.length) {\n        throw new TypeError(\"Expected real number, got implicit NaN\");\n    }\n    return parseFloat(value);\n};\nexport var limitedParseDouble = function (value) {\n    if (typeof value == \"string\") {\n        return parseFloatString(value);\n    }\n    return expectNumber(value);\n};\nexport var handleFloat = limitedParseDouble;\nexport var limitedParseFloat = limitedParseDouble;\nexport var limitedParseFloat32 = function (value) {\n    if (typeof value == \"string\") {\n        return parseFloatString(value);\n    }\n    return expectFloat32(value);\n};\nvar parseFloatString = function (value) {\n    switch (value) {\n        case \"NaN\":\n            return NaN;\n        case \"Infinity\":\n            return Infinity;\n        case \"-Infinity\":\n            return -Infinity;\n        default:\n            throw new Error(\"Unable to parse float value: \".concat(value));\n    }\n};\nexport var strictParseLong = function (value) {\n    if (typeof value === \"string\") {\n        return expectLong(parseNumber(value));\n    }\n    return expectLong(value);\n};\nexport var strictParseInt = strictParseLong;\nexport var strictParseInt32 = function (value) {\n    if (typeof value === \"string\") {\n        return expectInt32(parseNumber(value));\n    }\n    return expectInt32(value);\n};\nexport var strictParseShort = function (value) {\n    if (typeof value === \"string\") {\n        return expectShort(parseNumber(value));\n    }\n    return expectShort(value);\n};\nexport var strictParseByte = function (value) {\n    if (typeof value === \"string\") {\n        return expectByte(parseNumber(value));\n    }\n    return expectByte(value);\n};\nvar stackTraceWarning = function (message) {\n    return String(new TypeError(message).stack || message)\n        .split(\"\\n\")\n        .slice(0, 5)\n        .filter(function (s) { return !s.includes(\"stackTraceWarning\"); })\n        .join(\"\\n\");\n};\nexport var logger = {\n    warn: console.warn,\n};\n"]},"metadata":{},"sourceType":"module"}