{"ast":null,"code":"import { createAsyncThunk, createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\nimport db from \"../db\";\nexport const fetchAllCounters = createAsyncThunk(\"counter/fetchAll\", async () => {\n  return await db.counters.toArray();\n});\nexport const updateCounterById = createAsyncThunk(\"counter/updateById\", async data => {\n  return await db.counters.update(data.id, {\n    value: data.value\n  }).then(() => db.counters.get(data.id));\n});\nexport const addCounter = createAsyncThunk(\"counter/add\", async () => {\n  return await db.counters.add({\n    value: 0\n  }).then(newId => db.counters.get(newId));\n});\nexport const deleteCounter = createAsyncThunk(\"counter/delete\", async id => {\n  await db.counters.delete(id);\n  return id;\n});\nconst countersAdapter = createEntityAdapter();\nconst initialState = countersAdapter.getInitialState({\n  loading: false\n});\nexport const counterSlice = createSlice({\n  name: \"counter\",\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchAllCounters.pending, state => {\n      state.loading = true;\n    }).addCase(fetchAllCounters.fulfilled, (state, {\n      payload\n    }) => {\n      countersAdapter.upsertMany(state, payload);\n      state.loading = false;\n    }).addCase(updateCounterById.fulfilled, (state, {\n      payload\n    }) => {\n      const {\n        id,\n        ...changes\n      } = payload;\n\n      if (id) {\n        countersAdapter.updateOne(state, {\n          id,\n          changes\n        });\n      }\n    }).addCase(addCounter.fulfilled, countersAdapter.addOne).addCase(deleteCounter.fulfilled, countersAdapter.removeOne);\n  }\n});\nexport const {\n  selectAll: selectAllCounters\n} = countersAdapter.getSelectors(state => state.counter);\nexport default counterSlice.reducer;","map":{"version":3,"sources":["/Users/sanjayar/Desktop/moody-main copy/src/counter/counterSlice.ts"],"names":["createAsyncThunk","createEntityAdapter","createSlice","db","fetchAllCounters","counters","toArray","updateCounterById","data","update","id","value","then","get","addCounter","add","newId","deleteCounter","delete","countersAdapter","initialState","getInitialState","loading","counterSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","payload","upsertMany","changes","updateOne","addOne","removeOne","selectAll","selectAllCounters","getSelectors","counter","reducer"],"mappings":"AAAA,SACEA,gBADF,EAEEC,mBAFF,EAGEC,WAHF,QAIO,kBAJP;AAKA,OAAOC,EAAP,MAAe,OAAf;AAIA,OAAO,MAAMC,gBAAgB,GAAGJ,gBAAgB,CAC9C,kBAD8C,EAE9C,YAAY;AACV,SAAQ,MAAMG,EAAE,CAACE,QAAH,CAAYC,OAAZ,EAAd;AACD,CAJ6C,CAAzC;AAOP,OAAO,MAAMC,iBAAiB,GAAGP,gBAAgB,CAC/C,oBAD+C,EAE/C,MAAOQ,IAAP,IAA+C;AAC7C,SAAQ,MAAML,EAAE,CAACE,QAAH,CACXI,MADW,CACJD,IAAI,CAACE,EADD,EACK;AAAEC,IAAAA,KAAK,EAAEH,IAAI,CAACG;AAAd,GADL,EAEXC,IAFW,CAEN,MAAMT,EAAE,CAACE,QAAH,CAAYQ,GAAZ,CAAgBL,IAAI,CAACE,EAArB,CAFA,CAAd;AAGD,CAN8C,CAA1C;AASP,OAAO,MAAMI,UAAU,GAAGd,gBAAgB,CAAC,aAAD,EAAgB,YAAY;AACpE,SAAQ,MAAMG,EAAE,CAACE,QAAH,CACXU,GADW,CACP;AAAEJ,IAAAA,KAAK,EAAE;AAAT,GADO,EAEXC,IAFW,CAELI,KAAD,IAAWb,EAAE,CAACE,QAAH,CAAYQ,GAAZ,CAAgBG,KAAhB,CAFL,CAAd;AAGD,CAJyC,CAAnC;AAMP,OAAO,MAAMC,aAAa,GAAGjB,gBAAgB,CAC3C,gBAD2C,EAE3C,MAAOU,EAAP,IAAsB;AACpB,QAAMP,EAAE,CAACE,QAAH,CAAYa,MAAZ,CAAmBR,EAAnB,CAAN;AACA,SAAOA,EAAP;AACD,CAL0C,CAAtC;AAQP,MAAMS,eAAe,GAAGlB,mBAAmB,EAA3C;AACA,MAAMmB,YAAY,GAAGD,eAAe,CAACE,eAAhB,CAAgC;AAAEC,EAAAA,OAAO,EAAE;AAAX,CAAhC,CAArB;AAEA,OAAO,MAAMC,YAAY,GAAGrB,WAAW,CAAC;AACtCsB,EAAAA,IAAI,EAAE,SADgC;AAEtCJ,EAAAA,YAFsC;AAGtCK,EAAAA,QAAQ,EAAE,EAH4B;AAItCC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CACJC,OADH,CACWxB,gBAAgB,CAACyB,OAD5B,EACsCC,KAAD,IAAW;AAC5CA,MAAAA,KAAK,CAACR,OAAN,GAAgB,IAAhB;AACD,KAHH,EAIGM,OAJH,CAIWxB,gBAAgB,CAAC2B,SAJ5B,EAIuC,CAACD,KAAD,EAAQ;AAAEE,MAAAA;AAAF,KAAR,KAAwB;AAC3Db,MAAAA,eAAe,CAACc,UAAhB,CAA2BH,KAA3B,EAAkCE,OAAlC;AACAF,MAAAA,KAAK,CAACR,OAAN,GAAgB,KAAhB;AACD,KAPH,EAQGM,OARH,CAQWrB,iBAAiB,CAACwB,SAR7B,EAQwC,CAACD,KAAD,EAAQ;AAAEE,MAAAA;AAAF,KAAR,KAAwB;AAC5D,YAAM;AAAEtB,QAAAA,EAAF;AAAM,WAAGwB;AAAT,UAAqBF,OAA3B;;AACA,UAAItB,EAAJ,EAAQ;AACNS,QAAAA,eAAe,CAACgB,SAAhB,CAA0BL,KAA1B,EAAiC;AAAEpB,UAAAA,EAAF;AAAMwB,UAAAA;AAAN,SAAjC;AACD;AACF,KAbH,EAcGN,OAdH,CAcWd,UAAU,CAACiB,SAdtB,EAciCZ,eAAe,CAACiB,MAdjD,EAeGR,OAfH,CAeWX,aAAa,CAACc,SAfzB,EAeoCZ,eAAe,CAACkB,SAfpD;AAgBD;AArBqC,CAAD,CAAhC;AAwBP,OAAO,MAAM;AAAEC,EAAAA,SAAS,EAAEC;AAAb,IAAmCpB,eAAe,CAACqB,YAAhB,CAC7CV,KAAD,IAAsBA,KAAK,CAACW,OADkB,CAAzC;AAIP,eAAelB,YAAY,CAACmB,OAA5B","sourcesContent":["import {\n  createAsyncThunk,\n  createEntityAdapter,\n  createSlice,\n} from \"@reduxjs/toolkit\";\nimport db from \"../db\";\nimport ICounterModel from \"./CounterModel\";\nimport { RootState } from \"../reduxStore\";\n\nexport const fetchAllCounters = createAsyncThunk(\n  \"counter/fetchAll\",\n  async () => {\n    return (await db.counters.toArray()) as ICounterModel[];\n  }\n);\n\nexport const updateCounterById = createAsyncThunk(\n  \"counter/updateById\",\n  async (data: { id: number; value: number }) => {\n    return (await db.counters\n      .update(data.id, { value: data.value })\n      .then(() => db.counters.get(data.id))) as ICounterModel;\n  }\n);\n\nexport const addCounter = createAsyncThunk(\"counter/add\", async () => {\n  return (await db.counters\n    .add({ value: 0 })\n    .then((newId) => db.counters.get(newId))) as ICounterModel;\n});\n\nexport const deleteCounter = createAsyncThunk(\n  \"counter/delete\",\n  async (id: number) => {\n    await db.counters.delete(id);\n    return id as number;\n  }\n);\n\nconst countersAdapter = createEntityAdapter<ICounterModel>();\nconst initialState = countersAdapter.getInitialState({ loading: false });\n\nexport const counterSlice = createSlice({\n  name: \"counter\",\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchAllCounters.pending, (state) => {\n        state.loading = true;\n      })\n      .addCase(fetchAllCounters.fulfilled, (state, { payload }) => {\n        countersAdapter.upsertMany(state, payload);\n        state.loading = false;\n      })\n      .addCase(updateCounterById.fulfilled, (state, { payload }) => {\n        const { id, ...changes } = payload;\n        if (id) {\n          countersAdapter.updateOne(state, { id, changes });\n        }\n      })\n      .addCase(addCounter.fulfilled, countersAdapter.addOne)\n      .addCase(deleteCounter.fulfilled, countersAdapter.removeOne);\n  },\n});\n\nexport const { selectAll: selectAllCounters } = countersAdapter.getSelectors(\n  (state: RootState) => state.counter\n);\n\nexport default counterSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}