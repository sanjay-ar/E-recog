{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { DeleteSessionCommand } from \"./commands/DeleteSessionCommand\";\nimport { GetSessionCommand } from \"./commands/GetSessionCommand\";\nimport { PutSessionCommand } from \"./commands/PutSessionCommand\";\nimport { RecognizeTextCommand } from \"./commands/RecognizeTextCommand\";\nimport { RecognizeUtteranceCommand } from \"./commands/RecognizeUtteranceCommand\";\nimport { StartConversationCommand } from \"./commands/StartConversationCommand\";\nimport { LexRuntimeV2Client } from \"./LexRuntimeV2Client\";\n\nvar LexRuntimeV2 = function (_super) {\n  __extends(LexRuntimeV2, _super);\n\n  function LexRuntimeV2() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  LexRuntimeV2.prototype.deleteSession = function (args, optionsOrCb, cb) {\n    var command = new DeleteSessionCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \".concat(typeof optionsOrCb));\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  LexRuntimeV2.prototype.getSession = function (args, optionsOrCb, cb) {\n    var command = new GetSessionCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \".concat(typeof optionsOrCb));\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  LexRuntimeV2.prototype.putSession = function (args, optionsOrCb, cb) {\n    var command = new PutSessionCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \".concat(typeof optionsOrCb));\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  LexRuntimeV2.prototype.recognizeText = function (args, optionsOrCb, cb) {\n    var command = new RecognizeTextCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \".concat(typeof optionsOrCb));\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  LexRuntimeV2.prototype.recognizeUtterance = function (args, optionsOrCb, cb) {\n    var command = new RecognizeUtteranceCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \".concat(typeof optionsOrCb));\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  LexRuntimeV2.prototype.startConversation = function (args, optionsOrCb, cb) {\n    var command = new StartConversationCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \".concat(typeof optionsOrCb));\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  return LexRuntimeV2;\n}(LexRuntimeV2Client);\n\nexport { LexRuntimeV2 };","map":{"version":3,"sources":["/Users/sanjayar/Desktop/moody-main/node_modules/@aws-sdk/client-lex-runtime-v2/dist-es/LexRuntimeV2.js"],"names":["__extends","DeleteSessionCommand","GetSessionCommand","PutSessionCommand","RecognizeTextCommand","RecognizeUtteranceCommand","StartConversationCommand","LexRuntimeV2Client","LexRuntimeV2","_super","apply","arguments","prototype","deleteSession","args","optionsOrCb","cb","command","send","Error","concat","getSession","putSession","recognizeText","recognizeUtterance","startConversation"],"mappings":"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","sourcesContent":["import { __extends } from \"tslib\";\nimport { DeleteSessionCommand, } from \"./commands/DeleteSessionCommand\";\nimport { GetSessionCommand } from \"./commands/GetSessionCommand\";\nimport { PutSessionCommand } from \"./commands/PutSessionCommand\";\nimport { RecognizeTextCommand, } from \"./commands/RecognizeTextCommand\";\nimport { RecognizeUtteranceCommand, } from \"./commands/RecognizeUtteranceCommand\";\nimport { StartConversationCommand, } from \"./commands/StartConversationCommand\";\nimport { LexRuntimeV2Client } from \"./LexRuntimeV2Client\";\nvar LexRuntimeV2 = (function (_super) {\n    __extends(LexRuntimeV2, _super);\n    function LexRuntimeV2() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    LexRuntimeV2.prototype.deleteSession = function (args, optionsOrCb, cb) {\n        var command = new DeleteSessionCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(\"Expect http options but get \".concat(typeof optionsOrCb));\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    };\n    LexRuntimeV2.prototype.getSession = function (args, optionsOrCb, cb) {\n        var command = new GetSessionCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(\"Expect http options but get \".concat(typeof optionsOrCb));\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    };\n    LexRuntimeV2.prototype.putSession = function (args, optionsOrCb, cb) {\n        var command = new PutSessionCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(\"Expect http options but get \".concat(typeof optionsOrCb));\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    };\n    LexRuntimeV2.prototype.recognizeText = function (args, optionsOrCb, cb) {\n        var command = new RecognizeTextCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(\"Expect http options but get \".concat(typeof optionsOrCb));\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    };\n    LexRuntimeV2.prototype.recognizeUtterance = function (args, optionsOrCb, cb) {\n        var command = new RecognizeUtteranceCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(\"Expect http options but get \".concat(typeof optionsOrCb));\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    };\n    LexRuntimeV2.prototype.startConversation = function (args, optionsOrCb, cb) {\n        var command = new StartConversationCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(\"Expect http options but get \".concat(typeof optionsOrCb));\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    };\n    return LexRuntimeV2;\n}(LexRuntimeV2Client));\nexport { LexRuntimeV2 };\n"]},"metadata":{},"sourceType":"module"}