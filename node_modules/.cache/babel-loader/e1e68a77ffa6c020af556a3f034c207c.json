{"ast":null,"code":"var _jsxFileName = \"/Users/sanjayar/Desktop/moody-main copy 2/src/pages/meeting/EmotionRadar.tsx\",\n    _s = $RefreshSig$();\n\nimport { Box, Checkbox, FormControlLabel, IconButton, Paper, Popover, Typography, useTheme } from \"@material-ui/core\";\nimport { useAppSelector } from \"../../reduxHooks\";\nimport { selectActiveMeetingAudienceFaceExpressions } from \"../../meetings/audienceFaceExpressionSlice\";\nimport Plot from \"react-plotly.js\";\nimport { InfoOutlined } from \"@material-ui/icons\";\nimport React, { useState } from \"react\";\nimport { calculatePaulEkmanEmotionScore } from \"../../meetings/audienceFaceExpressionUtils\";\nimport { selectActiveMeetingSpeakerVoiceEmotions } from \"../../meetings/speakerVoiceEmotionSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function EmotionRadar() {\n  _s();\n\n  const theme = useTheme();\n  const audienceFaceExpressions = useAppSelector(selectActiveMeetingAudienceFaceExpressions);\n  const speakerVoiceEmotions = useAppSelector(selectActiveMeetingSpeakerVoiceEmotions); // Popover\n\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  const handleOpenPopover = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClosePopover = () => {\n    setAnchorEl(null);\n  };\n\n  const open = Boolean(anchorEl); // Checkbox\n\n  const [checkboxes, setCheckboxes] = useState({\n    audience: true,\n    speaker: true\n  });\n\n  const handleCheckboxes = event => {\n    setCheckboxes({ ...checkboxes,\n      [event.target.name]: event.target.checked\n    });\n  };\n\n  const data = [];\n\n  if (checkboxes.audience) {\n    data.push({\n      name: \"Audience face expressions\",\n      r: Object.values(calculatePaulEkmanEmotionScore(audienceFaceExpressions.map(e => ({\n        happy: e.happy ? Math.log(1 + e.happy) : 0.0,\n        surprised: e.surprised ? Math.log(1 + e.surprised) : 0.0,\n        neutral: e.neutral ? Math.log(1 + e.neutral) : 0.0,\n        sad: e.sad ? Math.log(1 + e.sad) : 0.0,\n        angry: e.angry ? Math.log(1 + e.angry) : 0.0,\n        disgusted: e.disgusted ? Math.log(1 + e.disgusted) : 0.0,\n        fearful: e.fearful ? Math.log(1 + e.fearful) : 0.0\n      })))),\n      marker: {\n        color: theme.palette.primary.main\n      },\n      theta: [\"happy\", \"surprised\", \"neutral\", \"sad\", \"angry\", \"disgusted\", \"fearful\"],\n      fill: \"toself\",\n      type: \"scatterpolar\"\n    });\n  }\n\n  if (checkboxes.speaker) {\n    data.push({\n      name: \"Speaker voice emotions\",\n      r: Object.values(calculatePaulEkmanEmotionScore(speakerVoiceEmotions.map(e => ({\n        happy: e.happy ? Math.log(1 + e.happy) : 0.0,\n        surprised: e.surprised ? Math.log(1 + e.surprised) : 0.0,\n        neutral: e.neutral ? Math.log(1 + e.neutral) : 0.0,\n        sad: e.sad ? Math.log(1 + e.sad) : 0.0,\n        angry: e.angry ? Math.log(1 + e.angry) : 0.0,\n        disgusted: e.disgusted ? Math.log(1 + e.disgusted) : 0.0,\n        fearful: e.fearful ? Math.log(1 + e.fearful) : 0.0\n      })))),\n      marker: {\n        color: theme.palette.secondary.main\n      },\n      theta: [\"happy\", \"surprised\", \"neutral\", \"sad\", \"angry\", \"disgusted\", \"fearful\"],\n      fill: \"toself\",\n      type: \"scatterpolar\"\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    style: {\n      backgroundColor: 'transparent',\n      boxShadow: 'none'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      position: \"relative\",\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        position: \"absolute\",\n        top: 0,\n        right: 0,\n        zIndex: 1,\n        p: 1,\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          color: \"secondary\",\n          onClick: handleOpenPopover,\n          size: \"small\",\n          children: /*#__PURE__*/_jsxDEV(InfoOutlined, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Popover, {\n          open: open,\n          anchorEl: anchorEl,\n          onClose: handleClosePopover,\n          anchorOrigin: {\n            vertical: \"bottom\",\n            horizontal: \"center\"\n          },\n          transformOrigin: {\n            vertical: \"top\",\n            horizontal: \"center\"\n          },\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            p: 2,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              paragraph: true,\n              children: \"Shows the audience's average emotion distribution throughout the whole meeting as measured by their faces on a logarithmic scale.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              children: \"In addition, the speaker's average emotion distribution as measured by his/her voice is plotted on a logarithmic scale.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      px: 2,\n      py: 1,\n      children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n        control: /*#__PURE__*/_jsxDEV(Checkbox, {\n          color: \"primary\",\n          checked: checkboxes.audience,\n          onChange: handleCheckboxes,\n          name: \"audience\",\n          size: \"small\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }, this),\n        label: \"Audience\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n        control: /*#__PURE__*/_jsxDEV(Checkbox, {\n          color: \"secondary\",\n          checked: checkboxes.speaker,\n          onChange: handleCheckboxes,\n          name: \"speaker\",\n          size: \"small\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 13\n        }, this),\n        label: \"Speaker\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Plot, {\n      config: {\n        displayModeBar: false\n      },\n      layout: {\n        title: \"Emotion Radar\",\n        paper_bgcolor: \"transparent\",\n        plot_bgcolor: \"transparent\",\n        polar: {\n          bgcolor: \"transparent\",\n          radialaxis: {\n            visible: true,\n            ticks: \"\",\n            showticklabels: true,\n            tickfont: {\n              size: 12,\n              color: theme.palette.text.primary\n            },\n            gridcolor: \"rgba(255, 255, 255, 0.1)\",\n            range: [0, 1]\n          },\n          angularaxis: {\n            tickfont: {\n              size: 14,\n              color: theme.palette.text.primary\n            },\n            gridcolor: \"rgba(255, 255, 255, 0.1)\",\n            linecolor: \"rgba(255, 255, 255, 0.1)\"\n          }\n        },\n        width: 500,\n        height: 500,\n        margin: {\n          l: 80,\n          r: 80,\n          t: 80,\n          b: 80\n        },\n        showlegend: true,\n        legend: {\n          orientation: \"h\",\n          y: -0.2,\n          font: {\n            size: 14,\n            color: theme.palette.text.primary\n          },\n          bgcolor: \"transparent\"\n        },\n        font: {\n          family: theme.typography.fontFamily,\n          color: theme.palette.text.primary,\n          size: 16\n        },\n        transition: {\n          duration: 500,\n          easing: \"cubic-in-out\"\n        }\n      },\n      data: data,\n      style: {\n        width: \"100%\",\n        height: \"100%\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n}\n\n_s(EmotionRadar, \"oOdbeVS2XOyWlRb4LE3zTtENfx0=\", false, function () {\n  return [useTheme, useAppSelector, useAppSelector];\n});\n\n_c = EmotionRadar;\n\nvar _c;\n\n$RefreshReg$(_c, \"EmotionRadar\");","map":{"version":3,"sources":["/Users/sanjayar/Desktop/moody-main copy 2/src/pages/meeting/EmotionRadar.tsx"],"names":["Box","Checkbox","FormControlLabel","IconButton","Paper","Popover","Typography","useTheme","useAppSelector","selectActiveMeetingAudienceFaceExpressions","Plot","InfoOutlined","React","useState","calculatePaulEkmanEmotionScore","selectActiveMeetingSpeakerVoiceEmotions","EmotionRadar","theme","audienceFaceExpressions","speakerVoiceEmotions","anchorEl","setAnchorEl","handleOpenPopover","event","currentTarget","handleClosePopover","open","Boolean","checkboxes","setCheckboxes","audience","speaker","handleCheckboxes","target","name","checked","data","push","r","Object","values","map","e","happy","Math","log","surprised","neutral","sad","angry","disgusted","fearful","marker","color","palette","primary","main","theta","fill","type","secondary","backgroundColor","boxShadow","vertical","horizontal","displayModeBar","title","paper_bgcolor","plot_bgcolor","polar","bgcolor","radialaxis","visible","ticks","showticklabels","tickfont","size","text","gridcolor","range","angularaxis","linecolor","width","height","margin","l","t","b","showlegend","legend","orientation","y","font","family","typography","fontFamily","transition","duration","easing"],"mappings":"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","sourcesContent":["import {\n  Box,\n  Checkbox,\n  FormControlLabel,\n  IconButton,\n  Paper,\n  Popover,\n  Typography,\n  useTheme,\n} from \"@material-ui/core\";\nimport { AudienceFaceExpression, SpeakerVoiceEmotion } from \"../../models\";\nimport { useAppSelector } from \"../../reduxHooks\";\nimport { selectActiveMeetingAudienceFaceExpressions } from \"../../meetings/audienceFaceExpressionSlice\";\nimport Plot from \"react-plotly.js\";\nimport { InfoOutlined } from \"@material-ui/icons\";\nimport React, { ChangeEvent, useState } from \"react\";\nimport { calculatePaulEkmanEmotionScore } from \"../../meetings/audienceFaceExpressionUtils\";\nimport { selectActiveMeetingSpeakerVoiceEmotions } from \"../../meetings/speakerVoiceEmotionSlice\";\n\nexport default function EmotionRadar() {\n  const theme = useTheme();\n  const audienceFaceExpressions: AudienceFaceExpression[] = useAppSelector(\n    selectActiveMeetingAudienceFaceExpressions\n  );\n  const speakerVoiceEmotions: SpeakerVoiceEmotion[] = useAppSelector(\n    selectActiveMeetingSpeakerVoiceEmotions\n  );\n\n  // Popover\n  const [anchorEl, setAnchorEl] = useState<HTMLButtonElement | null>(null);\n\n  const handleOpenPopover = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClosePopover = () => {\n    setAnchorEl(null);\n  };\n\n  const open = Boolean(anchorEl);\n\n  // Checkbox\n  const [checkboxes, setCheckboxes] = useState({\n    audience: true,\n    speaker: true,\n  });\n  const handleCheckboxes = (event: ChangeEvent<HTMLInputElement>) => {\n    setCheckboxes({ ...checkboxes, [event.target.name]: event.target.checked });\n  };\n  const data: object[] = [];\n  if (checkboxes.audience) {\n    data.push({\n      name: \"Audience face expressions\",\n      r: Object.values(\n        calculatePaulEkmanEmotionScore(\n          audienceFaceExpressions.map((e) => ({\n            happy: e.happy ? Math.log(1 + e.happy) : 0.0,\n            surprised: e.surprised ? Math.log(1 + e.surprised) : 0.0,\n            neutral: e.neutral ? Math.log(1 + e.neutral) : 0.0,\n            sad: e.sad ? Math.log(1 + e.sad) : 0.0,\n            angry: e.angry ? Math.log(1 + e.angry) : 0.0,\n            disgusted: e.disgusted ? Math.log(1 + e.disgusted) : 0.0,\n            fearful: e.fearful ? Math.log(1 + e.fearful) : 0.0,\n          }))\n        )\n      ),\n      marker: {\n        color: theme.palette.primary.main,\n      },\n      theta: [\n        \"happy\",\n        \"surprised\",\n        \"neutral\",\n        \"sad\",\n        \"angry\",\n        \"disgusted\",\n        \"fearful\",\n      ],\n      fill: \"toself\",\n      type: \"scatterpolar\",\n    });\n  }\n  if (checkboxes.speaker) {\n    data.push({\n      name: \"Speaker voice emotions\",\n      r: Object.values(\n        calculatePaulEkmanEmotionScore(\n          speakerVoiceEmotions.map((e) => ({\n            happy: e.happy ? Math.log(1 + e.happy) : 0.0,\n            surprised: e.surprised ? Math.log(1 + e.surprised) : 0.0,\n            neutral: e.neutral ? Math.log(1 + e.neutral) : 0.0,\n            sad: e.sad ? Math.log(1 + e.sad) : 0.0,\n            angry: e.angry ? Math.log(1 + e.angry) : 0.0,\n            disgusted: e.disgusted ? Math.log(1 + e.disgusted) : 0.0,\n            fearful: e.fearful ? Math.log(1 + e.fearful) : 0.0,\n          }))\n        )\n      ),\n      marker: {\n        color: theme.palette.secondary.main,\n      },\n      theta: [\n        \"happy\",\n        \"surprised\",\n        \"neutral\",\n        \"sad\",\n        \"angry\",\n        \"disgusted\",\n        \"fearful\",\n      ],\n      fill: \"toself\",\n      type: \"scatterpolar\",\n    });\n  }\n\n  return (\n    <Paper style={{ backgroundColor: 'transparent', boxShadow: 'none' }}>\n      <Box position=\"relative\">\n        <Box position=\"absolute\" top={0} right={0} zIndex={1} p={1}>\n          <IconButton\n            color=\"secondary\"\n            onClick={handleOpenPopover}\n            size=\"small\"\n          >\n            <InfoOutlined />\n          </IconButton>\n          <Popover\n            open={open}\n            anchorEl={anchorEl}\n            onClose={handleClosePopover}\n            anchorOrigin={{\n              vertical: \"bottom\",\n              horizontal: \"center\",\n            }}\n            transformOrigin={{\n              vertical: \"top\",\n              horizontal: \"center\",\n            }}\n          >\n            <Box p={2}>\n              <Typography variant=\"body2\" paragraph>\n                Shows the audience's average emotion distribution throughout the\n                whole meeting as measured by their faces on a logarithmic scale.\n              </Typography>\n              <Typography variant=\"body2\">\n                In addition, the speaker's average emotion distribution as\n                measured by his/her voice is plotted on a logarithmic scale.\n              </Typography>\n            </Box>\n          </Popover>\n        </Box>\n      </Box>\n      <Box px={2} py={1}>\n        <FormControlLabel\n          control={\n            <Checkbox\n              color=\"primary\"\n              checked={checkboxes.audience}\n              onChange={handleCheckboxes}\n              name=\"audience\"\n              size=\"small\"\n            />\n          }\n          label=\"Audience\"\n        />\n        <FormControlLabel\n          control={\n            <Checkbox\n              color=\"secondary\"\n              checked={checkboxes.speaker}\n              onChange={handleCheckboxes}\n              name=\"speaker\"\n              size=\"small\"\n            />\n          }\n          label=\"Speaker\"\n        />\n      </Box>\n      <Plot\n        config={{\n          displayModeBar: false,\n        }}\n        layout={{\n          title: \"Emotion Radar\",\n          paper_bgcolor: \"transparent\",\n          plot_bgcolor: \"transparent\",\n          polar: {\n            bgcolor: \"transparent\",\n            radialaxis: {\n              visible: true,\n              ticks: \"\",\n              showticklabels: true,\n              tickfont: {\n                size: 12,\n                color: theme.palette.text.primary,\n              },\n              gridcolor: \"rgba(255, 255, 255, 0.1)\",\n              range: [0, 1],\n            },\n            angularaxis: {\n              tickfont: {\n                size: 14,\n                color: theme.palette.text.primary,\n              },\n              gridcolor: \"rgba(255, 255, 255, 0.1)\",\n              linecolor: \"rgba(255, 255, 255, 0.1)\",\n            },\n          },\n          width: 500,\n          height: 500,\n          margin: {\n            l: 80,\n            r: 80,\n            t: 80,\n            b: 80,\n          },\n          showlegend: true,\n          legend: { \n            orientation: \"h\",\n            y: -0.2,\n            font: {\n              size: 14,\n              color: theme.palette.text.primary,\n            },\n            bgcolor: \"transparent\",\n          },\n          font: {\n            family: theme.typography.fontFamily,\n            color: theme.palette.text.primary,\n            size: 16,\n          },\n          transition: {\n            duration: 500,\n            easing: \"cubic-in-out\",\n          },\n        }}\n        data={data}\n        style={{\n          width: \"100%\",\n          height: \"100%\",\n        }}\n      />\n    </Paper>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}