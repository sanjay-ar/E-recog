{"ast":null,"code":"var _jsxFileName = \"/Users/sanjayar/Desktop/moody-main copy/src/pages/meeting/ExportButton.tsx\",\n    _s = $RefreshSig$();\n\nimport { Button } from \"@material-ui/core\";\nimport { CloudDownload } from \"@material-ui/icons\";\nimport { useCallback, useEffect, useMemo } from \"react\";\nimport { selectActiveMeetingAudienceFaceExpressions } from \"../../meetings/audienceFaceExpressionSlice\";\nimport { selectActiveMeeting } from \"../../meetings/meetingsSelectors\";\nimport { fetchActiveMeetingRatings, selectActiveMeetingRatings } from \"../../meetings/ratingsSlice\";\nimport { selectActiveMeetingSpeakerVoiceEmotions } from \"../../meetings/speakerVoiceEmotionSlice\";\nimport { useAppDispatch, useAppSelector } from \"../../reduxHooks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ExportButton() {\n  _s();\n\n  // Ratings are lazy loaded, we load them as soon as the export button renders to make sure they are up-to-date\n  const dispatch = useAppDispatch();\n  useEffect(() => {\n    dispatch(fetchActiveMeetingRatings());\n  }, [dispatch]);\n  const audienceFaceExpressions = useAppSelector(selectActiveMeetingAudienceFaceExpressions);\n  const speakerVoiceEmotions = useAppSelector(selectActiveMeetingSpeakerVoiceEmotions);\n  const meetingInformation = useAppSelector(selectActiveMeeting);\n  const ratings = useAppSelector(selectActiveMeetingRatings);\n  const dataFiles = useMemo(() => {\n    var _meetingInformation$i;\n\n    const id = (_meetingInformation$i = meetingInformation === null || meetingInformation === void 0 ? void 0 : meetingInformation.id) !== null && _meetingInformation$i !== void 0 ? _meetingInformation$i : \"unknown-meeting-id\";\n    return {\n      [`face-expressions-${id}.json`]: audienceFaceExpressions,\n      [`voice-emotions-${id}.json`]: speakerVoiceEmotions,\n      [`meeting-info-${id}.json`]: meetingInformation || {},\n      [`ratings-${id}.json`]: ratings\n    };\n  }, [audienceFaceExpressions, meetingInformation, ratings, speakerVoiceEmotions]);\n  const handleDownload = useCallback(() => {\n    const downloadFile = (filename, data) => {\n      const jsonData = JSON.stringify(data);\n      const blob = new Blob([jsonData], {\n        type: \"application/json\"\n      });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement(\"a\");\n      link.href = url;\n      link.download = filename;\n      link.click();\n      URL.revokeObjectURL(url);\n    };\n\n    let index = 0;\n\n    const downloadFiles = () => {\n      if (index < Object.entries(dataFiles).length) {\n        const [filename, data] = Object.entries(dataFiles)[index];\n        const downloadButton = document.createElement(\"a\");\n        downloadButton.style.display = \"none\";\n        downloadButton.addEventListener(\"click\", () => downloadFile(filename, data));\n        document.body.appendChild(downloadButton);\n        downloadButton.click();\n        document.body.removeChild(downloadButton);\n        index++;\n        setTimeout(downloadFiles, 100); // Add a small delay of 100ms\n      }\n    };\n\n    downloadFiles();\n  }, [dataFiles]);\n  return /*#__PURE__*/_jsxDEV(Button, {\n    startIcon: /*#__PURE__*/_jsxDEV(CloudDownload, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 18\n    }, this),\n    color: \"primary\",\n    onClick: handleDownload,\n    children: \"Export meeting data\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ExportButton, \"XqFxtKc8IcMug2Btg7xi/6IdLqw=\", false, function () {\n  return [useAppDispatch, useAppSelector, useAppSelector, useAppSelector, useAppSelector];\n});\n\n_c = ExportButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExportButton\");","map":{"version":3,"sources":["/Users/sanjayar/Desktop/moody-main copy/src/pages/meeting/ExportButton.tsx"],"names":["Button","CloudDownload","useCallback","useEffect","useMemo","selectActiveMeetingAudienceFaceExpressions","selectActiveMeeting","fetchActiveMeetingRatings","selectActiveMeetingRatings","selectActiveMeetingSpeakerVoiceEmotions","useAppDispatch","useAppSelector","ExportButton","dispatch","audienceFaceExpressions","speakerVoiceEmotions","meetingInformation","ratings","dataFiles","id","handleDownload","downloadFile","filename","data","jsonData","JSON","stringify","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","download","click","revokeObjectURL","index","downloadFiles","Object","entries","length","downloadButton","style","display","addEventListener","body","appendChild","removeChild","setTimeout"],"mappings":"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","sourcesContent":["import { Button } from \"@material-ui/core\";\nimport { CloudDownload } from \"@material-ui/icons\";\nimport { useCallback, useEffect, useMemo } from \"react\";\nimport { selectActiveMeetingAudienceFaceExpressions } from \"../../meetings/audienceFaceExpressionSlice\";\nimport { selectActiveMeeting } from \"../../meetings/meetingsSelectors\";\nimport {\n  fetchActiveMeetingRatings,\n  selectActiveMeetingRatings,\n} from \"../../meetings/ratingsSlice\";\nimport { selectActiveMeetingSpeakerVoiceEmotions } from \"../../meetings/speakerVoiceEmotionSlice\";\nimport { AudienceFaceExpression, SpeakerVoiceEmotion } from \"../../models\";\nimport { useAppDispatch, useAppSelector } from \"../../reduxHooks\";\n\nexport default function ExportButton() {\n  // Ratings are lazy loaded, we load them as soon as the export button renders to make sure they are up-to-date\n  const dispatch = useAppDispatch();\n  useEffect(() => {\n    dispatch(fetchActiveMeetingRatings());\n  }, [dispatch]);\n\n  const audienceFaceExpressions: AudienceFaceExpression[] = useAppSelector(\n    selectActiveMeetingAudienceFaceExpressions\n  );\n  const speakerVoiceEmotions: SpeakerVoiceEmotion[] = useAppSelector(\n    selectActiveMeetingSpeakerVoiceEmotions\n  );\n  const meetingInformation = useAppSelector(selectActiveMeeting);\n  const ratings = useAppSelector(selectActiveMeetingRatings);\n\n  const dataFiles: Record<string, object> = useMemo(() => {\n    const id = meetingInformation?.id ?? \"unknown-meeting-id\";\n    return {\n      [`face-expressions-${id}.json`]: audienceFaceExpressions,\n      [`voice-emotions-${id}.json`]: speakerVoiceEmotions,\n      [`meeting-info-${id}.json`]: meetingInformation || {},\n      [`ratings-${id}.json`]: ratings,\n    };\n  }, [\n    audienceFaceExpressions,\n    meetingInformation,\n    ratings,\n    speakerVoiceEmotions,\n  ]);\n\n  const handleDownload = useCallback(() => {\n    const downloadFile = (filename: string, data: object) => {\n      const jsonData = JSON.stringify(data);\n      const blob = new Blob([jsonData], { type: \"application/json\" });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement(\"a\");\n      link.href = url;\n      link.download = filename;\n      link.click();\n      URL.revokeObjectURL(url);\n    };\n\n    let index = 0;\n    const downloadFiles = () => {\n      if (index < Object.entries(dataFiles).length) {\n        const [filename, data] = Object.entries(dataFiles)[index];\n        const downloadButton = document.createElement(\"a\");\n        downloadButton.style.display = \"none\";\n        downloadButton.addEventListener(\"click\", () =>\n          downloadFile(filename, data)\n        );\n        document.body.appendChild(downloadButton);\n        downloadButton.click();\n        document.body.removeChild(downloadButton);\n        index++;\n        setTimeout(downloadFiles, 100); // Add a small delay of 100ms\n      }\n    };\n\n    downloadFiles();\n  }, [dataFiles]);\n\n  return (\n    <Button\n      startIcon={<CloudDownload />}\n      color=\"primary\"\n      onClick={handleDownload}\n    >\n      Export meeting data\n    </Button>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}