{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n};\n/*\n * Copyright 2017-2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\n\nimport camelcaseKeys from 'camelcase-keys';\nimport { ConsoleLogger as Logger, Credentials, getAmplifyUserAgent } from '@aws-amplify/core';\nimport { LocationClient, SearchPlaceIndexForTextCommand, SearchPlaceIndexForSuggestionsCommand, SearchPlaceIndexForPositionCommand, BatchPutGeofenceCommand, GetPlaceCommand, GetGeofenceCommand, ListGeofencesCommand, BatchDeleteGeofenceCommand } from '@aws-sdk/client-location';\nimport { mapSearchOptions, validateGeofenceId, validateGeofencesInput } from '../util';\nvar logger = new Logger('AmazonLocationServiceProvider');\n\nvar AmazonLocationServiceProvider =\n/** @class */\nfunction () {\n  /**\n   * Initialize Geo with AWS configurations\n   * @param {Object} config - Configuration object for Geo\n   */\n  function AmazonLocationServiceProvider(config) {\n    this._config = config ? config : {};\n    logger.debug('Geo Options', this._config);\n  }\n  /**\n   * get the category of the plugin\n   * @returns {string} name of the category\n   */\n\n\n  AmazonLocationServiceProvider.prototype.getCategory = function () {\n    return AmazonLocationServiceProvider.CATEGORY;\n  };\n  /**\n   * get provider name of the plugin\n   * @returns {string} name of the provider\n   */\n\n\n  AmazonLocationServiceProvider.prototype.getProviderName = function () {\n    return AmazonLocationServiceProvider.PROVIDER_NAME;\n  };\n  /**\n   * Configure Geo part with aws configuration\n   * @param {Object} config - Configuration of the Geo\n   * @return {Object} - Current configuration\n   */\n\n\n  AmazonLocationServiceProvider.prototype.configure = function (config) {\n    logger.debug('configure Amazon Location Service Provider', config);\n    if (!config) return this._config;\n    this._config = Object.assign({}, this._config, config);\n    return this._config;\n  };\n  /**\n   * Get the map resources that are currently available through the provider\n   * @returns {AmazonLocationServiceMapStyle[]}- Array of available map resources\n   */\n\n\n  AmazonLocationServiceProvider.prototype.getAvailableMaps = function () {\n    this._verifyMapResources();\n\n    var mapStyles = [];\n    var availableMaps = this._config.maps.items;\n    var region = this._config.region;\n\n    for (var mapName in availableMaps) {\n      var style = availableMaps[mapName].style;\n      mapStyles.push({\n        mapName: mapName,\n        style: style,\n        region: region\n      });\n    }\n\n    return mapStyles;\n  };\n  /**\n   * Get the map resource set as default in amplify config\n   * @returns {AmazonLocationServiceMapStyle} - Map resource set as the default in amplify config\n   */\n\n\n  AmazonLocationServiceProvider.prototype.getDefaultMap = function () {\n    this._verifyMapResources();\n\n    var mapName = this._config.maps.default;\n    var style = this._config.maps.items[mapName].style;\n    var region = this._config.region;\n    return {\n      mapName: mapName,\n      style: style,\n      region: region\n    };\n  };\n  /**\n   * Search by text input with optional parameters\n   * @param  {string} text - The text string that is to be searched for\n   * @param  {SearchByTextOptions} options? - Optional parameters to the search\n   * @returns {Promise<Place[]>} - Promise resolves to a list of Places that match search parameters\n   */\n\n\n  AmazonLocationServiceProvider.prototype.searchByText = function (text, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, locationServiceInput, client, command, response, error_1, PascalResults, results;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n\n            this._verifySearchIndex(options === null || options === void 0 ? void 0 : options.searchIndexName);\n\n            locationServiceInput = {\n              Text: text,\n              IndexName: this._config.search_indices.default\n            };\n            /**\n             * Map search options to Amazon Location Service input object\n             */\n\n            if (options) {\n              locationServiceInput = __assign(__assign({}, locationServiceInput), mapSearchOptions(options, locationServiceInput));\n            }\n\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            command = new SearchPlaceIndexForTextCommand(locationServiceInput);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , client.send(command)];\n\n          case 3:\n            response = _a.sent();\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            error_1 = _a.sent();\n            logger.debug(error_1);\n            throw error_1;\n\n          case 5:\n            PascalResults = response.Results.map(function (result) {\n              return result.Place;\n            });\n            results = camelcaseKeys(PascalResults, {\n              deep: true\n            });\n            return [2\n            /*return*/\n            , results];\n        }\n      });\n    });\n  };\n  /**\n   * Search for suggestions based on the input text\n   * @param  {string} text - The text string that is to be searched for\n   * @param  {SearchByTextOptions} options? - Optional parameters to the search\n   * @returns {Promise<SearchForSuggestionsResults>} - Resolves to an array of search suggestion strings\n   */\n\n\n  AmazonLocationServiceProvider.prototype.searchForSuggestions = function (text, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, locationServiceInput, client, command, response, error_2, results;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n\n            this._verifySearchIndex(options === null || options === void 0 ? void 0 : options.searchIndexName);\n\n            locationServiceInput = {\n              Text: text,\n              IndexName: this._config.search_indices.default\n            };\n            /**\n             * Map search options to Amazon Location Service input object\n             */\n\n            if (options) {\n              locationServiceInput = __assign(__assign({}, locationServiceInput), mapSearchOptions(options, locationServiceInput));\n            }\n\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            command = new SearchPlaceIndexForSuggestionsCommand(locationServiceInput);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , client.send(command)];\n\n          case 3:\n            response = _a.sent();\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            error_2 = _a.sent();\n            logger.debug(error_2);\n            throw error_2;\n\n          case 5:\n            results = response.Results.map(function (result) {\n              return {\n                text: result.Text,\n                placeId: result.PlaceId\n              };\n            });\n            return [2\n            /*return*/\n            , results];\n        }\n      });\n    });\n  };\n\n  AmazonLocationServiceProvider.prototype._verifyPlaceId = function (placeId) {\n    if (placeId.length === 0) {\n      var errorString = 'PlaceId cannot be an empty string.';\n      logger.debug(errorString);\n      throw new Error(errorString);\n    }\n  };\n\n  AmazonLocationServiceProvider.prototype.searchByPlaceId = function (placeId, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, client, searchByPlaceIdInput, command, response, error_3, place;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n\n            this._verifySearchIndex(options === null || options === void 0 ? void 0 : options.searchIndexName);\n\n            this._verifyPlaceId(placeId);\n\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            searchByPlaceIdInput = {\n              PlaceId: placeId,\n              IndexName: (options === null || options === void 0 ? void 0 : options.searchIndexName) || this._config.search_indices.default\n            };\n            command = new GetPlaceCommand(searchByPlaceIdInput);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , client.send(command)];\n\n          case 3:\n            response = _a.sent();\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            error_3 = _a.sent();\n            logger.debug(error_3);\n            throw error_3;\n\n          case 5:\n            place = response.Place;\n\n            if (place) {\n              return [2\n              /*return*/\n              , camelcaseKeys(place, {\n                deep: true\n              })];\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Reverse geocoding search via a coordinate point on the map\n   * @param coordinates - Coordinates array for the search input\n   * @param options - Options parameters for the search\n   * @returns {Promise<Place>} - Promise that resolves to a place matching search coordinates\n   */\n\n\n  AmazonLocationServiceProvider.prototype.searchByCoordinates = function (coordinates, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, locationServiceInput, client, command, response, error_4, PascalResults, results;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n\n            this._verifySearchIndex(options === null || options === void 0 ? void 0 : options.searchIndexName);\n\n            locationServiceInput = {\n              Position: coordinates,\n              IndexName: this._config.search_indices.default\n            };\n\n            if (options) {\n              if (options.searchIndexName) {\n                locationServiceInput.IndexName = options.searchIndexName;\n              }\n\n              locationServiceInput.MaxResults = options.maxResults;\n            }\n\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            command = new SearchPlaceIndexForPositionCommand(locationServiceInput);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , client.send(command)];\n\n          case 3:\n            response = _a.sent();\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            error_4 = _a.sent();\n            logger.debug(error_4);\n            throw error_4;\n\n          case 5:\n            PascalResults = response.Results.map(function (result) {\n              return result.Place;\n            });\n            results = camelcaseKeys(PascalResults[0], {\n              deep: true\n            });\n            return [2\n            /*return*/\n            , results];\n        }\n      });\n    });\n  };\n  /**\n   * Create geofences inside of a geofence collection\n   * @param geofences - Array of geofence objects to create\n   * @param options? - Optional parameters for creating geofences\n   * @returns {Promise<AmazonLocationServiceSaveGeofencesResults>} - Promise that resolves to an object with:\n   *   successes: list of geofences successfully created\n   *   errors: list of geofences that failed to create\n   */\n\n\n  AmazonLocationServiceProvider.prototype.saveGeofences = function (geofences, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, PascalGeofences, results, geofenceBatches, apiLimit;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (geofences.length < 1) {\n              throw new Error('Geofence input array is empty');\n            }\n\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            } // Verify geofence collection exists in aws-config.js\n\n\n            try {\n              this._verifyGeofenceCollections(options === null || options === void 0 ? void 0 : options.collectionName);\n            } catch (error) {\n              logger.debug(error);\n              throw error;\n            }\n\n            validateGeofencesInput(geofences);\n            PascalGeofences = geofences.map(function (_a) {\n              var geofenceId = _a.geofenceId,\n                  polygon = _a.geometry.polygon;\n              return {\n                GeofenceId: geofenceId,\n                Geometry: {\n                  Polygon: polygon\n                }\n              };\n            });\n            results = {\n              successes: [],\n              errors: []\n            };\n            geofenceBatches = [];\n\n            while (PascalGeofences.length > 0) {\n              apiLimit = 10;\n              geofenceBatches.push(PascalGeofences.splice(0, apiLimit));\n            }\n\n            return [4\n            /*yield*/\n            , Promise.all(geofenceBatches.map(function (batch) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var response, error_5;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      _a.trys.push([0, 2,, 3]);\n\n                      return [4\n                      /*yield*/\n                      , this._AmazonLocationServiceBatchPutGeofenceCall(batch, (options === null || options === void 0 ? void 0 : options.collectionName) || this._config.geofenceCollections.default)];\n\n                    case 1:\n                      response = _a.sent();\n                      return [3\n                      /*break*/\n                      , 3];\n\n                    case 2:\n                      error_5 = _a.sent(); // If the API call fails, add the geofences to the errors array and move to next batch\n\n                      batch.forEach(function (geofence) {\n                        results.errors.push({\n                          geofenceId: geofence.GeofenceId,\n                          error: {\n                            code: 'APIConnectionError',\n                            message: error_5.message\n                          }\n                        });\n                      });\n                      return [2\n                      /*return*/\n                      ];\n\n                    case 3:\n                      // Push all successes to results\n                      response.Successes.forEach(function (success) {\n                        var GeofenceId = success.GeofenceId,\n                            CreateTime = success.CreateTime,\n                            UpdateTime = success.UpdateTime;\n                        results.successes.push({\n                          geofenceId: GeofenceId,\n                          createTime: CreateTime,\n                          updateTime: UpdateTime\n                        });\n                      }); // Push all errors to results\n\n                      response.Errors.forEach(function (error) {\n                        var _a = error.Error,\n                            Code = _a.Code,\n                            Message = _a.Message,\n                            GeofenceId = error.GeofenceId;\n                        results.errors.push({\n                          error: {\n                            code: Code,\n                            message: Message\n                          },\n                          geofenceId: GeofenceId\n                        });\n                      });\n                      return [2\n                      /*return*/\n                      ];\n                  }\n                });\n              });\n            }))];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , results];\n        }\n      });\n    });\n  };\n  /**\n   * Get geofence from a geofence collection\n   * @param geofenceId:string\n   * @param options?: Optional parameters for getGeofence\n   * @returns {Promise<AmazonLocationServiceGeofence>} - Promise that resolves to a geofence object\n   */\n\n\n  AmazonLocationServiceProvider.prototype.getGeofence = function (geofenceId, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, client, commandInput, command, response, error_6, GeofenceId, CreateTime, UpdateTime, Status, Geometry, geofence;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            } // Verify geofence collection exists in aws-config.js\n\n\n            try {\n              this._verifyGeofenceCollections(options === null || options === void 0 ? void 0 : options.collectionName);\n            } catch (error) {\n              logger.debug(error);\n              throw error;\n            }\n\n            validateGeofenceId(geofenceId);\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            commandInput = {\n              GeofenceId: geofenceId,\n              CollectionName: (options === null || options === void 0 ? void 0 : options.collectionName) || this._config.geofenceCollections.default\n            };\n            command = new GetGeofenceCommand(commandInput);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , client.send(command)];\n\n          case 3:\n            response = _a.sent();\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            error_6 = _a.sent();\n            logger.debug(error_6);\n            throw error_6;\n\n          case 5:\n            GeofenceId = response.GeofenceId, CreateTime = response.CreateTime, UpdateTime = response.UpdateTime, Status = response.Status, Geometry = response.Geometry;\n            geofence = {\n              createTime: CreateTime,\n              geofenceId: GeofenceId,\n              geometry: {\n                polygon: Geometry.Polygon\n              },\n              status: Status,\n              updateTime: UpdateTime\n            };\n            return [2\n            /*return*/\n            , geofence];\n        }\n      });\n    });\n  };\n  /**\n   * List geofences from a geofence collection\n   * @param  options?: ListGeofenceOptions\n   * @returns {Promise<ListGeofencesResults>} - Promise that resolves to an object with:\n   *   entries: list of geofences - 100 geofences are listed per page\n   *   nextToken: token for next page of geofences\n   */\n\n\n  AmazonLocationServiceProvider.prototype.listGeofences = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, client, listGeofencesInput, command, response, error_7, NextToken, Entries, results;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            } // Verify geofence collection exists in aws-config.js\n\n\n            try {\n              this._verifyGeofenceCollections(options === null || options === void 0 ? void 0 : options.collectionName);\n            } catch (error) {\n              logger.debug(error);\n              throw error;\n            }\n\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            listGeofencesInput = {\n              NextToken: options === null || options === void 0 ? void 0 : options.nextToken,\n              CollectionName: (options === null || options === void 0 ? void 0 : options.collectionName) || this._config.geofenceCollections.default\n            };\n            command = new ListGeofencesCommand(listGeofencesInput);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , client.send(command)];\n\n          case 3:\n            response = _a.sent();\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            error_7 = _a.sent();\n            logger.debug(error_7);\n            throw error_7;\n\n          case 5:\n            NextToken = response.NextToken, Entries = response.Entries;\n            results = {\n              entries: Entries.map(function (_a) {\n                var GeofenceId = _a.GeofenceId,\n                    CreateTime = _a.CreateTime,\n                    UpdateTime = _a.UpdateTime,\n                    Status = _a.Status,\n                    Polygon = _a.Geometry.Polygon;\n                return {\n                  geofenceId: GeofenceId,\n                  createTime: CreateTime,\n                  updateTime: UpdateTime,\n                  status: Status,\n                  geometry: {\n                    polygon: Polygon\n                  }\n                };\n              }),\n              nextToken: NextToken\n            };\n            return [2\n            /*return*/\n            , results];\n        }\n      });\n    });\n  };\n  /**\n   * Delete geofences from a geofence collection\n   * @param geofenceIds: string|string[]\n   * @param options?: GeofenceOptions\n   * @returns {Promise<DeleteGeofencesResults>} - Promise that resolves to an object with:\n   *  successes: list of geofences successfully deleted\n   *  errors: list of geofences that failed to delete\n   */\n\n\n  AmazonLocationServiceProvider.prototype.deleteGeofences = function (geofenceIds, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, badGeofenceIds, results, geofenceIdBatches, count;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (geofenceIds.length < 1) {\n              throw new Error('GeofenceId input array is empty');\n            }\n\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n\n            this._verifyGeofenceCollections(options === null || options === void 0 ? void 0 : options.collectionName);\n\n            badGeofenceIds = geofenceIds.filter(function (geofenceId) {\n              try {\n                validateGeofenceId(geofenceId);\n              } catch (error) {\n                return true;\n              }\n            });\n\n            if (badGeofenceIds.length > 0) {\n              throw new Error(\"Invalid geofence ids: \" + badGeofenceIds.join(', '));\n            }\n\n            results = {\n              successes: [],\n              errors: []\n            };\n            geofenceIdBatches = [];\n            count = 0;\n\n            while (count < geofenceIds.length) {\n              geofenceIdBatches.push(geofenceIds.slice(count, count += 10));\n            }\n\n            return [4\n            /*yield*/\n            , Promise.all(geofenceIdBatches.map(function (batch) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var response, error_8, badGeofenceIds;\n\n                var _a;\n\n                return __generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      _b.trys.push([0, 2,, 3]);\n\n                      return [4\n                      /*yield*/\n                      , this._AmazonLocationServiceBatchDeleteGeofenceCall(batch, (options === null || options === void 0 ? void 0 : options.collectionName) || this._config.geofenceCollections.default)];\n\n                    case 1:\n                      response = _b.sent();\n                      return [3\n                      /*break*/\n                      , 3];\n\n                    case 2:\n                      error_8 = _b.sent(); // If the API call fails, add the geofences to the errors array and move to next batch\n\n                      batch.forEach(function (geofenceId) {\n                        var errorObject = {\n                          geofenceId: geofenceId,\n                          error: {\n                            code: error_8.message,\n                            message: error_8.message\n                          }\n                        };\n                        results.errors.push(errorObject);\n                      });\n                      return [2\n                      /*return*/\n                      ];\n\n                    case 3:\n                      badGeofenceIds = response.Errors.map(function (_a) {\n                        var geofenceId = _a.geofenceId;\n                        return geofenceId;\n                      });\n\n                      (_a = results.successes).push.apply(_a, __spread(batch.filter(function (Id) {\n                        return !badGeofenceIds.includes(Id);\n                      })));\n\n                      return [2\n                      /*return*/\n                      ];\n                  }\n                });\n              });\n            }))];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , results];\n        }\n      });\n    });\n  };\n  /**\n   * @private\n   */\n\n\n  AmazonLocationServiceProvider.prototype._ensureCredentials = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, cred, error_9;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , Credentials.get()];\n\n          case 1:\n            credentials = _a.sent();\n            if (!credentials) return [2\n            /*return*/\n            , false];\n            cred = Credentials.shear(credentials);\n            logger.debug('Set credentials for storage. Credentials are:', cred);\n            this._config.credentials = cred;\n            return [2\n            /*return*/\n            , true];\n\n          case 2:\n            error_9 = _a.sent();\n            logger.debug('Ensure credentials error. Credentials are:', error_9);\n            return [2\n            /*return*/\n            , false];\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AmazonLocationServiceProvider.prototype._verifyMapResources = function () {\n    if (!this._config.maps) {\n      var errorString = \"No map resources found in amplify config, run 'amplify add geo' to create one and run `amplify push` after\";\n      logger.debug(errorString);\n      throw new Error(errorString);\n    }\n\n    if (!this._config.maps.default) {\n      var errorString = \"No default map resource found in amplify config, run 'amplify add geo' to create one and run `amplify push` after\";\n      logger.debug(errorString);\n      throw new Error(errorString);\n    }\n  };\n\n  AmazonLocationServiceProvider.prototype._verifySearchIndex = function (optionalSearchIndex) {\n    if ((!this._config.search_indices || !this._config.search_indices.default) && !optionalSearchIndex) {\n      var errorString = 'No Search Index found in amplify config, please run `amplify add geo` to create one and run `amplify push` after.';\n      logger.debug(errorString);\n      throw new Error(errorString);\n    }\n  };\n\n  AmazonLocationServiceProvider.prototype._verifyGeofenceCollections = function (optionalGeofenceCollectionName) {\n    if ((!this._config.geofenceCollections || !this._config.geofenceCollections.default) && !optionalGeofenceCollectionName) {\n      var errorString = 'No Geofence Collections found, please run `amplify add geo` to create one and run `amplify push` after.';\n      logger.debug(errorString);\n      throw new Error(errorString);\n    }\n  };\n\n  AmazonLocationServiceProvider.prototype._AmazonLocationServiceBatchPutGeofenceCall = function (PascalGeofences, collectionName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var geofenceInput, client, command, response, error_10;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            geofenceInput = {\n              Entries: PascalGeofences,\n              CollectionName: collectionName || this._config.geofenceCollections.default\n            };\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            command = new BatchPutGeofenceCommand(geofenceInput);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , client.send(command)];\n\n          case 2:\n            response = _a.sent();\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            error_10 = _a.sent();\n            throw error_10;\n\n          case 4:\n            return [2\n            /*return*/\n            , response];\n        }\n      });\n    });\n  };\n\n  AmazonLocationServiceProvider.prototype._AmazonLocationServiceBatchDeleteGeofenceCall = function (geofenceIds, collectionName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var deleteGeofencesInput, client, command, response, error_11;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            deleteGeofencesInput = {\n              GeofenceIds: geofenceIds,\n              CollectionName: collectionName || this._config.geofenceCollections.default\n            };\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            command = new BatchDeleteGeofenceCommand(deleteGeofencesInput);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , client.send(command)];\n\n          case 2:\n            response = _a.sent();\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            error_11 = _a.sent();\n            throw error_11;\n\n          case 4:\n            return [2\n            /*return*/\n            , response];\n        }\n      });\n    });\n  };\n\n  AmazonLocationServiceProvider.CATEGORY = 'Geo';\n  AmazonLocationServiceProvider.PROVIDER_NAME = 'AmazonLocationService';\n  return AmazonLocationServiceProvider;\n}();\n\nexport { AmazonLocationServiceProvider };","map":{"version":3,"sources":["../../src/Providers/AmazonLocationServiceProvider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\n/*\n * Copyright 2017-2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport camelcaseKeys from 'camelcase-keys';\nimport { ConsoleLogger as Logger, Credentials, getAmplifyUserAgent, } from '@aws-amplify/core';\nimport { LocationClient, SearchPlaceIndexForTextCommand, SearchPlaceIndexForSuggestionsCommand, SearchPlaceIndexForPositionCommand, BatchPutGeofenceCommand, GetPlaceCommand, GetGeofenceCommand, ListGeofencesCommand, BatchDeleteGeofenceCommand, } from '@aws-sdk/client-location';\nimport { mapSearchOptions, validateGeofenceId, validateGeofencesInput, } from '../util';\nvar logger = new Logger('AmazonLocationServiceProvider');\nvar AmazonLocationServiceProvider = /** @class */ (function () {\n    /**\n     * Initialize Geo with AWS configurations\n     * @param {Object} config - Configuration object for Geo\n     */\n    function AmazonLocationServiceProvider(config) {\n        this._config = config ? config : {};\n        logger.debug('Geo Options', this._config);\n    }\n    /**\n     * get the category of the plugin\n     * @returns {string} name of the category\n     */\n    AmazonLocationServiceProvider.prototype.getCategory = function () {\n        return AmazonLocationServiceProvider.CATEGORY;\n    };\n    /**\n     * get provider name of the plugin\n     * @returns {string} name of the provider\n     */\n    AmazonLocationServiceProvider.prototype.getProviderName = function () {\n        return AmazonLocationServiceProvider.PROVIDER_NAME;\n    };\n    /**\n     * Configure Geo part with aws configuration\n     * @param {Object} config - Configuration of the Geo\n     * @return {Object} - Current configuration\n     */\n    AmazonLocationServiceProvider.prototype.configure = function (config) {\n        logger.debug('configure Amazon Location Service Provider', config);\n        if (!config)\n            return this._config;\n        this._config = Object.assign({}, this._config, config);\n        return this._config;\n    };\n    /**\n     * Get the map resources that are currently available through the provider\n     * @returns {AmazonLocationServiceMapStyle[]}- Array of available map resources\n     */\n    AmazonLocationServiceProvider.prototype.getAvailableMaps = function () {\n        this._verifyMapResources();\n        var mapStyles = [];\n        var availableMaps = this._config.maps.items;\n        var region = this._config.region;\n        for (var mapName in availableMaps) {\n            var style = availableMaps[mapName].style;\n            mapStyles.push({ mapName: mapName, style: style, region: region });\n        }\n        return mapStyles;\n    };\n    /**\n     * Get the map resource set as default in amplify config\n     * @returns {AmazonLocationServiceMapStyle} - Map resource set as the default in amplify config\n     */\n    AmazonLocationServiceProvider.prototype.getDefaultMap = function () {\n        this._verifyMapResources();\n        var mapName = this._config.maps.default;\n        var style = this._config.maps.items[mapName].style;\n        var region = this._config.region;\n        return { mapName: mapName, style: style, region: region };\n    };\n    /**\n     * Search by text input with optional parameters\n     * @param  {string} text - The text string that is to be searched for\n     * @param  {SearchByTextOptions} options? - Optional parameters to the search\n     * @returns {Promise<Place[]>} - Promise resolves to a list of Places that match search parameters\n     */\n    AmazonLocationServiceProvider.prototype.searchByText = function (text, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentialsOK, locationServiceInput, client, command, response, error_1, PascalResults, results;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._ensureCredentials()];\n                    case 1:\n                        credentialsOK = _a.sent();\n                        if (!credentialsOK) {\n                            throw new Error('No credentials');\n                        }\n                        this._verifySearchIndex(options === null || options === void 0 ? void 0 : options.searchIndexName);\n                        locationServiceInput = {\n                            Text: text,\n                            IndexName: this._config.search_indices.default,\n                        };\n                        /**\n                         * Map search options to Amazon Location Service input object\n                         */\n                        if (options) {\n                            locationServiceInput = __assign(__assign({}, locationServiceInput), mapSearchOptions(options, locationServiceInput));\n                        }\n                        client = new LocationClient({\n                            credentials: this._config.credentials,\n                            region: this._config.region,\n                            customUserAgent: getAmplifyUserAgent(),\n                        });\n                        command = new SearchPlaceIndexForTextCommand(locationServiceInput);\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, client.send(command)];\n                    case 3:\n                        response = _a.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        error_1 = _a.sent();\n                        logger.debug(error_1);\n                        throw error_1;\n                    case 5:\n                        PascalResults = response.Results.map(function (result) { return result.Place; });\n                        results = camelcaseKeys(PascalResults, {\n                            deep: true,\n                        });\n                        return [2 /*return*/, results];\n                }\n            });\n        });\n    };\n    /**\n     * Search for suggestions based on the input text\n     * @param  {string} text - The text string that is to be searched for\n     * @param  {SearchByTextOptions} options? - Optional parameters to the search\n     * @returns {Promise<SearchForSuggestionsResults>} - Resolves to an array of search suggestion strings\n     */\n    AmazonLocationServiceProvider.prototype.searchForSuggestions = function (text, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentialsOK, locationServiceInput, client, command, response, error_2, results;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._ensureCredentials()];\n                    case 1:\n                        credentialsOK = _a.sent();\n                        if (!credentialsOK) {\n                            throw new Error('No credentials');\n                        }\n                        this._verifySearchIndex(options === null || options === void 0 ? void 0 : options.searchIndexName);\n                        locationServiceInput = {\n                            Text: text,\n                            IndexName: this._config.search_indices.default,\n                        };\n                        /**\n                         * Map search options to Amazon Location Service input object\n                         */\n                        if (options) {\n                            locationServiceInput = __assign(__assign({}, locationServiceInput), mapSearchOptions(options, locationServiceInput));\n                        }\n                        client = new LocationClient({\n                            credentials: this._config.credentials,\n                            region: this._config.region,\n                            customUserAgent: getAmplifyUserAgent(),\n                        });\n                        command = new SearchPlaceIndexForSuggestionsCommand(locationServiceInput);\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, client.send(command)];\n                    case 3:\n                        response = _a.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        error_2 = _a.sent();\n                        logger.debug(error_2);\n                        throw error_2;\n                    case 5:\n                        results = response.Results.map(function (result) { return ({\n                            text: result.Text,\n                            placeId: result.PlaceId,\n                        }); });\n                        return [2 /*return*/, results];\n                }\n            });\n        });\n    };\n    AmazonLocationServiceProvider.prototype._verifyPlaceId = function (placeId) {\n        if (placeId.length === 0) {\n            var errorString = 'PlaceId cannot be an empty string.';\n            logger.debug(errorString);\n            throw new Error(errorString);\n        }\n    };\n    AmazonLocationServiceProvider.prototype.searchByPlaceId = function (placeId, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentialsOK, client, searchByPlaceIdInput, command, response, error_3, place;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._ensureCredentials()];\n                    case 1:\n                        credentialsOK = _a.sent();\n                        if (!credentialsOK) {\n                            throw new Error('No credentials');\n                        }\n                        this._verifySearchIndex(options === null || options === void 0 ? void 0 : options.searchIndexName);\n                        this._verifyPlaceId(placeId);\n                        client = new LocationClient({\n                            credentials: this._config.credentials,\n                            region: this._config.region,\n                            customUserAgent: getAmplifyUserAgent(),\n                        });\n                        searchByPlaceIdInput = {\n                            PlaceId: placeId,\n                            IndexName: (options === null || options === void 0 ? void 0 : options.searchIndexName) || this._config.search_indices.default,\n                        };\n                        command = new GetPlaceCommand(searchByPlaceIdInput);\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, client.send(command)];\n                    case 3:\n                        response = _a.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        error_3 = _a.sent();\n                        logger.debug(error_3);\n                        throw error_3;\n                    case 5:\n                        place = response.Place;\n                        if (place) {\n                            return [2 /*return*/, camelcaseKeys(place, { deep: true })];\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Reverse geocoding search via a coordinate point on the map\n     * @param coordinates - Coordinates array for the search input\n     * @param options - Options parameters for the search\n     * @returns {Promise<Place>} - Promise that resolves to a place matching search coordinates\n     */\n    AmazonLocationServiceProvider.prototype.searchByCoordinates = function (coordinates, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentialsOK, locationServiceInput, client, command, response, error_4, PascalResults, results;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._ensureCredentials()];\n                    case 1:\n                        credentialsOK = _a.sent();\n                        if (!credentialsOK) {\n                            throw new Error('No credentials');\n                        }\n                        this._verifySearchIndex(options === null || options === void 0 ? void 0 : options.searchIndexName);\n                        locationServiceInput = {\n                            Position: coordinates,\n                            IndexName: this._config.search_indices.default,\n                        };\n                        if (options) {\n                            if (options.searchIndexName) {\n                                locationServiceInput.IndexName = options.searchIndexName;\n                            }\n                            locationServiceInput.MaxResults = options.maxResults;\n                        }\n                        client = new LocationClient({\n                            credentials: this._config.credentials,\n                            region: this._config.region,\n                            customUserAgent: getAmplifyUserAgent(),\n                        });\n                        command = new SearchPlaceIndexForPositionCommand(locationServiceInput);\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, client.send(command)];\n                    case 3:\n                        response = _a.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        error_4 = _a.sent();\n                        logger.debug(error_4);\n                        throw error_4;\n                    case 5:\n                        PascalResults = response.Results.map(function (result) { return result.Place; });\n                        results = camelcaseKeys(PascalResults[0], {\n                            deep: true,\n                        });\n                        return [2 /*return*/, results];\n                }\n            });\n        });\n    };\n    /**\n     * Create geofences inside of a geofence collection\n     * @param geofences - Array of geofence objects to create\n     * @param options? - Optional parameters for creating geofences\n     * @returns {Promise<AmazonLocationServiceSaveGeofencesResults>} - Promise that resolves to an object with:\n     *   successes: list of geofences successfully created\n     *   errors: list of geofences that failed to create\n     */\n    AmazonLocationServiceProvider.prototype.saveGeofences = function (geofences, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentialsOK, PascalGeofences, results, geofenceBatches, apiLimit;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (geofences.length < 1) {\n                            throw new Error('Geofence input array is empty');\n                        }\n                        return [4 /*yield*/, this._ensureCredentials()];\n                    case 1:\n                        credentialsOK = _a.sent();\n                        if (!credentialsOK) {\n                            throw new Error('No credentials');\n                        }\n                        // Verify geofence collection exists in aws-config.js\n                        try {\n                            this._verifyGeofenceCollections(options === null || options === void 0 ? void 0 : options.collectionName);\n                        }\n                        catch (error) {\n                            logger.debug(error);\n                            throw error;\n                        }\n                        validateGeofencesInput(geofences);\n                        PascalGeofences = geofences.map(function (_a) {\n                            var geofenceId = _a.geofenceId, polygon = _a.geometry.polygon;\n                            return {\n                                GeofenceId: geofenceId,\n                                Geometry: {\n                                    Polygon: polygon,\n                                },\n                            };\n                        });\n                        results = {\n                            successes: [],\n                            errors: [],\n                        };\n                        geofenceBatches = [];\n                        while (PascalGeofences.length > 0) {\n                            apiLimit = 10;\n                            geofenceBatches.push(PascalGeofences.splice(0, apiLimit));\n                        }\n                        return [4 /*yield*/, Promise.all(geofenceBatches.map(function (batch) { return __awaiter(_this, void 0, void 0, function () {\n                                var response, error_5;\n                                return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                        case 0:\n                                            _a.trys.push([0, 2, , 3]);\n                                            return [4 /*yield*/, this._AmazonLocationServiceBatchPutGeofenceCall(batch, (options === null || options === void 0 ? void 0 : options.collectionName) || this._config.geofenceCollections.default)];\n                                        case 1:\n                                            response = _a.sent();\n                                            return [3 /*break*/, 3];\n                                        case 2:\n                                            error_5 = _a.sent();\n                                            // If the API call fails, add the geofences to the errors array and move to next batch\n                                            batch.forEach(function (geofence) {\n                                                results.errors.push({\n                                                    geofenceId: geofence.GeofenceId,\n                                                    error: {\n                                                        code: 'APIConnectionError',\n                                                        message: error_5.message,\n                                                    },\n                                                });\n                                            });\n                                            return [2 /*return*/];\n                                        case 3:\n                                            // Push all successes to results\n                                            response.Successes.forEach(function (success) {\n                                                var GeofenceId = success.GeofenceId, CreateTime = success.CreateTime, UpdateTime = success.UpdateTime;\n                                                results.successes.push({\n                                                    geofenceId: GeofenceId,\n                                                    createTime: CreateTime,\n                                                    updateTime: UpdateTime,\n                                                });\n                                            });\n                                            // Push all errors to results\n                                            response.Errors.forEach(function (error) {\n                                                var _a = error.Error, Code = _a.Code, Message = _a.Message, GeofenceId = error.GeofenceId;\n                                                results.errors.push({\n                                                    error: {\n                                                        code: Code,\n                                                        message: Message,\n                                                    },\n                                                    geofenceId: GeofenceId,\n                                                });\n                                            });\n                                            return [2 /*return*/];\n                                    }\n                                });\n                            }); }))];\n                    case 2:\n                        _a.sent();\n                        return [2 /*return*/, results];\n                }\n            });\n        });\n    };\n    /**\n     * Get geofence from a geofence collection\n     * @param geofenceId:string\n     * @param options?: Optional parameters for getGeofence\n     * @returns {Promise<AmazonLocationServiceGeofence>} - Promise that resolves to a geofence object\n     */\n    AmazonLocationServiceProvider.prototype.getGeofence = function (geofenceId, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentialsOK, client, commandInput, command, response, error_6, GeofenceId, CreateTime, UpdateTime, Status, Geometry, geofence;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._ensureCredentials()];\n                    case 1:\n                        credentialsOK = _a.sent();\n                        if (!credentialsOK) {\n                            throw new Error('No credentials');\n                        }\n                        // Verify geofence collection exists in aws-config.js\n                        try {\n                            this._verifyGeofenceCollections(options === null || options === void 0 ? void 0 : options.collectionName);\n                        }\n                        catch (error) {\n                            logger.debug(error);\n                            throw error;\n                        }\n                        validateGeofenceId(geofenceId);\n                        client = new LocationClient({\n                            credentials: this._config.credentials,\n                            region: this._config.region,\n                            customUserAgent: getAmplifyUserAgent(),\n                        });\n                        commandInput = {\n                            GeofenceId: geofenceId,\n                            CollectionName: (options === null || options === void 0 ? void 0 : options.collectionName) || this._config.geofenceCollections.default,\n                        };\n                        command = new GetGeofenceCommand(commandInput);\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, client.send(command)];\n                    case 3:\n                        response = _a.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        error_6 = _a.sent();\n                        logger.debug(error_6);\n                        throw error_6;\n                    case 5:\n                        GeofenceId = response.GeofenceId, CreateTime = response.CreateTime, UpdateTime = response.UpdateTime, Status = response.Status, Geometry = response.Geometry;\n                        geofence = {\n                            createTime: CreateTime,\n                            geofenceId: GeofenceId,\n                            geometry: {\n                                polygon: Geometry.Polygon,\n                            },\n                            status: Status,\n                            updateTime: UpdateTime,\n                        };\n                        return [2 /*return*/, geofence];\n                }\n            });\n        });\n    };\n    /**\n     * List geofences from a geofence collection\n     * @param  options?: ListGeofenceOptions\n     * @returns {Promise<ListGeofencesResults>} - Promise that resolves to an object with:\n     *   entries: list of geofences - 100 geofences are listed per page\n     *   nextToken: token for next page of geofences\n     */\n    AmazonLocationServiceProvider.prototype.listGeofences = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentialsOK, client, listGeofencesInput, command, response, error_7, NextToken, Entries, results;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._ensureCredentials()];\n                    case 1:\n                        credentialsOK = _a.sent();\n                        if (!credentialsOK) {\n                            throw new Error('No credentials');\n                        }\n                        // Verify geofence collection exists in aws-config.js\n                        try {\n                            this._verifyGeofenceCollections(options === null || options === void 0 ? void 0 : options.collectionName);\n                        }\n                        catch (error) {\n                            logger.debug(error);\n                            throw error;\n                        }\n                        client = new LocationClient({\n                            credentials: this._config.credentials,\n                            region: this._config.region,\n                            customUserAgent: getAmplifyUserAgent(),\n                        });\n                        listGeofencesInput = {\n                            NextToken: options === null || options === void 0 ? void 0 : options.nextToken,\n                            CollectionName: (options === null || options === void 0 ? void 0 : options.collectionName) || this._config.geofenceCollections.default,\n                        };\n                        command = new ListGeofencesCommand(listGeofencesInput);\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, client.send(command)];\n                    case 3:\n                        response = _a.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        error_7 = _a.sent();\n                        logger.debug(error_7);\n                        throw error_7;\n                    case 5:\n                        NextToken = response.NextToken, Entries = response.Entries;\n                        results = {\n                            entries: Entries.map(function (_a) {\n                                var GeofenceId = _a.GeofenceId, CreateTime = _a.CreateTime, UpdateTime = _a.UpdateTime, Status = _a.Status, Polygon = _a.Geometry.Polygon;\n                                return {\n                                    geofenceId: GeofenceId,\n                                    createTime: CreateTime,\n                                    updateTime: UpdateTime,\n                                    status: Status,\n                                    geometry: {\n                                        polygon: Polygon,\n                                    },\n                                };\n                            }),\n                            nextToken: NextToken,\n                        };\n                        return [2 /*return*/, results];\n                }\n            });\n        });\n    };\n    /**\n     * Delete geofences from a geofence collection\n     * @param geofenceIds: string|string[]\n     * @param options?: GeofenceOptions\n     * @returns {Promise<DeleteGeofencesResults>} - Promise that resolves to an object with:\n     *  successes: list of geofences successfully deleted\n     *  errors: list of geofences that failed to delete\n     */\n    AmazonLocationServiceProvider.prototype.deleteGeofences = function (geofenceIds, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentialsOK, badGeofenceIds, results, geofenceIdBatches, count;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (geofenceIds.length < 1) {\n                            throw new Error('GeofenceId input array is empty');\n                        }\n                        return [4 /*yield*/, this._ensureCredentials()];\n                    case 1:\n                        credentialsOK = _a.sent();\n                        if (!credentialsOK) {\n                            throw new Error('No credentials');\n                        }\n                        this._verifyGeofenceCollections(options === null || options === void 0 ? void 0 : options.collectionName);\n                        badGeofenceIds = geofenceIds.filter(function (geofenceId) {\n                            try {\n                                validateGeofenceId(geofenceId);\n                            }\n                            catch (error) {\n                                return true;\n                            }\n                        });\n                        if (badGeofenceIds.length > 0) {\n                            throw new Error(\"Invalid geofence ids: \" + badGeofenceIds.join(', '));\n                        }\n                        results = {\n                            successes: [],\n                            errors: [],\n                        };\n                        geofenceIdBatches = [];\n                        count = 0;\n                        while (count < geofenceIds.length) {\n                            geofenceIdBatches.push(geofenceIds.slice(count, (count += 10)));\n                        }\n                        return [4 /*yield*/, Promise.all(geofenceIdBatches.map(function (batch) { return __awaiter(_this, void 0, void 0, function () {\n                                var response, error_8, badGeofenceIds;\n                                var _a;\n                                return __generator(this, function (_b) {\n                                    switch (_b.label) {\n                                        case 0:\n                                            _b.trys.push([0, 2, , 3]);\n                                            return [4 /*yield*/, this._AmazonLocationServiceBatchDeleteGeofenceCall(batch, (options === null || options === void 0 ? void 0 : options.collectionName) || this._config.geofenceCollections.default)];\n                                        case 1:\n                                            response = _b.sent();\n                                            return [3 /*break*/, 3];\n                                        case 2:\n                                            error_8 = _b.sent();\n                                            // If the API call fails, add the geofences to the errors array and move to next batch\n                                            batch.forEach(function (geofenceId) {\n                                                var errorObject = {\n                                                    geofenceId: geofenceId,\n                                                    error: {\n                                                        code: error_8.message,\n                                                        message: error_8.message,\n                                                    },\n                                                };\n                                                results.errors.push(errorObject);\n                                            });\n                                            return [2 /*return*/];\n                                        case 3:\n                                            badGeofenceIds = response.Errors.map(function (_a) {\n                                                var geofenceId = _a.geofenceId;\n                                                return geofenceId;\n                                            });\n                                            (_a = results.successes).push.apply(_a, __spread(batch.filter(function (Id) { return !badGeofenceIds.includes(Id); })));\n                                            return [2 /*return*/];\n                                    }\n                                });\n                            }); }))];\n                    case 2:\n                        _a.sent();\n                        return [2 /*return*/, results];\n                }\n            });\n        });\n    };\n    /**\n     * @private\n     */\n    AmazonLocationServiceProvider.prototype._ensureCredentials = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentials, cred, error_9;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, Credentials.get()];\n                    case 1:\n                        credentials = _a.sent();\n                        if (!credentials)\n                            return [2 /*return*/, false];\n                        cred = Credentials.shear(credentials);\n                        logger.debug('Set credentials for storage. Credentials are:', cred);\n                        this._config.credentials = cred;\n                        return [2 /*return*/, true];\n                    case 2:\n                        error_9 = _a.sent();\n                        logger.debug('Ensure credentials error. Credentials are:', error_9);\n                        return [2 /*return*/, false];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AmazonLocationServiceProvider.prototype._verifyMapResources = function () {\n        if (!this._config.maps) {\n            var errorString = \"No map resources found in amplify config, run 'amplify add geo' to create one and run `amplify push` after\";\n            logger.debug(errorString);\n            throw new Error(errorString);\n        }\n        if (!this._config.maps.default) {\n            var errorString = \"No default map resource found in amplify config, run 'amplify add geo' to create one and run `amplify push` after\";\n            logger.debug(errorString);\n            throw new Error(errorString);\n        }\n    };\n    AmazonLocationServiceProvider.prototype._verifySearchIndex = function (optionalSearchIndex) {\n        if ((!this._config.search_indices || !this._config.search_indices.default) &&\n            !optionalSearchIndex) {\n            var errorString = 'No Search Index found in amplify config, please run `amplify add geo` to create one and run `amplify push` after.';\n            logger.debug(errorString);\n            throw new Error(errorString);\n        }\n    };\n    AmazonLocationServiceProvider.prototype._verifyGeofenceCollections = function (optionalGeofenceCollectionName) {\n        if ((!this._config.geofenceCollections ||\n            !this._config.geofenceCollections.default) &&\n            !optionalGeofenceCollectionName) {\n            var errorString = 'No Geofence Collections found, please run `amplify add geo` to create one and run `amplify push` after.';\n            logger.debug(errorString);\n            throw new Error(errorString);\n        }\n    };\n    AmazonLocationServiceProvider.prototype._AmazonLocationServiceBatchPutGeofenceCall = function (PascalGeofences, collectionName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var geofenceInput, client, command, response, error_10;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        geofenceInput = {\n                            Entries: PascalGeofences,\n                            CollectionName: collectionName || this._config.geofenceCollections.default,\n                        };\n                        client = new LocationClient({\n                            credentials: this._config.credentials,\n                            region: this._config.region,\n                            customUserAgent: getAmplifyUserAgent(),\n                        });\n                        command = new BatchPutGeofenceCommand(geofenceInput);\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, client.send(command)];\n                    case 2:\n                        response = _a.sent();\n                        return [3 /*break*/, 4];\n                    case 3:\n                        error_10 = _a.sent();\n                        throw error_10;\n                    case 4: return [2 /*return*/, response];\n                }\n            });\n        });\n    };\n    AmazonLocationServiceProvider.prototype._AmazonLocationServiceBatchDeleteGeofenceCall = function (geofenceIds, collectionName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var deleteGeofencesInput, client, command, response, error_11;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        deleteGeofencesInput = {\n                            GeofenceIds: geofenceIds,\n                            CollectionName: collectionName || this._config.geofenceCollections.default,\n                        };\n                        client = new LocationClient({\n                            credentials: this._config.credentials,\n                            region: this._config.region,\n                            customUserAgent: getAmplifyUserAgent(),\n                        });\n                        command = new BatchDeleteGeofenceCommand(deleteGeofencesInput);\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, client.send(command)];\n                    case 2:\n                        response = _a.sent();\n                        return [3 /*break*/, 4];\n                    case 3:\n                        error_11 = _a.sent();\n                        throw error_11;\n                    case 4: return [2 /*return*/, response];\n                }\n            });\n        });\n    };\n    AmazonLocationServiceProvider.CATEGORY = 'Geo';\n    AmazonLocationServiceProvider.PROVIDER_NAME = 'AmazonLocationService';\n    return AmazonLocationServiceProvider;\n}());\nexport { AmazonLocationServiceProvider };\n//# sourceMappingURL=AmazonLocationServiceProvider.js.map"]},"metadata":{},"sourceType":"module"}