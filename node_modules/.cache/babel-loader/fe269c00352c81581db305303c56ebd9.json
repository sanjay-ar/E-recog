{"ast":null,"code":"import { createAsyncThunk, createEntityAdapter, createSelector, createSlice } from \"@reduxjs/toolkit\";\nimport { SpeakerVoiceEmotion } from \"../models\";\nimport { DataStore } from \"aws-amplify\";\nexport const addVoiceEmotionScore = createAsyncThunk(\"speakerVoiceEmotion/addScore\", async data => {\n  return await DataStore.save(new SpeakerVoiceEmotion({\n    score: data.score,\n    meetingID: data.meetingID,\n    ...data.raw,\n    timestamp: Date.now()\n  }));\n});\nconst speakerVoiceEmotionAdapter = createEntityAdapter({\n  sortComparer: (a, b) => a.timestamp - b.timestamp\n});\nconst initialState = speakerVoiceEmotionAdapter.getInitialState();\nexport const speakerVoiceEmotionSlice = createSlice({\n  name: \"speakerVoiceEmotions\",\n  initialState,\n  reducers: {\n    fetchSpeakerVoiceEmotions: speakerVoiceEmotionAdapter.upsertMany,\n    deleteSpeakerVoiceEmotions: speakerVoiceEmotionAdapter.removeMany\n  },\n  extraReducers: builder => {\n    builder.addCase(addVoiceEmotionScore.fulfilled, speakerVoiceEmotionAdapter.upsertOne);\n  }\n});\nexport const {\n  fetchSpeakerVoiceEmotions,\n  deleteSpeakerVoiceEmotions\n} = speakerVoiceEmotionSlice.actions;\nexport const {\n  selectAll: selectAllSpeakerVoiceEmotions\n} = speakerVoiceEmotionAdapter.getSelectors(state => state.speakerVoiceEmotions);\nexport const selectActiveMeetingSpeakerVoiceEmotions = createSelector([state => state.meetings.activeMeeting, selectAllSpeakerVoiceEmotions], (activeMeetingId, emotions) => emotions.filter(e => e.meetingID === activeMeetingId) || []); // Returns the last n voice emotions\n\nexport const selectActiveMeetingSpeakerVoiceEmotionsLastN = n => createSelector(selectActiveMeetingSpeakerVoiceEmotions, emotions => emotions.slice(Math.max(emotions.length - n, 0)));\nexport default speakerVoiceEmotionSlice.reducer;","map":{"version":3,"sources":["/Users/sanjayar/Desktop/moody-main/src/meetings/speakerVoiceEmotionSlice.ts"],"names":["createAsyncThunk","createEntityAdapter","createSelector","createSlice","SpeakerVoiceEmotion","DataStore","addVoiceEmotionScore","data","save","score","meetingID","raw","timestamp","Date","now","speakerVoiceEmotionAdapter","sortComparer","a","b","initialState","getInitialState","speakerVoiceEmotionSlice","name","reducers","fetchSpeakerVoiceEmotions","upsertMany","deleteSpeakerVoiceEmotions","removeMany","extraReducers","builder","addCase","fulfilled","upsertOne","actions","selectAll","selectAllSpeakerVoiceEmotions","getSelectors","state","speakerVoiceEmotions","selectActiveMeetingSpeakerVoiceEmotions","meetings","activeMeeting","activeMeetingId","emotions","filter","e","selectActiveMeetingSpeakerVoiceEmotionsLastN","n","slice","Math","max","length","reducer"],"mappings":"AAAA,SACEA,gBADF,EAEEC,mBAFF,EAGEC,cAHF,EAIEC,WAJF,QAKO,kBALP;AAMA,SAASC,mBAAT,QAAoC,WAApC;AACA,SAASC,SAAT,QAA0B,aAA1B;AAIA,OAAO,MAAMC,oBAAoB,GAAGN,gBAAgB,CAClD,8BADkD,EAElD,MAAOO,IAAP,IAIM;AACJ,SAAQ,MAAMF,SAAS,CAACG,IAAV,CACZ,IAAIJ,mBAAJ,CAAwB;AACtBK,IAAAA,KAAK,EAAEF,IAAI,CAACE,KADU;AAEtBC,IAAAA,SAAS,EAAEH,IAAI,CAACG,SAFM;AAGtB,OAAGH,IAAI,CAACI,GAHc;AAItBC,IAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL;AAJW,GAAxB,CADY,CAAd;AAQD,CAfiD,CAA7C;AAkBP,MAAMC,0BAA0B,GAAGd,mBAAmB,CAAsB;AAC1Ee,EAAAA,YAAY,EAAE,CAACC,CAAD,EAAyBC,CAAzB,KACZD,CAAC,CAACL,SAAF,GAAcM,CAAC,CAACN;AAFwD,CAAtB,CAAtD;AAIA,MAAMO,YAAY,GAAGJ,0BAA0B,CAACK,eAA3B,EAArB;AAEA,OAAO,MAAMC,wBAAwB,GAAGlB,WAAW,CAAC;AAClDmB,EAAAA,IAAI,EAAE,sBAD4C;AAElDH,EAAAA,YAFkD;AAGlDI,EAAAA,QAAQ,EAAE;AACRC,IAAAA,yBAAyB,EAAET,0BAA0B,CAACU,UAD9C;AAERC,IAAAA,0BAA0B,EAAEX,0BAA0B,CAACY;AAF/C,GAHwC;AAOlDC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CAACC,OAAR,CACExB,oBAAoB,CAACyB,SADvB,EAEEhB,0BAA0B,CAACiB,SAF7B;AAID;AAZiD,CAAD,CAA5C;AAeP,OAAO,MAAM;AAAER,EAAAA,yBAAF;AAA6BE,EAAAA;AAA7B,IACXL,wBAAwB,CAACY,OADpB;AAGP,OAAO,MAAM;AAAEC,EAAAA,SAAS,EAAEC;AAAb,IACXpB,0BAA0B,CAACqB,YAA3B,CACGC,KAAD,IAAsBA,KAAK,CAACC,oBAD9B,CADK;AAKP,OAAO,MAAMC,uCAAuC,GAAGrC,cAAc,CACnE,CACGmC,KAAD,IAAsBA,KAAK,CAACG,QAAN,CAAeC,aADvC,EAEEN,6BAFF,CADmE,EAKnE,CAACO,eAAD,EAAiCC,QAAjC,KACEA,QAAQ,CAACC,MAAT,CAAiBC,CAAD,IAAOA,CAAC,CAACnC,SAAF,KAAgBgC,eAAvC,KAA2D,EANM,CAA9D,C,CASP;;AACA,OAAO,MAAMI,4CAA4C,GAAIC,CAAD,IAC1D7C,cAAc,CAACqC,uCAAD,EAA2CI,QAAD,IACtDA,QAAQ,CAACK,KAAT,CAAeC,IAAI,CAACC,GAAL,CAASP,QAAQ,CAACQ,MAAT,GAAkBJ,CAA3B,EAA8B,CAA9B,CAAf,CADY,CADT;AAKP,eAAe1B,wBAAwB,CAAC+B,OAAxC","sourcesContent":["import {\n  createAsyncThunk,\n  createEntityAdapter,\n  createSelector,\n  createSlice,\n} from \"@reduxjs/toolkit\";\nimport { SpeakerVoiceEmotion } from \"../models\";\nimport { DataStore } from \"aws-amplify\";\nimport { RootState } from \"../reduxStore\";\nimport { PaulEkmanVoiceEmotion } from \"./speakerVoiceEmotionUtils\";\n\nexport const addVoiceEmotionScore = createAsyncThunk(\n  \"speakerVoiceEmotion/addScore\",\n  async (data: {\n    score: number;\n    meetingID: string;\n    raw: PaulEkmanVoiceEmotion;\n  }) => {\n    return (await DataStore.save(\n      new SpeakerVoiceEmotion({\n        score: data.score,\n        meetingID: data.meetingID,\n        ...data.raw,\n        timestamp: Date.now(),\n      })\n    )) as SpeakerVoiceEmotion;\n  }\n);\n\nconst speakerVoiceEmotionAdapter = createEntityAdapter<SpeakerVoiceEmotion>({\n  sortComparer: (a: SpeakerVoiceEmotion, b: SpeakerVoiceEmotion) =>\n    a.timestamp - b.timestamp,\n});\nconst initialState = speakerVoiceEmotionAdapter.getInitialState();\n\nexport const speakerVoiceEmotionSlice = createSlice({\n  name: \"speakerVoiceEmotions\",\n  initialState,\n  reducers: {\n    fetchSpeakerVoiceEmotions: speakerVoiceEmotionAdapter.upsertMany,\n    deleteSpeakerVoiceEmotions: speakerVoiceEmotionAdapter.removeMany,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(\n      addVoiceEmotionScore.fulfilled,\n      speakerVoiceEmotionAdapter.upsertOne\n    );\n  },\n});\n\nexport const { fetchSpeakerVoiceEmotions, deleteSpeakerVoiceEmotions } =\n  speakerVoiceEmotionSlice.actions;\n\nexport const { selectAll: selectAllSpeakerVoiceEmotions } =\n  speakerVoiceEmotionAdapter.getSelectors(\n    (state: RootState) => state.speakerVoiceEmotions\n  );\n\nexport const selectActiveMeetingSpeakerVoiceEmotions = createSelector(\n  [\n    (state: RootState) => state.meetings.activeMeeting,\n    selectAllSpeakerVoiceEmotions,\n  ],\n  (activeMeetingId: string | null, emotions: SpeakerVoiceEmotion[]) =>\n    emotions.filter((e) => e.meetingID === activeMeetingId) || []\n);\n\n// Returns the last n voice emotions\nexport const selectActiveMeetingSpeakerVoiceEmotionsLastN = (n: number) =>\n  createSelector(selectActiveMeetingSpeakerVoiceEmotions, (emotions) =>\n    emotions.slice(Math.max(emotions.length - n, 0))\n  );\n\nexport default speakerVoiceEmotionSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}