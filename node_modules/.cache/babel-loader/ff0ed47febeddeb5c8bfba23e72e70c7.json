{"ast":null,"code":"var _jsxFileName = \"/Users/sanjayar/Desktop/moody-main/src/pages/meeting/StartScreenCapturingDialog.tsx\",\n    _s = $RefreshSig$();\n\nimport SimpleDialog from \"../../components/SimpleDialog\";\nimport { Typography } from \"@material-ui/core\";\nimport { useEffect, useState } from \"react\";\nimport { useAppSelector } from \"../../reduxHooks\";\nimport { activeMeetingRunning } from \"../../meetings/meetingsSelectors\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function StartScreenCapturingDialog({\n  handleStartScreenCapturing\n}) {\n  _s();\n\n  const [open, setOpen] = useState(false);\n  const meetingRunning = useAppSelector(activeMeetingRunning);\n  useEffect(() => {\n    if (meetingRunning) {\n      setOpen(true);\n    }\n\n    return () => {\n      setOpen(false);\n    };\n  }, [meetingRunning]);\n  return /*#__PURE__*/_jsxDEV(SimpleDialog, {\n    header: \"Start the Screen Recording?\",\n    body: /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body1\",\n      children: \"We will ask you for permission to access your screen. This is necessary to keep track of your audience's face emotions.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this),\n    primaryAction: () => {\n      handleStartScreenCapturing();\n      setOpen(false);\n    },\n    primaryActionText: \"Allow\",\n    secondaryAction: () => {\n      setOpen(false);\n    },\n    secondaryActionText: \"Cancel\",\n    open: open,\n    handleClose: () => {\n      setOpen(false);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n\n_s(StartScreenCapturingDialog, \"mKYxMYLrNkI7Vru2KMoHEjU0mbc=\", false, function () {\n  return [useAppSelector];\n});\n\n_c = StartScreenCapturingDialog;\n\nvar _c;\n\n$RefreshReg$(_c, \"StartScreenCapturingDialog\");","map":{"version":3,"sources":["/Users/sanjayar/Desktop/moody-main/src/pages/meeting/StartScreenCapturingDialog.tsx"],"names":["SimpleDialog","Typography","useEffect","useState","useAppSelector","activeMeetingRunning","StartScreenCapturingDialog","handleStartScreenCapturing","open","setOpen","meetingRunning"],"mappings":";;;AAAA,OAAOA,YAAP,MAAyB,+BAAzB;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,oBAAT,QAAqC,kCAArC;;AAMA,eAAe,SAASC,0BAAT,CAAoC;AACjDC,EAAAA;AADiD,CAApC,EAEkC;AAAA;;AAC/C,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAU,KAAV,CAAhC;AACA,QAAMO,cAAuB,GAAGN,cAAc,CAACC,oBAAD,CAA9C;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIQ,cAAJ,EAAoB;AAClBD,MAAAA,OAAO,CAAC,IAAD,CAAP;AACD;;AAED,WAAO,MAAM;AACXA,MAAAA,OAAO,CAAC,KAAD,CAAP;AACD,KAFD;AAGD,GARQ,EAQN,CAACC,cAAD,CARM,CAAT;AAUA,sBACE,QAAC,YAAD;AACE,IAAA,MAAM,EAAC,6BADT;AAEE,IAAA,IAAI,eACF,QAAC,UAAD;AAAY,MAAA,OAAO,EAAC,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ;AAQE,IAAA,aAAa,EAAE,MAAM;AACnBH,MAAAA,0BAA0B;AAC1BE,MAAAA,OAAO,CAAC,KAAD,CAAP;AACD,KAXH;AAYE,IAAA,iBAAiB,EAAC,OAZpB;AAaE,IAAA,eAAe,EAAE,MAAM;AACrBA,MAAAA,OAAO,CAAC,KAAD,CAAP;AACD,KAfH;AAgBE,IAAA,mBAAmB,EAAC,QAhBtB;AAiBE,IAAA,IAAI,EAAED,IAjBR;AAkBE,IAAA,WAAW,EAAE,MAAM;AACjBC,MAAAA,OAAO,CAAC,KAAD,CAAP;AACD;AApBH;AAAA;AAAA;AAAA;AAAA,UADF;AAwBD;;GAxCuBH,0B;UAIUF,c;;;KAJVE,0B","sourcesContent":["import SimpleDialog from \"../../components/SimpleDialog\";\nimport { Typography } from \"@material-ui/core\";\nimport { useEffect, useState } from \"react\";\nimport { useAppSelector } from \"../../reduxHooks\";\nimport { activeMeetingRunning } from \"../../meetings/meetingsSelectors\";\n\nexport type StartScreenCapturingDialogProps = {\n  handleStartScreenCapturing: () => void;\n};\n\nexport default function StartScreenCapturingDialog({\n  handleStartScreenCapturing,\n}: StartScreenCapturingDialogProps): JSX.Element {\n  const [open, setOpen] = useState<boolean>(false);\n  const meetingRunning: boolean = useAppSelector(activeMeetingRunning);\n\n  useEffect(() => {\n    if (meetingRunning) {\n      setOpen(true);\n    }\n\n    return () => {\n      setOpen(false);\n    };\n  }, [meetingRunning]);\n\n  return (\n    <SimpleDialog\n      header=\"Start the Screen Recording?\"\n      body={\n        <Typography variant=\"body1\">\n          We will ask you for permission to access your screen. This is\n          necessary to keep track of your audience's face emotions.\n        </Typography>\n      }\n      primaryAction={() => {\n        handleStartScreenCapturing();\n        setOpen(false);\n      }}\n      primaryActionText=\"Allow\"\n      secondaryAction={() => {\n        setOpen(false);\n      }}\n      secondaryActionText=\"Cancel\"\n      open={open}\n      handleClose={() => {\n        setOpen(false);\n      }}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}